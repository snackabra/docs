{
	"id": 0,
	"name": "JSLib Reference Manual",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 303,
			"name": "KeyPrefix",
			"variant": "declaration",
			"kind": 8,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "class 'SBCrypto', below, provides a class with wrappers for subtle crypto, as well as\nsome SB-specific utility functions.\n\nTypically a public jsonwebkey (JWK) will look something like this in json string format:\n\n                       \"{\\\"crv\\\":\\\"P-384\\\",\\\"ext\\\":true,\\\"key_ops\\\":[],\\\"kty\\\":\\\"EC\\\",\n                       \\\"x\\\":\\\"9s17B4i0Cuf_w9XN_uAq2DFePOr6S3sMFMA95KjLN8akBUWEhPAcuMEMwNUlrrkN\\\",\n                       \\\"y\\\":\\\"6dAtcyMbtsO5ufKvlhxRsvjTmkABGlTYG1BrEjTpwrAgtmn6k25GR7akklz9klBr\\\"}\"\n\nA private key will look something like this:\n\n                      \"{\\\"crv\\\":\\\"P-384\\\",\n                      \\\"d\\\":\\\"KCJHDZ34XgVFsS9-sU09HFzXZhnGCvnDgJ5a8GTSfjuJQaq-1N2acvchPRhknk8B\\\",\n                      \\\"ext\\\":true,\\\"key_ops\\\":[\\\"deriveKey\\\"],\\\"kty\\\":\\\"EC\\\",\n                      \\\"x\\\":\\\"rdsyBle0DD1hvp2OE2mINyyI87Cyg7FS3tCQUIeVkfPiNOACtFxi6iP8oeYt-Dge\\\",\n                      \\\"y\\\":\\\"qW9VP72uf9rgUU117G7AfTkCMncJbT5scIaIRwBXfqET6FYcq20fwSP7R911J2_t\\\"}\"\n\nThese are elliptic curve keys, we use P-384 (secp384r1). Mostly you will just\nbe using the 'class SB384' object, and all the details are handled.\n\nThe main (EC) RFC is 7518 (https://datatracker.ietf.org/doc/html/rfc7518#section-6.2),\nsupervised by IESG except for a tiny addition of one parameter (\"ext\") that is \nsupervised by the W3C Crypto WG (https://w3c.github.io/webcrypto/#ecdsa).\n\nEC in JWK has a number of parameters, but for us the only required ones are:\n\n crv: the curve (P-384 in this case)\n x: the x coordinate of the public key\n y: the y coordinate of the public key\n d: the private key (if it's a private key)\n kty: the key type (EC in this case)\n ext: the 'extractable' flag\n key_ops: (optional) permitted the key operations\n\nAll these components are implied except for x, y, and d. Various ways of encoding\n(eg either just 'd', or just 'x', or 'x,y', or 'd,x', or 'd,x,y') are handled\nusing a prefix system on the keys when represented as a single (base62) string.\n\nStarting with 'P' means public, 'X' means private.\n\n \"PNk4\": public key; x and y are present, the rest implied [KeyPrefix.SBPublicK+ey]\n \"PNk2\": public key, compressed, y is even\n \"PNK3\": public key, compressed, y is odd\n\n \"Xj34\": private key: x, y, d are present, the rest implied [KeyPrefix.SBPrivateKey]\n \"Xj32\": private key, compressed, has x and d, y is even\n \"Xj33\": private key, compressed, has x and d, y is odd\n\n \"XjZx\": private key, \"dehydrated\"; only d is present, x needed from other source (and y is even)\n\nThe fourth character encoded in enum KeySubPrefix below. Note that we encode using\nbase62 'externally', but 'x', 'y', and 'd' internally are in base64.\n\nKeys default to being compressed.\n\nFor the AES key, we don't have an internal format; properties would include:\n\n \"k\": the key itself, encoded as base64\n \"alg\": \"A256GCM\"\n \"key_ops\": [\"encrypt\", \"decrypt\"]\n \"kty\": \"oct\"\n\nOnly the \"k\" property is required, the rest are implied, so it's trivial to track.\nWhenever on the wire A256GCM would just require base62 encoding (into 43 characters).\n\nThe above (3-letter) prefixes we've generated randomly to hopefully avoid\ncollisions with other formats. For 2/3/4 we follow common (wire) formats.\nThere aren't conventions for what we're calling 'dehydrated' keys (they sort of\nappear in crypto currency wallets).\n\nThe above in combination with Channels:\n   \n- private key: always d, x, ySign\n- public key: always x, ySign\n- channel key: same as public key\n\nchannelId: can be derived from (channel) public key (from x,y)\n\nwhen you join a channel, you can join w public key of channel, or channelId;\nif you join just with channelId, you need channel server (to fetch public key)\n\nspecial format: dehydrated private key: just d (x through some other means)"
					}
				]
			},
			"children": [
				{
					"id": 306,
					"name": "SBDehydratedKey",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"type": {
						"type": "literal",
						"value": "XjZ"
					}
				},
				{
					"id": 305,
					"name": "SBPrivateKey",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"type": {
						"type": "literal",
						"value": "Xj3"
					}
				},
				{
					"id": 304,
					"name": "SBPublicKey",
					"variant": "declaration",
					"kind": 16,
					"flags": {},
					"type": {
						"type": "literal",
						"value": "PNk"
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						306,
						305,
						304
					]
				}
			]
		},
		{
			"id": 593,
			"name": "Channel",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Channels are the core communication and 'read/write' object.\n\nThe Channel class communicates asynchronously with the channel.\n\nThe ChannelSocket class is a subclass of Channel, and it communicates\nsynchronously (via websockets).\n\nProtocol is called for every message to get the CryptoKey to use for that\nmessage; if provided, then it's the default for each message. Individual\nmessages can override this. Upon sending, one or the other needs to be there.\nThe default protocol is Protocol_ECDH, which does basic sender-receipient\npublic key encryption.\n\nThe interface equivalent of a Channel is "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "SBChannelHandle",
						"target": 112,
						"tsLinkText": ""
					},
					{
						"kind": "text",
						"text": ".\n\nNote that you don't need to worry about what API calls involve race\nconditions and which don't, the library will do that for you. Like most\nclasses in SB it follows the \"ready\" template: objects can be used right\naway, but they decide for themselves if they're ready or not. The SB384 state\nis the *user* of the channel, not the channel itself; it has an Owner (also\nSB384 object), which can be the same as the user/visitor, but that requires\nfinalizing creating the channel to find out (from the channel server)."
					}
				]
			},
			"children": [
				{
					"id": 634,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 635,
							"name": "new Channel",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Channel supports creation from scratch, from a handle, or from a key.\nWith no parameters, you're creating a channel from scratch, which\nmeans in particular it creates the Owner keys. The resulting object\ncan be recreated from "
									},
									{
										"kind": "code",
										"text": "`channel.userPrivateKey`"
									},
									{
										"kind": "text",
										"text": ". A from-scratch\nChannel is an \"abstract\" object, a mathematical construct, it isn't\nyet hosted anywhere. But it's guaranteed to be globally unique."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 593,
								"name": "Channel",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": 424,
								"name": "SBChannelKeys.constructor"
							}
						},
						{
							"id": 636,
							"name": "new Channel",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "In the special case where you want to create a Channel from scratch,\nand immediately start using it, you can directly pass a protocol and\nmark absense of a handle with "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"parameters": [
								{
									"id": 637,
									"name": "newChannel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "literal",
										"value": null
									}
								},
								{
									"id": 638,
									"name": "protocol",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 357,
										"name": "SBProtocol",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 593,
								"name": "Channel",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "SBChannelKeys.constructor"
							}
						},
						{
							"id": 639,
							"name": "new Channel",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If you are re-createating a Channel from the Owner private key, you\ncan so so directly."
									}
								]
							},
							"parameters": [
								{
									"id": 640,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 641,
									"name": "protocol",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 357,
										"name": "SBProtocol",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 593,
								"name": "Channel",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "SBChannelKeys.constructor"
							}
						},
						{
							"id": 642,
							"name": "new Channel",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If you have a full (or partial) handle present, you can use that as well;\nfor example it might already contain the name of a specific channel server,\nthe ChannelData from that server for the channel, etc. This is also the\nquickest way, since bootstrapping from keys requires more crypto."
									}
								]
							},
							"parameters": [
								{
									"id": 643,
									"name": "handle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "SBChannelHandle"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 112,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								},
								{
									"id": 644,
									"name": "protocol",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "SBProtocol"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 357,
										"name": "SBProtocol",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 593,
								"name": "Channel",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "SBChannelKeys.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 423,
						"name": "SBChannelKeys.constructor"
					}
				},
				{
					"id": 645,
					"name": "channelReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 593,
								"name": "Channel",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 748,
					"name": "channelServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 429,
						"name": "SBChannelKeys.channelServer"
					}
				},
				{
					"id": 780,
					"name": "errorState",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 463,
						"name": "SBChannelKeys.errorState"
					}
				},
				{
					"id": 650,
					"name": "isClosed",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 646,
					"name": "locked",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 647,
					"name": "protocol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 357,
						"name": "SBProtocol",
						"package": "snackabra"
					},
					"defaultValue": "Channel.defaultProtocol"
				},
				{
					"id": 769,
					"name": "sb384Ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 543,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 452,
						"name": "SBChannelKeys.sb384Ready"
					}
				},
				{
					"id": 746,
					"name": "sbChannelKeysReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 421,
								"name": "SBChannelKeys",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 427,
						"name": "SBChannelKeys.sbChannelKeysReady"
					}
				},
				{
					"id": 649,
					"name": "sendQueue",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 263,
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "snackabra-jslib/snackabra.ts",
									"qualifiedName": "EnqueuedMessage"
								},
								"name": "EnqueuedMessage",
								"package": "snackabra"
							}
						],
						"name": "MessageQueue",
						"package": "snackabra"
					},
					"defaultValue": "..."
				},
				{
					"id": 648,
					"name": "visitors",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Map"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Map",
						"package": "typescript"
					},
					"defaultValue": "..."
				},
				{
					"id": 597,
					"name": "HIGHEST_TIMESTAMP",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the 'lowest' possible timestamp."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "..."
				},
				{
					"id": 596,
					"name": "LOWEST_TIMESTAMP",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the 'lowest' possible timestamp."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "..."
				},
				{
					"id": 594,
					"name": "ReadyFlag",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"type": {
						"type": "intrinsic",
						"name": "symbol"
					},
					"defaultValue": "...",
					"overwrites": {
						"type": "reference",
						"target": 422,
						"name": "SBChannelKeys.ReadyFlag"
					}
				},
				{
					"id": 595,
					"name": "defaultProtocol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"type": {
						"type": "reference",
						"target": 357,
						"name": "SBProtocol",
						"package": "snackabra"
					},
					"defaultValue": "..."
				},
				{
					"id": 615,
					"name": "timestampRegex",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "RegExp"
						},
						"name": "RegExp",
						"package": "typescript"
					},
					"defaultValue": "..."
				},
				{
					"id": 653,
					"name": "ChannelReadyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 654,
						"name": "ChannelReadyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						}
					}
				},
				{
					"id": 781,
					"name": "SB384ReadyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 782,
						"name": "SB384ReadyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "any"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.SB384ReadyFlag"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 464,
						"name": "SBChannelKeys.SB384ReadyFlag"
					}
				},
				{
					"id": 749,
					"name": "SBChannelKeysReadyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 750,
						"name": "SBChannelKeysReadyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "any"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.SBChannelKeysReadyFlag"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 432,
						"name": "SBChannelKeys.SBChannelKeysReadyFlag"
					}
				},
				{
					"id": 655,
					"name": "api",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 656,
						"name": "api",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "this"
						}
					}
				},
				{
					"id": 751,
					"name": "channelData",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 752,
						"name": "channelData",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 118,
							"name": "SBChannelData",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.channelData"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 434,
						"name": "SBChannelKeys.channelData"
					}
				},
				{
					"id": 755,
					"name": "channelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 756,
						"name": "channelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.channelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 438,
						"name": "SBChannelKeys.channelId"
					}
				},
				{
					"id": 757,
					"name": "handle",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 758,
						"name": "handle",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 112,
							"name": "SBChannelHandle",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.handle"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 440,
						"name": "SBChannelKeys.handle"
					}
				},
				{
					"id": 785,
					"name": "hash",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 786,
						"name": "hash",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns a unique identifier for external use, that will be unique\nfor any class or object that uses SB384 as it's root.\n\nThis is deterministic. Typical use case is to translate a user id\ninto a "
								},
								{
									"kind": "inline-tag",
									"tag": "@link",
									"text": "ChannelId"
								},
								{
									"kind": "text",
									"text": " (eg the channel that any user id is inherently\nthe owner of).\n\nThe hash is base62 encoding of the SHA-384 hash of the public key."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.hash"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 468,
						"name": "SBChannelKeys.hash"
					}
				},
				{
					"id": 787,
					"name": "hashB32",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 788,
						"name": "hashB32",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Similar to "
								},
								{
									"kind": "inline-tag",
									"tag": "@link",
									"text": "SB384.hash",
									"target": 567,
									"tsLinkText": ""
								},
								{
									"kind": "text",
									"text": ", but base32 encoded."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.hashB32"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 470,
						"name": "SBChannelKeys.hashB32"
					}
				},
				{
					"id": 799,
					"name": "jwkPrivate",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 800,
						"name": "jwkPrivate",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.jwkPrivate"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 482,
						"name": "SBChannelKeys.jwkPrivate"
					}
				},
				{
					"id": 801,
					"name": "jwkPublic",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 802,
						"name": "jwkPublic",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.jwkPublic"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 484,
						"name": "SBChannelKeys.jwkPublic"
					}
				},
				{
					"id": 753,
					"name": "owner",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 754,
						"name": "owner",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "intrinsic",
									"name": "boolean"
								},
								{
									"type": "literal",
									"value": ""
								}
							]
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.owner"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 436,
						"name": "SBChannelKeys.owner"
					}
				},
				{
					"id": 791,
					"name": "ownerChannelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 792,
						"name": "ownerChannelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "inline-tag",
									"tag": "@link",
									"text": "ChannelID"
								},
								{
									"kind": "text",
									"text": " that corresponds to this, if it's an owner"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.ownerChannelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 474,
						"name": "SBChannelKeys.ownerChannelId"
					}
				},
				{
					"id": 783,
					"name": "private",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 784,
						"name": "private",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns true if this is a private key, otherwise false.\nWill throw an exception if the object is not ready."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.private"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 466,
						"name": "SBChannelKeys.private"
					}
				},
				{
					"id": 793,
					"name": "privateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 794,
						"name": "privateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.privateKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 476,
						"name": "SBChannelKeys.privateKey"
					}
				},
				{
					"id": 797,
					"name": "publicKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 798,
						"name": "publicKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.publicKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 480,
						"name": "SBChannelKeys.publicKey"
					}
				},
				{
					"id": 651,
					"name": "ready",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 652,
						"name": "ready",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
								"qualifiedName": "Promise"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 593,
									"name": "Channel",
									"package": "snackabra"
								}
							],
							"name": "Promise",
							"package": "typescript"
						},
						"overwrites": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.ready"
						}
					},
					"overwrites": {
						"type": "reference",
						"target": 430,
						"name": "SBChannelKeys.ready"
					}
				},
				{
					"id": 795,
					"name": "signKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 796,
						"name": "signKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.signKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 478,
						"name": "SBChannelKeys.signKey"
					}
				},
				{
					"id": 789,
					"name": "userId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 790,
						"name": "userId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.userId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 472,
						"name": "SBChannelKeys.userId"
					}
				},
				{
					"id": 807,
					"name": "userPrivateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 808,
						"name": "userPrivateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Wire format of full info of key (eg private key). Compressed."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.userPrivateKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 490,
						"name": "SBChannelKeys.userPrivateKey"
					}
				},
				{
					"id": 809,
					"name": "userPrivateKeyDehydrated",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 810,
						"name": "userPrivateKeyDehydrated",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Compressed and dehydrated, meaning, 'x' needs to come from another source.\n(If lost it can be reconstructed from 'd')"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.userPrivateKeyDehydrated"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 492,
						"name": "SBChannelKeys.userPrivateKeyDehydrated"
					}
				},
				{
					"id": 805,
					"name": "userPublicKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 806,
						"name": "userPublicKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Wire format of full (decodable) public key"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.userPublicKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 488,
						"name": "SBChannelKeys.userPublicKey"
					}
				},
				{
					"id": 803,
					"name": "ySign",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 804,
						"name": "ySign",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": 0
								},
								{
									"type": "literal",
									"value": 1
								}
							]
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.ySign"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 486,
						"name": "SBChannelKeys.ySign"
					}
				},
				{
					"id": 712,
					"name": "acceptVisitor",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 713,
							"name": "acceptVisitor",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 714,
									"name": "userId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 739,
					"name": "budd",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 740,
							"name": "budd",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "\"budd\" will spin a channel off an existing one that you own,\nor transfer storage budget to an existing channel.\n\nYou need to provide one of the following combinations of info:\n\n- nothing: creates new channel with minmal permitted budget\n- just storage amount: creates new channel with that amount, returns new channel\n- just a target channel: moves a chunk of storage to that channel (see below)\n- target channel and storage amount: moves that amount to that channel\n- keys and storage amount: creates new channel with those keys and that storage amount\n\nIf you want to budd into a channel with specific keys, you'll need to\ncreate a new set of keys (SBChannelKeys) and pass the SBChannelData from that.\n\nIt returns a complete SBChannelHandle, which will include the private key\n\nAnother way to remember the above: all combinations are valid except\nboth a target channel and assigning keys.\n\nIn terms of 'keys', you can provide a JsonWebKey, or a SBUserPrivateKey,\nor a channel handle. JWK is there for backwards compatibility.\n\nNote: if you're specifying the target channel, then the return values will\nnot include the private key (that return value will be empty).\n\nNote: the owner of the target channel will get a message that you budded\ninto their channel, which includes the channelId it was budded from.\n\nNote: a negative storage amount is interpreted as 'leave that much behind'.\n\nAny indications that your parameters are wrong will result in a rejected\npromise. This includes if you ask for more storage than is there, or if\nyour negative value is more than the storage budget that's there. \n\nIf the budget and target channels are the same, it will throw.\n\nIf you omit budget size, it will use the smallest allowed new channel\nstorage (currently 32 MB). This will happens regardless of if you are\ncreating a new channel, or 'depositing'.\n\nIf you give the size value of 'Infinity', then all the storage available\non the source channel will be transferred to the target channel\n(aka 'plunder').\n\nOn the server side, budd is in two steps, first extracting the storage\nbudget from the mother channel, and then creating or transferring the\nstorage budget to the target channel."
									}
								]
							},
							"parameters": [
								{
									"id": 741,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 742,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 744,
													"name": "size",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 743,
													"name": "targetChannel",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"target": 112,
														"name": "SBChannelHandle",
														"package": "snackabra"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														744,
														743
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 112,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 759,
					"name": "buildApiBody",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 760,
							"name": "buildApiBody",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 761,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 762,
									"name": "apiPayload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 133,
										"name": "ChannelApiBody",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 443,
								"name": "SBChannelKeys.buildApiBody"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 442,
						"name": "SBChannelKeys.buildApiBody"
					}
				},
				{
					"id": 763,
					"name": "callApi",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 764,
							"name": "callApi",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Implements Channel api calls.\n\nNote that the API call details are also embedded in the ChannelMessage,\nand signed by the sender, completely separate from HTTP etc auth."
									}
								]
							},
							"parameters": [
								{
									"id": 765,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 447,
								"name": "SBChannelKeys.callApi"
							}
						},
						{
							"id": 766,
							"name": "callApi",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 767,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 768,
									"name": "apiPayload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 449,
								"name": "SBChannelKeys.callApi"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 446,
						"name": "SBChannelKeys.callApi"
					}
				},
				{
					"id": 687,
					"name": "close",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 688,
							"name": "close",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 677,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 678,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authorizes/registers this channel on the provided server"
									}
								]
							},
							"parameters": [
								{
									"id": 679,
									"name": "storageToken",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 105,
										"name": "SBStorageToken",
										"package": "snackabra"
									}
								},
								{
									"id": 680,
									"name": "channelServer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 593,
										"name": "Channel",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 657,
					"name": "extractMessage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 658,
							"name": "extractMessage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Takes a 'ChannelMessage' format and presents it as a 'Message'. Does a\nvariety of things. If there is any issue, will return 'undefined', and you\nshould probably just ignore that message. Only requirement is you extract\npayload before calling this (some callees needs to, or wants to, fill in\nthings in ChannelMessage)"
									}
								]
							},
							"parameters": [
								{
									"id": 659,
									"name": "msgRaw",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": 144,
												"name": "ChannelMessage",
												"package": "snackabra"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": 123,
												"name": "Message",
												"package": "snackabra"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 660,
					"name": "extractMessageMap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 661,
							"name": "extractMessageMap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Applies 'extractMessage()' to a map of messages."
									}
								]
							},
							"parameters": [
								{
									"id": 662,
									"name": "msgMap",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Map"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 144,
												"name": "ChannelMessage",
												"package": "snackabra"
											}
										],
										"name": "Map",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Map"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 123,
												"name": "Message",
												"package": "snackabra"
											}
										],
										"name": "Map",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 667,
					"name": "finalizeMessage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 668,
							"name": "finalizeMessage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 669,
									"name": "msg",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 144,
										"name": "ChannelMessage",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 144,
										"name": "ChannelMessage",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 717,
					"name": "getAdminData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 718,
							"name": "getAdminData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 164,
										"name": "ChannelAdminData",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 715,
					"name": "getCapacity",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 716,
							"name": "getCapacity",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 730,
					"name": "getChannelKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 731,
							"name": "getChannelKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 118,
										"name": "SBChannelData",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 701,
					"name": "getHistory",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 702,
							"name": "getHistory",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns map of message keys from the server corresponding to the request."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 227,
										"name": "MessageHistoryDirectory",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 681,
					"name": "getLastMessageTimes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 682,
							"name": "getLastMessageTimes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Deprecated. Would take an array of channelIds and get latest time stamp from all of them"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 683,
					"name": "getLatestTimestamp",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 684,
							"name": "getLatestTimestamp",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets the latest known timestamp on the server. Returns it in prefix string format."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 689,
					"name": "getMessageKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 690,
							"name": "getMessageKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns map of message keys from the server corresponding to the request.\nTakes a single optional parameter, which is the time stamp prefix for which\na set is requested. If not provided, the default is '0' (which corresponds\nto entire history). The return data structure includes the map of message\nkeys, and the current history shard (which is 'null' if there is none)."
									}
								]
							},
							"parameters": [
								{
									"id": 691,
									"name": "prefix",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'0'"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 692,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 694,
													"name": "historyShard",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 183,
														"name": "SBObjectHandle",
														"package": "snackabra"
													}
												},
												{
													"id": 693,
													"name": "keys",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
															"qualifiedName": "Set"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															}
														],
														"name": "Set",
														"package": "typescript"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														694,
														693
													]
												}
											]
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 698,
					"name": "getMessageMap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 699,
							"name": "getMessageMap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Main function for getting a chunk of messages from the server."
									}
								]
							},
							"parameters": [
								{
									"id": 700,
									"name": "messageKeys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Set"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Set",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Map"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 123,
												"name": "Message",
												"package": "snackabra"
											}
										],
										"name": "Map",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 719,
					"name": "getMother",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 720,
							"name": "getMother",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 710,
					"name": "getPage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 711,
							"name": "getPage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Note that 'getPage' can be done without any authentication, in which\ncase have a look at Snackabra.getPage(). If however the Page is locked,\nyou need to access it through this ChannelApi entry point.\n\nBut conversely, we don't need a prefix or anything else, since\nwe know the channel. So .. we can just shoot this off.\n\nNote that a 'Page' might be mime-typed, in which case you should\nuse a regular fetch() call and handle results accordingly. This\nfunction is for 'sb384payloadV3' only."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 732,
					"name": "getPubKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 733,
							"name": "getPubKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Map"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Map",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 695,
					"name": "getRawMessageMap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 696,
							"name": "getRawMessageMap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 697,
									"name": "messageKeys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Set"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Set",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Map"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ArrayBuffer"
												},
												"name": "ArrayBuffer",
												"package": "typescript"
											}
										],
										"name": "Map",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 734,
					"name": "getStorageLimit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 735,
							"name": "getStorageLimit",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 736,
					"name": "getStorageToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 737,
							"name": "getStorageToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 738,
									"name": "size",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 105,
										"name": "SBStorageToken",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 721,
					"name": "isLocked",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 722,
							"name": "isLocked",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 723,
					"name": "lock",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 724,
							"name": "lock",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 725,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 726,
													"name": "success",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														726
													]
												}
											]
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 685,
					"name": "messageQueueManager",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 686,
							"name": "messageQueueManager",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 663,
					"name": "packageMessage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 664,
							"name": "packageMessage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 665,
									"name": "contents",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 666,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 494,
										"name": "MessageOptions",
										"package": "snackabra"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": 144,
								"name": "ChannelMessage",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 673,
					"name": "send",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 674,
							"name": "send",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sends a message to the channel. The message is enqueued synchronously and sent\nasynchronously. The return value is a Promise that resolves to the\nserver's response. If the message is a low-level message (eg status, server,\netc), then 'sendString' should be set to 'true'. If 'sendTo' is not provided,\nthe message will be sent to the channel owner. If 'protocol' is not provided,\nthe channel's default protocol will be used. If 'ttl' is not provided, it will\ndefault to 15."
									}
								]
							},
							"parameters": [
								{
									"id": 675,
									"name": "contents",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 676,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 494,
										"name": "MessageOptions",
										"package": "snackabra"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 703,
					"name": "setPage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 704,
							"name": "setPage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets 'page' as the Channel's 'page' response. If type is provided, it will\nbe used as the 'Content-Type' header in the HTTP request when retrieved;\nalso, if the type is 'text-like', it will be recoded to UTF-8 before\ndelivery. Prefix indicates the smallest number of acceptable characters in\nthe link. Default is 12, shortest is 6."
									}
								]
							},
							"parameters": [
								{
									"id": 705,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 706,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 707,
													"name": "page",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 708,
													"name": "prefix",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 709,
													"name": "type",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														707,
														708,
														709
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 727,
					"name": "updateCapacity",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 728,
							"name": "updateCapacity",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 729,
									"name": "capacity",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 619,
					"name": "base4StringToDate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 620,
							"name": "base4StringToDate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 621,
									"name": "tsStr",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 616,
					"name": "base4StringToTimestamp",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 617,
							"name": "base4StringToTimestamp",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reverse of timestampToBase4String. Strict about the format\n(needs to be "
									},
									{
										"kind": "code",
										"text": "`[0-3]{26}`"
									},
									{
										"kind": "text",
										"text": "), returns 0 if there's any issue."
									}
								]
							},
							"parameters": [
								{
									"id": 618,
									"name": "tsStr",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 601,
					"name": "base4stringToDate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 602,
							"name": "base4stringToDate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 603,
									"name": "tsStr",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 629,
					"name": "composeMessageKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 630,
							"name": "composeMessageKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a 'message key' from constituent parts."
									}
								]
							},
							"parameters": [
								{
									"id": 631,
									"name": "channelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 632,
									"name": "timestamp",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 633,
									"name": "subChannel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'____'"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 622,
					"name": "deComposeMessageKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 623,
							"name": "deComposeMessageKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Teases apart the three elements of a channel message key. Note, this does not\nthrow if there's an issue, it just sets all the parts to '', which should\nnever occur. Up to you if you want to run with that result or assert on it.\nStrict about the format (defined as "
									},
									{
										"kind": "code",
										"text": "`[a-zA-Z0-9]{43}_[_a-zA-Z0-9]{4}_[0-3]{26}`"
									},
									{
										"kind": "text",
										"text": ")."
									}
								]
							},
							"parameters": [
								{
									"id": 624,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 625,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 626,
											"name": "channelId",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 627,
											"name": "i2",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 628,
											"name": "timestamp",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												626,
												627,
												628
											]
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 604,
					"name": "getLexicalExtremes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 605,
							"name": "getLexicalExtremes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"typeParameter": [
								{
									"id": 606,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 607,
									"name": "set",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Set"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 606,
												"name": "T",
												"package": "snackabra",
												"refersToTypeParameter": true
											}
										],
										"name": "Set",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "tuple"
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"target": 606,
												"name": "T",
												"package": "snackabra",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 606,
												"name": "T",
												"package": "snackabra",
												"refersToTypeParameter": true
											}
										]
									}
								]
							}
						}
					]
				},
				{
					"id": 608,
					"name": "messageKeySetToPrefix",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 609,
							"name": "messageKeySetToPrefix",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Given a set of (full) keys, reviews all the timestamp prefixes, and returns\nthe shortest prefix that would range all the keys in the set."
									}
								]
							},
							"parameters": [
								{
									"id": 610,
									"name": "keys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Set"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Set",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 611,
					"name": "timestampLongestPrefix",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 612,
							"name": "timestampLongestPrefix",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 613,
									"name": "s1",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 614,
									"name": "s2",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 598,
					"name": "timestampToBase4String",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 599,
							"name": "timestampToBase4String",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Converts from timestamp to 'base 4' string used in message IDs.\n\nTime stamps are monotonically increasing. We enforce that they must be\ndifferent. Stored as a string of [0-3] to facilitate prefix searches (within\n4x time ranges). We append \"0000\" for future needs, for example if we need\nabove 1000 messages per second. Can represent epoch timestamps for the next\n400+ years. Currently the appended \"0000\" is stripped/ignored."
									}
								]
							},
							"parameters": [
								{
									"id": 600,
									"name": "tsNum",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						634
					]
				},
				{
					"title": "Properties",
					"children": [
						645,
						748,
						780,
						650,
						646,
						647,
						769,
						746,
						649,
						648,
						597,
						596,
						594,
						595,
						615
					]
				},
				{
					"title": "Accessors",
					"children": [
						653,
						781,
						749,
						655,
						751,
						755,
						757,
						785,
						787,
						799,
						801,
						753,
						791,
						783,
						793,
						797,
						651,
						795,
						789,
						807,
						809,
						805,
						803
					]
				},
				{
					"title": "Methods",
					"children": [
						712,
						739,
						759,
						763,
						687,
						677,
						657,
						660,
						667,
						717,
						715,
						730,
						701,
						681,
						683,
						689,
						698,
						719,
						710,
						732,
						695,
						734,
						736,
						721,
						723,
						685,
						663,
						673,
						703,
						727,
						619,
						616,
						601,
						629,
						622,
						604,
						608,
						611,
						598
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 421,
					"name": "SBChannelKeys",
					"package": "snackabra"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 811,
					"name": "ChannelSocket"
				}
			]
		},
		{
			"id": 811,
			"name": "ChannelSocket",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "ChannelSocket extends Channel. Has same basic functionality as Channel, but\nis synchronous and uses websockets, eg lower latency and higher throughput.\n\nYou send by calling channel.send(msg: SBMessage | string), i.e. you can\nsend a quick string.\n\nYou can set your message handler upon creation, or later by using\nchannel.onMessage = (m: Message) => { ... }.\n\nYou don't need to worry about managing resources, like closing it, or\nchecking if it's open. It will close based on server behavior, eg it's up\nto the server to close the connection based on inactivity. The\nChannelSocket will re-open if you try to send against a closed connection.\n\nMessages are delivered as type Message if it could be parsed and decrypted;\nit can also be a string (typically if a low-level server message, in which\ncase it will just be forwarded to the message handler).\n\nIt also handles a simple ack/nack mechanism with the server transparently.\n\nBe aware that if ChannelSocket doesn't know how to handle a certain\nmessage, it will generally drop it."
					}
				]
			},
			"children": [
				{
					"id": 852,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 853,
							"name": "new ChannelSocket",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 854,
									"name": "handleOrKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 112,
												"name": "SBChannelHandle",
												"package": "snackabra"
											}
										]
									}
								},
								{
									"id": 855,
									"name": "onMessage",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 856,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 857,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 858,
															"name": "m",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "reference",
																		"target": 123,
																		"name": "Message",
																		"package": "snackabra"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 859,
									"name": "protocol",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 357,
										"name": "SBProtocol",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 811,
								"name": "ChannelSocket",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": 635,
								"name": "Channel.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 634,
						"name": "Channel.constructor"
					}
				},
				{
					"id": 901,
					"name": "channelReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 593,
								"name": "Channel",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 645,
						"name": "Channel.channelReady"
					}
				},
				{
					"id": 996,
					"name": "channelServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 748,
						"name": "Channel.channelServer"
					}
				},
				{
					"id": 860,
					"name": "channelSocketReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 811,
								"name": "ChannelSocket",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 1028,
					"name": "errorState",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 780,
						"name": "Channel.errorState"
					}
				},
				{
					"id": 906,
					"name": "isClosed",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 650,
						"name": "Channel.isClosed"
					}
				},
				{
					"id": 872,
					"name": "lastTimestampPrefix",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "..."
				},
				{
					"id": 902,
					"name": "locked",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 646,
						"name": "Channel.locked"
					}
				},
				{
					"id": 903,
					"name": "protocol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 357,
						"name": "SBProtocol",
						"package": "snackabra"
					},
					"defaultValue": "Channel.defaultProtocol",
					"inheritedFrom": {
						"type": "reference",
						"target": 647,
						"name": "Channel.protocol"
					}
				},
				{
					"id": 1017,
					"name": "sb384Ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 543,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 769,
						"name": "Channel.sb384Ready"
					}
				},
				{
					"id": 994,
					"name": "sbChannelKeysReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 421,
								"name": "SBChannelKeys",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 746,
						"name": "Channel.sbChannelKeysReady"
					}
				},
				{
					"id": 905,
					"name": "sendQueue",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 263,
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "snackabra-jslib/snackabra.ts",
									"qualifiedName": "EnqueuedMessage"
								},
								"name": "EnqueuedMessage",
								"package": "snackabra"
							}
						],
						"name": "MessageQueue",
						"package": "snackabra"
					},
					"defaultValue": "...",
					"inheritedFrom": {
						"type": "reference",
						"target": 649,
						"name": "Channel.sendQueue"
					}
				},
				{
					"id": 904,
					"name": "visitors",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Map"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Map",
						"package": "typescript"
					},
					"defaultValue": "...",
					"inheritedFrom": {
						"type": "reference",
						"target": 648,
						"name": "Channel.visitors"
					}
				},
				{
					"id": 815,
					"name": "HIGHEST_TIMESTAMP",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the 'lowest' possible timestamp."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "...",
					"inheritedFrom": {
						"type": "reference",
						"target": 597,
						"name": "Channel.HIGHEST_TIMESTAMP"
					}
				},
				{
					"id": 814,
					"name": "LOWEST_TIMESTAMP",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the 'lowest' possible timestamp."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "...",
					"inheritedFrom": {
						"type": "reference",
						"target": 596,
						"name": "Channel.LOWEST_TIMESTAMP"
					}
				},
				{
					"id": 812,
					"name": "ReadyFlag",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"type": {
						"type": "intrinsic",
						"name": "symbol"
					},
					"defaultValue": "...",
					"overwrites": {
						"type": "reference",
						"target": 594,
						"name": "Channel.ReadyFlag"
					}
				},
				{
					"id": 813,
					"name": "defaultProtocol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"type": {
						"type": "reference",
						"target": 357,
						"name": "SBProtocol",
						"package": "snackabra"
					},
					"defaultValue": "...",
					"inheritedFrom": {
						"type": "reference",
						"target": 595,
						"name": "Channel.defaultProtocol"
					}
				},
				{
					"id": 833,
					"name": "timestampRegex",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "RegExp"
						},
						"name": "RegExp",
						"package": "typescript"
					},
					"defaultValue": "...",
					"inheritedFrom": {
						"type": "reference",
						"target": 615,
						"name": "Channel.timestampRegex"
					}
				},
				{
					"id": 907,
					"name": "ChannelReadyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 908,
						"name": "ChannelReadyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.ChannelReadyFlag"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 653,
						"name": "Channel.ChannelReadyFlag"
					}
				},
				{
					"id": 883,
					"name": "ChannelSocketReadyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 884,
						"name": "ChannelSocketReadyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						}
					}
				},
				{
					"id": 1029,
					"name": "SB384ReadyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1030,
						"name": "SB384ReadyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "any"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.SB384ReadyFlag"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 781,
						"name": "Channel.SB384ReadyFlag"
					}
				},
				{
					"id": 997,
					"name": "SBChannelKeysReadyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 998,
						"name": "SBChannelKeysReadyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "any"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.SBChannelKeysReadyFlag"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 749,
						"name": "Channel.SBChannelKeysReadyFlag"
					}
				},
				{
					"id": 909,
					"name": "api",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 910,
						"name": "api",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "this"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.api"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 655,
						"name": "Channel.api"
					}
				},
				{
					"id": 999,
					"name": "channelData",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1000,
						"name": "channelData",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 118,
							"name": "SBChannelData",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.channelData"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 751,
						"name": "Channel.channelData"
					}
				},
				{
					"id": 1003,
					"name": "channelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1004,
						"name": "channelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.channelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 755,
						"name": "Channel.channelId"
					}
				},
				{
					"id": 887,
					"name": "enableTrace",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"setSignature": {
						"id": 888,
						"name": "enableTrace",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Enables debug output"
								}
							]
						},
						"parameters": [
							{
								"id": 889,
								"name": "b",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 1005,
					"name": "handle",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1006,
						"name": "handle",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 112,
							"name": "SBChannelHandle",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.handle"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 757,
						"name": "Channel.handle"
					}
				},
				{
					"id": 1033,
					"name": "hash",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1034,
						"name": "hash",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns a unique identifier for external use, that will be unique\nfor any class or object that uses SB384 as it's root.\n\nThis is deterministic. Typical use case is to translate a user id\ninto a "
								},
								{
									"kind": "inline-tag",
									"tag": "@link",
									"text": "ChannelId"
								},
								{
									"kind": "text",
									"text": " (eg the channel that any user id is inherently\nthe owner of).\n\nThe hash is base62 encoding of the SHA-384 hash of the public key."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.hash"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 785,
						"name": "Channel.hash"
					}
				},
				{
					"id": 1035,
					"name": "hashB32",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1036,
						"name": "hashB32",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Similar to "
								},
								{
									"kind": "inline-tag",
									"tag": "@link",
									"text": "SB384.hash",
									"target": 567,
									"tsLinkText": ""
								},
								{
									"kind": "text",
									"text": ", but base32 encoded."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.hashB32"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 787,
						"name": "Channel.hashB32"
					}
				},
				{
					"id": 1047,
					"name": "jwkPrivate",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1048,
						"name": "jwkPrivate",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.jwkPrivate"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 799,
						"name": "Channel.jwkPrivate"
					}
				},
				{
					"id": 1049,
					"name": "jwkPublic",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1050,
						"name": "jwkPublic",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.jwkPublic"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 801,
						"name": "Channel.jwkPublic"
					}
				},
				{
					"id": 1001,
					"name": "owner",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1002,
						"name": "owner",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "intrinsic",
									"name": "boolean"
								},
								{
									"type": "literal",
									"value": ""
								}
							]
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.owner"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 753,
						"name": "Channel.owner"
					}
				},
				{
					"id": 1039,
					"name": "ownerChannelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1040,
						"name": "ownerChannelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "inline-tag",
									"tag": "@link",
									"text": "ChannelID"
								},
								{
									"kind": "text",
									"text": " that corresponds to this, if it's an owner"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.ownerChannelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 791,
						"name": "Channel.ownerChannelId"
					}
				},
				{
					"id": 1031,
					"name": "private",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1032,
						"name": "private",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns true if this is a private key, otherwise false.\nWill throw an exception if the object is not ready."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.private"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 783,
						"name": "Channel.private"
					}
				},
				{
					"id": 1041,
					"name": "privateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1042,
						"name": "privateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.privateKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 793,
						"name": "Channel.privateKey"
					}
				},
				{
					"id": 1045,
					"name": "publicKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1046,
						"name": "publicKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.publicKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 797,
						"name": "Channel.publicKey"
					}
				},
				{
					"id": 881,
					"name": "ready",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 882,
						"name": "ready",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
								"qualifiedName": "Promise"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 811,
									"name": "ChannelSocket",
									"package": "snackabra"
								}
							],
							"name": "Promise",
							"package": "typescript"
						},
						"overwrites": {
							"type": "reference",
							"target": -1,
							"name": "Channel.ready"
						}
					},
					"overwrites": {
						"type": "reference",
						"target": 651,
						"name": "Channel.ready"
					}
				},
				{
					"id": 1043,
					"name": "signKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1044,
						"name": "signKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.signKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 795,
						"name": "Channel.signKey"
					}
				},
				{
					"id": 885,
					"name": "status",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 886,
						"name": "status",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "CLOSED"
								},
								{
									"type": "literal",
									"value": "CONNECTING"
								},
								{
									"type": "literal",
									"value": "OPEN"
								},
								{
									"type": "literal",
									"value": "CLOSING"
								}
							]
						}
					}
				},
				{
					"id": 1037,
					"name": "userId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1038,
						"name": "userId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.userId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 789,
						"name": "Channel.userId"
					}
				},
				{
					"id": 1055,
					"name": "userPrivateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1056,
						"name": "userPrivateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Wire format of full info of key (eg private key). Compressed."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.userPrivateKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 807,
						"name": "Channel.userPrivateKey"
					}
				},
				{
					"id": 1057,
					"name": "userPrivateKeyDehydrated",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1058,
						"name": "userPrivateKeyDehydrated",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Compressed and dehydrated, meaning, 'x' needs to come from another source.\n(If lost it can be reconstructed from 'd')"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.userPrivateKeyDehydrated"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 809,
						"name": "Channel.userPrivateKeyDehydrated"
					}
				},
				{
					"id": 1053,
					"name": "userPublicKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1054,
						"name": "userPublicKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Wire format of full (decodable) public key"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.userPublicKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 805,
						"name": "Channel.userPublicKey"
					}
				},
				{
					"id": 1051,
					"name": "ySign",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1052,
						"name": "ySign",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": 0
								},
								{
									"type": "literal",
									"value": 1
								}
							]
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.ySign"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 803,
						"name": "Channel.ySign"
					}
				},
				{
					"id": 960,
					"name": "acceptVisitor",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 961,
							"name": "acceptVisitor",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 962,
									"name": "userId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 713,
								"name": "Channel.acceptVisitor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 712,
						"name": "Channel.acceptVisitor"
					}
				},
				{
					"id": 987,
					"name": "budd",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 988,
							"name": "budd",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "\"budd\" will spin a channel off an existing one that you own,\nor transfer storage budget to an existing channel.\n\nYou need to provide one of the following combinations of info:\n\n- nothing: creates new channel with minmal permitted budget\n- just storage amount: creates new channel with that amount, returns new channel\n- just a target channel: moves a chunk of storage to that channel (see below)\n- target channel and storage amount: moves that amount to that channel\n- keys and storage amount: creates new channel with those keys and that storage amount\n\nIf you want to budd into a channel with specific keys, you'll need to\ncreate a new set of keys (SBChannelKeys) and pass the SBChannelData from that.\n\nIt returns a complete SBChannelHandle, which will include the private key\n\nAnother way to remember the above: all combinations are valid except\nboth a target channel and assigning keys.\n\nIn terms of 'keys', you can provide a JsonWebKey, or a SBUserPrivateKey,\nor a channel handle. JWK is there for backwards compatibility.\n\nNote: if you're specifying the target channel, then the return values will\nnot include the private key (that return value will be empty).\n\nNote: the owner of the target channel will get a message that you budded\ninto their channel, which includes the channelId it was budded from.\n\nNote: a negative storage amount is interpreted as 'leave that much behind'.\n\nAny indications that your parameters are wrong will result in a rejected\npromise. This includes if you ask for more storage than is there, or if\nyour negative value is more than the storage budget that's there. \n\nIf the budget and target channels are the same, it will throw.\n\nIf you omit budget size, it will use the smallest allowed new channel\nstorage (currently 32 MB). This will happens regardless of if you are\ncreating a new channel, or 'depositing'.\n\nIf you give the size value of 'Infinity', then all the storage available\non the source channel will be transferred to the target channel\n(aka 'plunder').\n\nOn the server side, budd is in two steps, first extracting the storage\nbudget from the mother channel, and then creating or transferring the\nstorage budget to the target channel."
									}
								]
							},
							"parameters": [
								{
									"id": 989,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 990,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 992,
													"name": "size",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 991,
													"name": "targetChannel",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"target": 112,
														"name": "SBChannelHandle",
														"package": "snackabra"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														992,
														991
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 112,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 740,
								"name": "Channel.budd"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 739,
						"name": "Channel.budd"
					}
				},
				{
					"id": 1007,
					"name": "buildApiBody",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1008,
							"name": "buildApiBody",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 1009,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1010,
									"name": "apiPayload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 133,
										"name": "ChannelApiBody",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 760,
								"name": "Channel.buildApiBody"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 759,
						"name": "Channel.buildApiBody"
					}
				},
				{
					"id": 1011,
					"name": "callApi",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1012,
							"name": "callApi",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Implements Channel api calls.\n\nNote that the API call details are also embedded in the ChannelMessage,\nand signed by the sender, completely separate from HTTP etc auth."
									}
								]
							},
							"parameters": [
								{
									"id": 1013,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 764,
								"name": "Channel.callApi"
							}
						},
						{
							"id": 1014,
							"name": "callApi",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 1015,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1016,
									"name": "apiPayload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 766,
								"name": "Channel.callApi"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 763,
						"name": "Channel.callApi"
					}
				},
				{
					"id": 899,
					"name": "close",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 900,
							"name": "close",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": 688,
								"name": "Channel.close"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 687,
						"name": "Channel.close"
					}
				},
				{
					"id": 927,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 928,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Authorizes/registers this channel on the provided server"
									}
								]
							},
							"parameters": [
								{
									"id": 929,
									"name": "storageToken",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 105,
										"name": "SBStorageToken",
										"package": "snackabra"
									}
								},
								{
									"id": 930,
									"name": "channelServer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 593,
										"name": "Channel",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 678,
								"name": "Channel.create"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 677,
						"name": "Channel.create"
					}
				},
				{
					"id": 911,
					"name": "extractMessage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 912,
							"name": "extractMessage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Takes a 'ChannelMessage' format and presents it as a 'Message'. Does a\nvariety of things. If there is any issue, will return 'undefined', and you\nshould probably just ignore that message. Only requirement is you extract\npayload before calling this (some callees needs to, or wants to, fill in\nthings in ChannelMessage)"
									}
								]
							},
							"parameters": [
								{
									"id": 913,
									"name": "msgRaw",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": 144,
												"name": "ChannelMessage",
												"package": "snackabra"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": 123,
												"name": "Message",
												"package": "snackabra"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 658,
								"name": "Channel.extractMessage"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 657,
						"name": "Channel.extractMessage"
					}
				},
				{
					"id": 914,
					"name": "extractMessageMap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 915,
							"name": "extractMessageMap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Applies 'extractMessage()' to a map of messages."
									}
								]
							},
							"parameters": [
								{
									"id": 916,
									"name": "msgMap",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Map"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 144,
												"name": "ChannelMessage",
												"package": "snackabra"
											}
										],
										"name": "Map",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Map"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 123,
												"name": "Message",
												"package": "snackabra"
											}
										],
										"name": "Map",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 661,
								"name": "Channel.extractMessageMap"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 660,
						"name": "Channel.extractMessageMap"
					}
				},
				{
					"id": 921,
					"name": "finalizeMessage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 922,
							"name": "finalizeMessage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 923,
									"name": "msg",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 144,
										"name": "ChannelMessage",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 144,
										"name": "ChannelMessage",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 668,
								"name": "Channel.finalizeMessage"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 667,
						"name": "Channel.finalizeMessage"
					}
				},
				{
					"id": 965,
					"name": "getAdminData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 966,
							"name": "getAdminData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 164,
										"name": "ChannelAdminData",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 718,
								"name": "Channel.getAdminData"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 717,
						"name": "Channel.getAdminData"
					}
				},
				{
					"id": 963,
					"name": "getCapacity",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 964,
							"name": "getCapacity",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 716,
								"name": "Channel.getCapacity"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 715,
						"name": "Channel.getCapacity"
					}
				},
				{
					"id": 978,
					"name": "getChannelKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 979,
							"name": "getChannelKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 118,
										"name": "SBChannelData",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 731,
								"name": "Channel.getChannelKeys"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 730,
						"name": "Channel.getChannelKeys"
					}
				},
				{
					"id": 949,
					"name": "getHistory",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 950,
							"name": "getHistory",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns map of message keys from the server corresponding to the request."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 227,
										"name": "MessageHistoryDirectory",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 702,
								"name": "Channel.getHistory"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 701,
						"name": "Channel.getHistory"
					}
				},
				{
					"id": 931,
					"name": "getLastMessageTimes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 932,
							"name": "getLastMessageTimes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Deprecated. Would take an array of channelIds and get latest time stamp from all of them"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 682,
								"name": "Channel.getLastMessageTimes"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 681,
						"name": "Channel.getLastMessageTimes"
					}
				},
				{
					"id": 933,
					"name": "getLatestTimestamp",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 934,
							"name": "getLatestTimestamp",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets the latest known timestamp on the server. Returns it in prefix string format."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 684,
								"name": "Channel.getLatestTimestamp"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 683,
						"name": "Channel.getLatestTimestamp"
					}
				},
				{
					"id": 937,
					"name": "getMessageKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 938,
							"name": "getMessageKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns map of message keys from the server corresponding to the request.\nTakes a single optional parameter, which is the time stamp prefix for which\na set is requested. If not provided, the default is '0' (which corresponds\nto entire history). The return data structure includes the map of message\nkeys, and the current history shard (which is 'null' if there is none)."
									}
								]
							},
							"parameters": [
								{
									"id": 939,
									"name": "prefix",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'0'"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 940,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 942,
													"name": "historyShard",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 183,
														"name": "SBObjectHandle",
														"package": "snackabra"
													}
												},
												{
													"id": 941,
													"name": "keys",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
															"qualifiedName": "Set"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															}
														],
														"name": "Set",
														"package": "typescript"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														942,
														941
													]
												}
											]
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 690,
								"name": "Channel.getMessageKeys"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 689,
						"name": "Channel.getMessageKeys"
					}
				},
				{
					"id": 946,
					"name": "getMessageMap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 947,
							"name": "getMessageMap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Main function for getting a chunk of messages from the server."
									}
								]
							},
							"parameters": [
								{
									"id": 948,
									"name": "messageKeys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Set"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Set",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Map"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 123,
												"name": "Message",
												"package": "snackabra"
											}
										],
										"name": "Map",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 699,
								"name": "Channel.getMessageMap"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 698,
						"name": "Channel.getMessageMap"
					}
				},
				{
					"id": 967,
					"name": "getMother",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 968,
							"name": "getMother",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 720,
								"name": "Channel.getMother"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 719,
						"name": "Channel.getMother"
					}
				},
				{
					"id": 958,
					"name": "getPage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 959,
							"name": "getPage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Note that 'getPage' can be done without any authentication, in which\ncase have a look at Snackabra.getPage(). If however the Page is locked,\nyou need to access it through this ChannelApi entry point.\n\nBut conversely, we don't need a prefix or anything else, since\nwe know the channel. So .. we can just shoot this off.\n\nNote that a 'Page' might be mime-typed, in which case you should\nuse a regular fetch() call and handle results accordingly. This\nfunction is for 'sb384payloadV3' only."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 711,
								"name": "Channel.getPage"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 710,
						"name": "Channel.getPage"
					}
				},
				{
					"id": 980,
					"name": "getPubKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 981,
							"name": "getPubKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Map"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Map",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 733,
								"name": "Channel.getPubKeys"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 732,
						"name": "Channel.getPubKeys"
					}
				},
				{
					"id": 943,
					"name": "getRawMessageMap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 944,
							"name": "getRawMessageMap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 945,
									"name": "messageKeys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Set"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Set",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Map"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ArrayBuffer"
												},
												"name": "ArrayBuffer",
												"package": "typescript"
											}
										],
										"name": "Map",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 696,
								"name": "Channel.getRawMessageMap"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 695,
						"name": "Channel.getRawMessageMap"
					}
				},
				{
					"id": 982,
					"name": "getStorageLimit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 983,
							"name": "getStorageLimit",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 735,
								"name": "Channel.getStorageLimit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 734,
						"name": "Channel.getStorageLimit"
					}
				},
				{
					"id": 984,
					"name": "getStorageToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 985,
							"name": "getStorageToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 986,
									"name": "size",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 105,
										"name": "SBStorageToken",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 737,
								"name": "Channel.getStorageToken"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 736,
						"name": "Channel.getStorageToken"
					}
				},
				{
					"id": 969,
					"name": "isLocked",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 970,
							"name": "isLocked",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 722,
								"name": "Channel.isLocked"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 721,
						"name": "Channel.isLocked"
					}
				},
				{
					"id": 971,
					"name": "lock",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 972,
							"name": "lock",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 973,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 974,
													"name": "success",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														974
													]
												}
											]
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 724,
								"name": "Channel.lock"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 723,
						"name": "Channel.lock"
					}
				},
				{
					"id": 935,
					"name": "messageQueueManager",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 936,
							"name": "messageQueueManager",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 686,
								"name": "Channel.messageQueueManager"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 685,
						"name": "Channel.messageQueueManager"
					}
				},
				{
					"id": 863,
					"name": "onMessage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 864,
							"name": "onMessage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 865,
									"name": "_m",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 123,
												"name": "Message",
												"package": "snackabra"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 917,
					"name": "packageMessage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 918,
							"name": "packageMessage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 919,
									"name": "contents",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 920,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 494,
										"name": "MessageOptions",
										"package": "snackabra"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": 144,
								"name": "ChannelMessage",
								"package": "snackabra"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 664,
								"name": "Channel.packageMessage"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 663,
						"name": "Channel.packageMessage"
					}
				},
				{
					"id": 897,
					"name": "reset",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 898,
							"name": "reset",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reconnects (resets) a ChannelSocket. This will not block (it's\nsynchronous), and 'ready' will resolve when the socket is ready again."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 893,
					"name": "send",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 894,
							"name": "send",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "ChannelSocket.send()\n\nReturns a promise that resolves to \"success\" when sent,\nor an error message if it fails."
									}
								]
							},
							"parameters": [
								{
									"id": 895,
									"name": "contents",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 896,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 494,
										"name": "MessageOptions",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": 674,
								"name": "Channel.send"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 673,
						"name": "Channel.send"
					}
				},
				{
					"id": 951,
					"name": "setPage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 952,
							"name": "setPage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets 'page' as the Channel's 'page' response. If type is provided, it will\nbe used as the 'Content-Type' header in the HTTP request when retrieved;\nalso, if the type is 'text-like', it will be recoded to UTF-8 before\ndelivery. Prefix indicates the smallest number of acceptable characters in\nthe link. Default is 12, shortest is 6."
									}
								]
							},
							"parameters": [
								{
									"id": 953,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 954,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 955,
													"name": "page",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 956,
													"name": "prefix",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 957,
													"name": "type",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														955,
														956,
														957
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 704,
								"name": "Channel.setPage"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 703,
						"name": "Channel.setPage"
					}
				},
				{
					"id": 975,
					"name": "updateCapacity",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 976,
							"name": "updateCapacity",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 977,
									"name": "capacity",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 728,
								"name": "Channel.updateCapacity"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 727,
						"name": "Channel.updateCapacity"
					}
				},
				{
					"id": 837,
					"name": "base4StringToDate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 838,
							"name": "base4StringToDate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 839,
									"name": "tsStr",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 620,
								"name": "Channel.base4StringToDate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 619,
						"name": "Channel.base4StringToDate"
					}
				},
				{
					"id": 834,
					"name": "base4StringToTimestamp",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 835,
							"name": "base4StringToTimestamp",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reverse of timestampToBase4String. Strict about the format\n(needs to be "
									},
									{
										"kind": "code",
										"text": "`[0-3]{26}`"
									},
									{
										"kind": "text",
										"text": "), returns 0 if there's any issue."
									}
								]
							},
							"parameters": [
								{
									"id": 836,
									"name": "tsStr",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 617,
								"name": "Channel.base4StringToTimestamp"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 616,
						"name": "Channel.base4StringToTimestamp"
					}
				},
				{
					"id": 819,
					"name": "base4stringToDate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 820,
							"name": "base4stringToDate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 821,
									"name": "tsStr",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 602,
								"name": "Channel.base4stringToDate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 601,
						"name": "Channel.base4stringToDate"
					}
				},
				{
					"id": 847,
					"name": "composeMessageKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 848,
							"name": "composeMessageKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a 'message key' from constituent parts."
									}
								]
							},
							"parameters": [
								{
									"id": 849,
									"name": "channelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 850,
									"name": "timestamp",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 851,
									"name": "subChannel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'____'"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 630,
								"name": "Channel.composeMessageKey"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 629,
						"name": "Channel.composeMessageKey"
					}
				},
				{
					"id": 840,
					"name": "deComposeMessageKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 841,
							"name": "deComposeMessageKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Teases apart the three elements of a channel message key. Note, this does not\nthrow if there's an issue, it just sets all the parts to '', which should\nnever occur. Up to you if you want to run with that result or assert on it.\nStrict about the format (defined as "
									},
									{
										"kind": "code",
										"text": "`[a-zA-Z0-9]{43}_[_a-zA-Z0-9]{4}_[0-3]{26}`"
									},
									{
										"kind": "text",
										"text": ")."
									}
								]
							},
							"parameters": [
								{
									"id": 842,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 843,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 844,
											"name": "channelId",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 845,
											"name": "i2",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 846,
											"name": "timestamp",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												844,
												845,
												846
											]
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 623,
								"name": "Channel.deComposeMessageKey"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 622,
						"name": "Channel.deComposeMessageKey"
					}
				},
				{
					"id": 822,
					"name": "getLexicalExtremes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 823,
							"name": "getLexicalExtremes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"typeParameter": [
								{
									"id": 824,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 825,
									"name": "set",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Set"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 606,
												"name": "T",
												"package": "snackabra",
												"refersToTypeParameter": true
											}
										],
										"name": "Set",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "tuple"
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"target": 606,
												"name": "T",
												"package": "snackabra",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 606,
												"name": "T",
												"package": "snackabra",
												"refersToTypeParameter": true
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 605,
								"name": "Channel.getLexicalExtremes"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 604,
						"name": "Channel.getLexicalExtremes"
					}
				},
				{
					"id": 826,
					"name": "messageKeySetToPrefix",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 827,
							"name": "messageKeySetToPrefix",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Given a set of (full) keys, reviews all the timestamp prefixes, and returns\nthe shortest prefix that would range all the keys in the set."
									}
								]
							},
							"parameters": [
								{
									"id": 828,
									"name": "keys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
											"qualifiedName": "Set"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Set",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 609,
								"name": "Channel.messageKeySetToPrefix"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 608,
						"name": "Channel.messageKeySetToPrefix"
					}
				},
				{
					"id": 829,
					"name": "timestampLongestPrefix",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 830,
							"name": "timestampLongestPrefix",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 831,
									"name": "s1",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 832,
									"name": "s2",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 612,
								"name": "Channel.timestampLongestPrefix"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 611,
						"name": "Channel.timestampLongestPrefix"
					}
				},
				{
					"id": 816,
					"name": "timestampToBase4String",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 817,
							"name": "timestampToBase4String",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Converts from timestamp to 'base 4' string used in message IDs.\n\nTime stamps are monotonically increasing. We enforce that they must be\ndifferent. Stored as a string of [0-3] to facilitate prefix searches (within\n4x time ranges). We append \"0000\" for future needs, for example if we need\nabove 1000 messages per second. Can represent epoch timestamps for the next\n400+ years. Currently the appended \"0000\" is stripped/ignored."
									}
								]
							},
							"parameters": [
								{
									"id": 818,
									"name": "tsNum",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 599,
								"name": "Channel.timestampToBase4String"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 598,
						"name": "Channel.timestampToBase4String"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						852
					]
				},
				{
					"title": "Properties",
					"children": [
						901,
						996,
						860,
						1028,
						906,
						872,
						902,
						903,
						1017,
						994,
						905,
						904,
						815,
						814,
						812,
						813,
						833
					]
				},
				{
					"title": "Accessors",
					"children": [
						907,
						883,
						1029,
						997,
						909,
						999,
						1003,
						887,
						1005,
						1033,
						1035,
						1047,
						1049,
						1001,
						1039,
						1031,
						1041,
						1045,
						881,
						1043,
						885,
						1037,
						1055,
						1057,
						1053,
						1051
					]
				},
				{
					"title": "Methods",
					"children": [
						960,
						987,
						1007,
						1011,
						899,
						927,
						911,
						914,
						921,
						965,
						963,
						978,
						949,
						931,
						933,
						937,
						946,
						967,
						958,
						980,
						943,
						982,
						984,
						969,
						971,
						935,
						863,
						917,
						897,
						893,
						951,
						975,
						837,
						834,
						819,
						847,
						840,
						822,
						826,
						829,
						816
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 593,
					"name": "Channel",
					"package": "snackabra"
				}
			]
		},
		{
			"id": 241,
			"name": "MessageBus",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "MessageBus"
					}
				]
			},
			"children": [
				{
					"id": 242,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 243,
							"name": "new MessageBus",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 241,
								"name": "MessageBus",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 244,
					"name": "bus",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 245,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"indexSignature": {
								"id": 246,
								"name": "__index",
								"variant": "signature",
								"kind": 8192,
								"flags": {},
								"parameters": [
									{
										"id": 247,
										"name": "index",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					},
					"defaultValue": "{}"
				},
				{
					"id": 259,
					"name": "publish",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 260,
							"name": "publish",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Publish"
									}
								]
							},
							"parameters": [
								{
									"id": 261,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 262,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "unknown"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 251,
					"name": "subscribe",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 252,
							"name": "subscribe",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Subscribe. 'event' is a string, special case '*' means everything\n (in which case the handler is also given the message)"
									}
								]
							},
							"parameters": [
								{
									"id": 253,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 254,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "CallableFunction"
										},
										"name": "CallableFunction",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 255,
					"name": "unsubscribe",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 256,
							"name": "unsubscribe",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Unsubscribe"
									}
								]
							},
							"parameters": [
								{
									"id": 257,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 258,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "CallableFunction"
										},
										"name": "CallableFunction",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						242
					]
				},
				{
					"title": "Properties",
					"children": [
						244
					]
				},
				{
					"title": "Methods",
					"children": [
						259,
						251,
						255
					]
				}
			]
		},
		{
			"id": 263,
			"name": "MessageQueue",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "***************************************************************************************************"
					}
				]
			},
			"children": [
				{
					"id": 264,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 265,
							"name": "new MessageQueue",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"typeParameter": [
								{
									"id": 266,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"type": {
								"type": "reference",
								"target": 263,
								"typeArguments": [
									{
										"type": "reference",
										"target": 266,
										"name": "T",
										"package": "snackabra",
										"qualifiedName": "MessageQueue.T",
										"refersToTypeParameter": true
									}
								],
								"name": "MessageQueue",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 285,
					"name": "close",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 286,
							"name": "close",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 287,
									"name": "reason",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 281,
					"name": "dequeue",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 282,
							"name": "dequeue",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": 266,
												"name": "T",
												"package": "snackabra",
												"qualifiedName": "MessageQueue.T",
												"refersToTypeParameter": true
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 288,
					"name": "drain",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 289,
							"name": "drain",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 290,
									"name": "reason",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 278,
					"name": "enqueue",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 279,
							"name": "enqueue",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 280,
									"name": "item",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 266,
										"name": "T",
										"package": "snackabra",
										"qualifiedName": "MessageQueue.T",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 283,
					"name": "isEmpty",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 284,
							"name": "isEmpty",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						264
					]
				},
				{
					"title": "Methods",
					"children": [
						285,
						281,
						288,
						278,
						283
					]
				}
			],
			"typeParameters": [
				{
					"id": 291,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			]
		},
		{
			"id": 376,
			"name": "Protocol_AES_GCM_256",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Basic protocol, just provide entropy and salt, then all\nmessages are encrypted accordingly."
					}
				]
			},
			"children": [
				{
					"id": 379,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 380,
							"name": "new Protocol_AES_GCM_256",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 381,
									"name": "passphrase",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 382,
									"name": "keyInfo",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 368,
										"name": "Protocol_KeyInfo",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 376,
								"name": "Protocol_AES_GCM_256",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 397,
					"name": "decryptionKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 398,
							"name": "decryptionKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 399,
									"name": "_channel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 593,
										"name": "Channel",
										"package": "snackabra"
									}
								},
								{
									"id": 400,
									"name": "msg",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 144,
										"name": "ChannelMessage",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "CryptoKey"
												},
												"name": "CryptoKey",
												"package": "typescript"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 365,
								"name": "SBProtocol.decryptionKey"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 364,
						"name": "SBProtocol.decryptionKey"
					}
				},
				{
					"id": 394,
					"name": "encryptionKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 395,
							"name": "encryptionKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 396,
									"name": "msg",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 144,
										"name": "ChannelMessage",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 362,
								"name": "SBProtocol.encryptionKey"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 361,
						"name": "SBProtocol.encryptionKey"
					}
				},
				{
					"id": 388,
					"name": "initializeMasterKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 389,
							"name": "initializeMasterKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 390,
									"name": "passphrase",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 385,
					"name": "setChannel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 386,
							"name": "setChannel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 387,
									"name": "_channel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 593,
										"name": "Channel",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"target": 359,
								"name": "SBProtocol.setChannel"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 358,
						"name": "SBProtocol.setChannel"
					}
				},
				{
					"id": 377,
					"name": "genKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 378,
							"name": "genKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 368,
										"name": "Protocol_KeyInfo",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						379
					]
				},
				{
					"title": "Methods",
					"children": [
						397,
						394,
						388,
						385,
						377
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": 357,
					"name": "SBProtocol",
					"package": "snackabra"
				}
			]
		},
		{
			"id": 401,
			"name": "Protocol_ECDH",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Implements 'whisper', eg 1:1 public-key based encryption between\nsender and receiver. It will use as sender the private key used\non the Channel, and you can either provide 'sendTo' in the \nSBMessage options, or omit it in which case it will use the\nchannel owner's public key.\n\nIf no protocol is provided to a channel or message, then this\nprotocol is used by default."
					}
				]
			},
			"children": [
				{
					"id": 402,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 403,
							"name": "new Protocol_ECDH",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 401,
								"name": "Protocol_ECDH",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 412,
					"name": "decryptionKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 413,
							"name": "decryptionKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 414,
									"name": "channel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 415,
									"name": "msg",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 144,
										"name": "ChannelMessage",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "CryptoKey"
												},
												"name": "CryptoKey",
												"package": "typescript"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 365,
								"name": "SBProtocol.decryptionKey"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 364,
						"name": "SBProtocol.decryptionKey"
					}
				},
				{
					"id": 409,
					"name": "encryptionKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 410,
							"name": "encryptionKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 411,
									"name": "msg",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 144,
										"name": "ChannelMessage",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": 362,
								"name": "SBProtocol.encryptionKey"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 361,
						"name": "SBProtocol.encryptionKey"
					}
				},
				{
					"id": 406,
					"name": "setChannel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 407,
							"name": "setChannel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 408,
									"name": "channel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 593,
										"name": "Channel",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"target": 359,
								"name": "SBProtocol.setChannel"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": 358,
						"name": "SBProtocol.setChannel"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						402
					]
				},
				{
					"title": "Methods",
					"children": [
						412,
						409,
						406
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": 357,
					"name": "SBProtocol",
					"package": "snackabra"
				}
			]
		},
		{
			"id": 543,
			"name": "SB384",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Basic (core) capability object in SB."
					}
				],
				"blockTags": [
					{
						"tag": "@param",
						"name": "key",
						"content": [
							{
								"kind": "text",
								"text": "a jwk with which to create identity; if not provided, it will\n'mint' (generate) them randomly, in other words it will default to creating\na new identity (\"384\")."
							}
						]
					},
					{
						"tag": "@param",
						"name": "forcePrivate",
						"content": [
							{
								"kind": "text",
								"text": "if true, will force SB384 to include private key; it\nwill throw an exception if the key is not private. If SB384 is used to mint,\nthen it's always private.\n\nThe important \"externally visible\" formats are:\n\n- "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "SB384.userId",
								"target": 571,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": ": unique hash ("
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "SB384Hash",
								"target": 201,
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": ") of contents of\n  public key, shorter format (256 bits, 43 x base62), cannot be used to\n  reconstruct key, used to identify users (and channels)\n\n- userPublicKey(): encodes core public key info ('x' and 'y' fields), as a\n  base62 string (with a unique prefix). This is 'wire' format as well as\n  human-readable. \n\n- userPrivateKey(): similar to public key format, adds the 'd' field\n  information (embedded), from this format a full private key can be\n  reconstructed.\n\nLike most SB classes, SB384 follows the \"ready template\" design pattern: the\nobject is immediately available upon creation, but isn't \"ready\" until it\nsays it's ready. See "
							},
							{
								"kind": "code",
								"text": "`Channel Class`"
							},
							{
								"kind": "text",
								"text": "_ example below. Getters will throw\nexceptions if the object isn't sufficiently initialized. Also see Design\nNote [4]_.\n\n"
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "https://snackabra.io/jslib.html#dn-004-the-ready-pattern",
								"target": "https://snackabra.io/jslib.html#dn-004-the-ready-pattern"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 545,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 546,
							"name": "new SB384",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "As a fundamental object, SB384 can be initialized from a number starting points:\n\n- No key provided: a new key pair is generated\n- A CryptoKey object: a key pair is generated from the CryptoKey\n- A JsonWebKey object: a key pair is generated from the JsonWebKey\n- A SBUserPublicKey object: a key pair is generated from the SBUserPublicKey\n- A SBUserPrivateKey object: a key pair is generated from the SBUserPrivateKey\n\nThe 'forcePrivate' parameter is used to force the object to be private; if\nthe key provided is inherently not private, an exception is thrown. This simplifies\nsituation where it would only make sense if you're operating with a private key,\nand spares you from (sometimes convoluted) checks (eg what fields are present in\na 'jwk' field etc)."
									}
								]
							},
							"parameters": [
								{
									"id": 547,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "CryptoKey"
												},
												"name": "CryptoKey",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "JsonWebKey"
												},
												"name": "JsonWebKey",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 548,
									"name": "forcePrivate",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 543,
								"name": "SB384",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 560,
					"name": "errorState",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 549,
					"name": "sb384Ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 543,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 544,
					"name": "ReadyFlag",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"type": {
						"type": "intrinsic",
						"name": "symbol"
					},
					"defaultValue": "..."
				},
				{
					"id": 561,
					"name": "SB384ReadyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 562,
						"name": "SB384ReadyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 567,
					"name": "hash",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 568,
						"name": "hash",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns a unique identifier for external use, that will be unique\nfor any class or object that uses SB384 as it's root.\n\nThis is deterministic. Typical use case is to translate a user id\ninto a "
								},
								{
									"kind": "inline-tag",
									"tag": "@link",
									"text": "ChannelId"
								},
								{
									"kind": "text",
									"text": " (eg the channel that any user id is inherently\nthe owner of).\n\nThe hash is base62 encoding of the SHA-384 hash of the public key."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 569,
					"name": "hashB32",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 570,
						"name": "hashB32",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Similar to "
								},
								{
									"kind": "inline-tag",
									"tag": "@link",
									"text": "SB384.hash",
									"target": 567,
									"tsLinkText": ""
								},
								{
									"kind": "text",
									"text": ", but base32 encoded."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 581,
					"name": "jwkPrivate",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 582,
						"name": "jwkPrivate",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 583,
					"name": "jwkPublic",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 584,
						"name": "jwkPublic",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 573,
					"name": "ownerChannelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 574,
						"name": "ownerChannelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "inline-tag",
									"tag": "@link",
									"text": "ChannelID"
								},
								{
									"kind": "text",
									"text": " that corresponds to this, if it's an owner"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 565,
					"name": "private",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 566,
						"name": "private",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns true if this is a private key, otherwise false.\nWill throw an exception if the object is not ready."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						}
					}
				},
				{
					"id": 575,
					"name": "privateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 576,
						"name": "privateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 579,
					"name": "publicKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 580,
						"name": "publicKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 563,
					"name": "ready",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 564,
						"name": "ready",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
								"qualifiedName": "Promise"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 543,
									"name": "SB384",
									"package": "snackabra"
								}
							],
							"name": "Promise",
							"package": "typescript"
						}
					}
				},
				{
					"id": 577,
					"name": "signKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 578,
						"name": "signKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 571,
					"name": "userId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 572,
						"name": "userId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 589,
					"name": "userPrivateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 590,
						"name": "userPrivateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Wire format of full info of key (eg private key). Compressed."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 591,
					"name": "userPrivateKeyDehydrated",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 592,
						"name": "userPrivateKeyDehydrated",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Compressed and dehydrated, meaning, 'x' needs to come from another source.\n(If lost it can be reconstructed from 'd')"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 587,
					"name": "userPublicKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 588,
						"name": "userPublicKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Wire format of full (decodable) public key"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 585,
					"name": "ySign",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 586,
						"name": "ySign",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": 0
								},
								{
									"type": "literal",
									"value": 1
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						545
					]
				},
				{
					"title": "Properties",
					"children": [
						560,
						549,
						544
					]
				},
				{
					"title": "Accessors",
					"children": [
						561,
						567,
						569,
						581,
						583,
						573,
						565,
						575,
						579,
						563,
						577,
						571,
						589,
						591,
						587,
						585
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 421,
					"name": "SBChannelKeys"
				}
			]
		},
		{
			"id": 421,
			"name": "SBChannelKeys",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The minimum state of a Channel is the \"user\" keys, eg\nhow we identify when connecting to the channel."
					}
				]
			},
			"children": [
				{
					"id": 423,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 424,
							"name": "new SBChannelKeys",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 425,
									"name": "handleOrKey",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 112,
												"name": "SBChannelHandle",
												"package": "snackabra"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 421,
								"name": "SBChannelKeys",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": 546,
								"name": "SB384.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 545,
						"name": "SB384.constructor"
					}
				},
				{
					"id": 429,
					"name": "channelServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 463,
					"name": "errorState",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 560,
						"name": "SB384.errorState"
					}
				},
				{
					"id": 452,
					"name": "sb384Ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 543,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 549,
						"name": "SB384.sb384Ready"
					}
				},
				{
					"id": 427,
					"name": "sbChannelKeysReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 421,
								"name": "SBChannelKeys",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 422,
					"name": "ReadyFlag",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"type": {
						"type": "intrinsic",
						"name": "symbol"
					},
					"defaultValue": "...",
					"overwrites": {
						"type": "reference",
						"target": 544,
						"name": "SB384.ReadyFlag"
					}
				},
				{
					"id": 464,
					"name": "SB384ReadyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 465,
						"name": "SB384ReadyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "any"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.SB384ReadyFlag"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 561,
						"name": "SB384.SB384ReadyFlag"
					}
				},
				{
					"id": 432,
					"name": "SBChannelKeysReadyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 433,
						"name": "SBChannelKeysReadyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 434,
					"name": "channelData",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 435,
						"name": "channelData",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 118,
							"name": "SBChannelData",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 438,
					"name": "channelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 439,
						"name": "channelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						}
					}
				},
				{
					"id": 440,
					"name": "handle",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 441,
						"name": "handle",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 112,
							"name": "SBChannelHandle",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 468,
					"name": "hash",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 469,
						"name": "hash",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns a unique identifier for external use, that will be unique\nfor any class or object that uses SB384 as it's root.\n\nThis is deterministic. Typical use case is to translate a user id\ninto a "
								},
								{
									"kind": "inline-tag",
									"tag": "@link",
									"text": "ChannelId"
								},
								{
									"kind": "text",
									"text": " (eg the channel that any user id is inherently\nthe owner of).\n\nThe hash is base62 encoding of the SHA-384 hash of the public key."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.hash"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 567,
						"name": "SB384.hash"
					}
				},
				{
					"id": 470,
					"name": "hashB32",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 471,
						"name": "hashB32",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Similar to "
								},
								{
									"kind": "inline-tag",
									"tag": "@link",
									"text": "SB384.hash",
									"target": 567,
									"tsLinkText": ""
								},
								{
									"kind": "text",
									"text": ", but base32 encoded."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.hashB32"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 569,
						"name": "SB384.hashB32"
					}
				},
				{
					"id": 482,
					"name": "jwkPrivate",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 483,
						"name": "jwkPrivate",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.jwkPrivate"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 581,
						"name": "SB384.jwkPrivate"
					}
				},
				{
					"id": 484,
					"name": "jwkPublic",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 485,
						"name": "jwkPublic",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.jwkPublic"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 583,
						"name": "SB384.jwkPublic"
					}
				},
				{
					"id": 436,
					"name": "owner",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 437,
						"name": "owner",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "intrinsic",
									"name": "boolean"
								},
								{
									"type": "literal",
									"value": ""
								}
							]
						}
					}
				},
				{
					"id": 474,
					"name": "ownerChannelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 475,
						"name": "ownerChannelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "inline-tag",
									"tag": "@link",
									"text": "ChannelID"
								},
								{
									"kind": "text",
									"text": " that corresponds to this, if it's an owner"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.ownerChannelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 573,
						"name": "SB384.ownerChannelId"
					}
				},
				{
					"id": 466,
					"name": "private",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 467,
						"name": "private",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns true if this is a private key, otherwise false.\nWill throw an exception if the object is not ready."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.private"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 565,
						"name": "SB384.private"
					}
				},
				{
					"id": 476,
					"name": "privateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 477,
						"name": "privateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.privateKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 575,
						"name": "SB384.privateKey"
					}
				},
				{
					"id": 480,
					"name": "publicKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 481,
						"name": "publicKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.publicKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 579,
						"name": "SB384.publicKey"
					}
				},
				{
					"id": 430,
					"name": "ready",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 431,
						"name": "ready",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
								"qualifiedName": "Promise"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 421,
									"name": "SBChannelKeys",
									"package": "snackabra"
								}
							],
							"name": "Promise",
							"package": "typescript"
						},
						"overwrites": {
							"type": "reference",
							"target": -1,
							"name": "SB384.ready"
						}
					},
					"overwrites": {
						"type": "reference",
						"target": 563,
						"name": "SB384.ready"
					}
				},
				{
					"id": 478,
					"name": "signKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 479,
						"name": "signKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.signKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 577,
						"name": "SB384.signKey"
					}
				},
				{
					"id": 472,
					"name": "userId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 473,
						"name": "userId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.userId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 571,
						"name": "SB384.userId"
					}
				},
				{
					"id": 490,
					"name": "userPrivateKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 491,
						"name": "userPrivateKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Wire format of full info of key (eg private key). Compressed."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.userPrivateKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 589,
						"name": "SB384.userPrivateKey"
					}
				},
				{
					"id": 492,
					"name": "userPrivateKeyDehydrated",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 493,
						"name": "userPrivateKeyDehydrated",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Compressed and dehydrated, meaning, 'x' needs to come from another source.\n(If lost it can be reconstructed from 'd')"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.userPrivateKeyDehydrated"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 591,
						"name": "SB384.userPrivateKeyDehydrated"
					}
				},
				{
					"id": 488,
					"name": "userPublicKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 489,
						"name": "userPublicKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Wire format of full (decodable) public key"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.userPublicKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 587,
						"name": "SB384.userPublicKey"
					}
				},
				{
					"id": 486,
					"name": "ySign",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 487,
						"name": "ySign",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": 0
								},
								{
									"type": "literal",
									"value": 1
								}
							]
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SB384.ySign"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 585,
						"name": "SB384.ySign"
					}
				},
				{
					"id": 442,
					"name": "buildApiBody",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 443,
							"name": "buildApiBody",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 444,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 445,
									"name": "apiPayload",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 133,
										"name": "ChannelApiBody",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 446,
					"name": "callApi",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 447,
							"name": "callApi",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Implements Channel api calls.\n\nNote that the API call details are also embedded in the ChannelMessage,\nand signed by the sender, completely separate from HTTP etc auth."
									}
								]
							},
							"parameters": [
								{
									"id": 448,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 449,
							"name": "callApi",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 450,
									"name": "path",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 451,
									"name": "apiPayload",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						423
					]
				},
				{
					"title": "Properties",
					"children": [
						429,
						463,
						452,
						427,
						422
					]
				},
				{
					"title": "Accessors",
					"children": [
						464,
						432,
						434,
						438,
						440,
						468,
						470,
						482,
						484,
						436,
						474,
						466,
						476,
						480,
						430,
						478,
						472,
						490,
						492,
						488,
						486
					]
				},
				{
					"title": "Methods",
					"children": [
						442,
						446
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 543,
					"name": "SB384",
					"package": "snackabra"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 593,
					"name": "Channel"
				}
			]
		},
		{
			"id": 307,
			"name": "SBCrypto",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Utility class for SB crypto functions. Generally we use an object instantiation\nof this (typically ''sbCrypto'') as a global variable."
					}
				]
			},
			"children": [
				{
					"id": 308,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 309,
							"name": "new SBCrypto",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 307,
								"name": "SBCrypto",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 353,
					"name": "ab2str",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 354,
							"name": "ab2str",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Standardized 'ab2str()' function, array buffer to string."
									}
								]
							},
							"parameters": [
								{
									"id": 355,
									"name": "buffer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 329,
					"name": "encrypt",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 330,
							"name": "encrypt",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 331,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "BufferSource"
										},
										"name": "BufferSource",
										"package": "typescript"
									}
								},
								{
									"id": 332,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 333,
									"name": "params",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 174,
										"name": "EncryptParams",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 325,
					"name": "exportKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 326,
							"name": "exportKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Export key; note that if there's an issue, this will return undefined.\nThat can happen normally if for example the key is restricted (and\nnot extractable)."
									}
								]
							},
							"parameters": [
								{
									"id": 327,
									"name": "format",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "jwk"
									}
								},
								{
									"id": 328,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "JsonWebKey"
												},
												"name": "JsonWebKey",
												"package": "typescript"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 310,
					"name": "generateIdKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 311,
							"name": "generateIdKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Hashes and splits into two (h1 and h1) signature of data, h1\nis used to request (salt, iv) pair and then h2 is used for\nencryption (h2, salt, iv)."
									}
								]
							},
							"parameters": [
								{
									"id": 312,
									"name": "buf",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 313,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 314,
													"name": "idBinary",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "ArrayBuffer"
														},
														"name": "ArrayBuffer",
														"package": "typescript"
													}
												},
												{
													"id": 315,
													"name": "keyMaterial",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "ArrayBuffer"
														},
														"name": "ArrayBuffer",
														"package": "typescript"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														314,
														315
													]
												}
											]
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 316,
					"name": "generateKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 317,
							"name": "generateKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.generatekeys()\n\nGenerates standard "
									},
									{
										"kind": "code",
										"text": "``ECDH``"
									},
									{
										"kind": "text",
										"text": " keys using "
									},
									{
										"kind": "code",
										"text": "``P-384``"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKeyPair"
										},
										"name": "CryptoKeyPair",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 318,
					"name": "importKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 319,
							"name": "importKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Import keys"
									}
								]
							},
							"parameters": [
								{
									"id": 320,
									"name": "format",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "KeyFormat"
										},
										"name": "KeyFormat",
										"package": "typescript"
									}
								},
								{
									"id": 321,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "BufferSource"
												},
												"name": "BufferSource",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "JsonWebKey"
												},
												"name": "JsonWebKey",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 322,
									"name": "type",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "ECDH"
											},
											{
												"type": "literal",
												"value": "AES"
											},
											{
												"type": "literal",
												"value": "PBKDF2"
											}
										]
									}
								},
								{
									"id": 323,
									"name": "extractable",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 324,
									"name": "keyUsages",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
												"qualifiedName": "KeyUsage"
											},
											"name": "KeyUsage",
											"package": "typescript"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 341,
					"name": "sign",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 342,
							"name": "sign",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Basic signing"
									}
								]
							},
							"parameters": [
								{
									"id": 343,
									"name": "signKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 344,
									"name": "contents",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 350,
					"name": "str2ab",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 351,
							"name": "str2ab",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Standardized 'str2ab()' function, string to array buffer."
									}
								]
							},
							"parameters": [
								{
									"id": 352,
									"name": "string",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 345,
					"name": "verify",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 346,
							"name": "verify",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Basic verifcation"
									}
								]
							},
							"parameters": [
								{
									"id": 347,
									"name": "verifyKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 348,
									"name": "sign",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								},
								{
									"id": 349,
									"name": "contents",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 334,
					"name": "wrap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 335,
							"name": "wrap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Internally this is Deprecated, but we retain a simplified version for now; for example,\nsome unit tests use this to 'track' higher-level jslib primitives. This used to be\nthe main approach to boot-strap a ChannelMessage object; this is now divided into\nsync and async phases over internal channel queues."
									}
								]
							},
							"parameters": [
								{
									"id": 336,
									"name": "body",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 337,
									"name": "sender",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 338,
									"name": "encryptionKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 339,
									"name": "salt",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								},
								{
									"id": 340,
									"name": "signingKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 144,
										"name": "ChannelMessage",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						308
					]
				},
				{
					"title": "Methods",
					"children": [
						353,
						329,
						325,
						310,
						316,
						318,
						341,
						350,
						345,
						334
					]
				}
			]
		},
		{
			"id": 292,
			"name": "SBError",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"children": [
				{
					"id": 293,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 294,
							"name": "new SBError",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 295,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 292,
								"name": "SBError",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Error.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Error.constructor"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						293
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
						"qualifiedName": "Error"
					},
					"name": "Error",
					"package": "typescript"
				}
			]
		},
		{
			"id": 1059,
			"name": "Snackabra",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Main class. It corresponds to a single channel server. Most apps\nwill only be talking to one channel server, but it is possible\nto have multiple instances of Snackabra, each talking to a\ndifferent channel server.\n\nTakes a single parameter, the URL to the channel server."
					}
				],
				"blockTags": [
					{
						"tag": "@example",
						"content": [
							{
								"kind": "code",
								"text": "```typescript\n    const sb = new Snackabra('http://localhost:3845')\n```"
							},
							{
								"kind": "text",
								"text": "\n\nWebsocket server is always the same server (just different protocol),\nstorage server is now provided by '/api/v2/info' endpoint from the\nchannel server.\n\nYou can give an options parameter with various settings, including\ndebug levels. For ease of use, you can just give a boolean value\n(eg 'true') to turn on basic debugging.\n\nThe 'sbFetch' option allows you to provide a custom fetch function\nfor accessing channel and storage servers. For example, to provide\na specific service binding for a web worker."
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 1096,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 1097,
							"name": "new Snackabra",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 1098,
									"name": "channelServer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1099,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1100,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 1101,
															"name": "DEBUG",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 1102,
															"name": "DEBUG2",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 1103,
															"name": "sbFetch",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 1104,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"signatures": [
																		{
																			"id": 1105,
																			"name": "__type",
																			"variant": "signature",
																			"kind": 4096,
																			"flags": {},
																			"parameters": [
																				{
																					"id": 1106,
																					"name": "input",
																					"variant": "param",
																					"kind": 32768,
																					"flags": {},
																					"type": {
																						"type": "union",
																						"types": [
																							{
																								"type": "reference",
																								"target": {
																									"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
																									"qualifiedName": "RequestInfo"
																								},
																								"name": "RequestInfo",
																								"package": "typescript"
																							},
																							{
																								"type": "reference",
																								"target": {
																									"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
																									"qualifiedName": "URL"
																								},
																								"name": "URL",
																								"package": "typescript"
																							}
																						]
																					}
																				},
																				{
																					"id": 1107,
																					"name": "init",
																					"variant": "param",
																					"kind": 32768,
																					"flags": {
																						"isOptional": true
																					},
																					"type": {
																						"type": "reference",
																						"target": {
																							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
																							"qualifiedName": "RequestInit"
																						},
																						"name": "RequestInit",
																						"package": "typescript"
																					}
																				}
																			],
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																					"qualifiedName": "Promise"
																				},
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": {
																							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
																							"qualifiedName": "Response"
																						},
																						"name": "Response",
																						"package": "typescript"
																					}
																				],
																				"name": "Promise",
																				"package": "typescript"
																			}
																		}
																	]
																}
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																1101,
																1102,
																1103
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1059,
								"name": "Snackabra",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.constructor"
					}
				},
				{
					"id": 1061,
					"name": "activeFetches",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Map"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "symbol"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
									"qualifiedName": "AbortController"
								},
								"name": "AbortController",
								"package": "typescript"
							}
						],
						"name": "Map",
						"package": "typescript"
					},
					"defaultValue": "..."
				},
				{
					"id": 1067,
					"name": "defaultChannelServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "'http://localhost:3845'"
				},
				{
					"id": 1063,
					"name": "isShutdown",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 1060,
					"name": "lastTimeStamp",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0"
				},
				{
					"id": 1064,
					"name": "lastTimestampPrefix",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "..."
				},
				{
					"id": 1066,
					"name": "onlineStatus",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "ServerOnlineStatus"
						},
						"name": "ServerOnlineStatus",
						"package": "snackabra"
					},
					"defaultValue": "'unknown'"
				},
				{
					"id": 1133,
					"name": "crypto",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1134,
						"name": "crypto",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns the crypto API"
								}
							]
						},
						"type": {
							"type": "reference",
							"target": 307,
							"name": "SBCrypto",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 1129,
					"name": "storage",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1130,
						"name": "storage",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns the storage API"
								}
							]
						},
						"type": {
							"type": "reference",
							"target": 508,
							"name": "StorageApi",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 1135,
					"name": "version",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 1136,
						"name": "version",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns version of jslib"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1120,
					"name": "connect",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1121,
							"name": "connect",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Connects to :term:"
									},
									{
										"kind": "code",
										"text": "`Channel`"
									},
									{
										"kind": "text",
										"text": " on this channel server. Returns a Channel  if\nno message handler is provided; if onMessage is provided then it returns a\nChannelSocket."
									}
								]
							},
							"parameters": [
								{
									"id": 1122,
									"name": "handleOrKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 112,
												"name": "SBChannelHandle",
												"package": "snackabra"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 593,
								"name": "Channel",
								"package": "snackabra"
							}
						},
						{
							"id": 1123,
							"name": "connect",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 1124,
									"name": "handleOrKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 112,
												"name": "SBChannelHandle",
												"package": "snackabra"
											}
										]
									}
								},
								{
									"id": 1125,
									"name": "onMessage",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1126,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 1127,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 1128,
															"name": "m",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "reference",
																		"target": 123,
																		"name": "Message",
																		"package": "snackabra"
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 811,
								"name": "ChannelSocket",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 1115,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1116,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new channel. Returns a promise to a ''SBChannelHandle'' object.\nNote that this method does not connect to the channel, it just creates\n(authorizes) it and allocates storage budget.\n\nNew (2.0) interface:"
									}
								]
							},
							"parameters": [
								{
									"id": 1117,
									"name": "budgetChannel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 593,
										"name": "Channel",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 112,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 1118,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 1119,
									"name": "storageToken",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 105,
										"name": "SBStorageToken",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 112,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1112,
					"name": "getPage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1113,
							"name": "getPage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "\"Anonymous\" version of fetching a page, since unless it's locked you do not\nneed to be authenticated to fetch a page (or even know what channel it's\nrelated to)."
									}
								]
							},
							"parameters": [
								{
									"id": 1114,
									"name": "prefix",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1131,
					"name": "getStorageServer",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 1132,
							"name": "getStorageServer",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns matching storage server"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1076,
					"name": "addChannelSocket",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 1077,
							"name": "addChannelSocket",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 1078,
									"name": "socket",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 811,
										"name": "ChannelSocket",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1072,
					"name": "checkUnknownNetworkStatus",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 1073,
							"name": "checkUnknownNetworkStatus",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1082,
					"name": "closeAll",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 1083,
							"name": "closeAll",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Closes all active operations and connections, including any fetches\nand websockets. This closes EVERYTHING (globally)."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1068,
					"name": "dateNow",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 1069,
							"name": "dateNow",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1092,
					"name": "emit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 1093,
							"name": "emit",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 1094,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1095,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.emit"
					}
				},
				{
					"id": 1074,
					"name": "haveNotHeardFromServer",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 1075,
							"name": "haveNotHeardFromServer",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Call when we haven't heard from any channel server for a while, and we\nthink we should have."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1070,
					"name": "heardFromServer",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 1071,
							"name": "heardFromServer",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Call when somethings been heard from any channel server; this is used to\ntrack whether we are online or not."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1088,
					"name": "off",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 1089,
							"name": "off",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 1090,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1091,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.off"
					}
				},
				{
					"id": 1084,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 1085,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 1086,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1087,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 1079,
					"name": "removeChannelSocket",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 1080,
							"name": "removeChannelSocket",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 1081,
									"name": "socket",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 811,
										"name": "ChannelSocket",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1096
					]
				},
				{
					"title": "Properties",
					"children": [
						1061,
						1067,
						1063,
						1060,
						1064,
						1066
					]
				},
				{
					"title": "Accessors",
					"children": [
						1133,
						1129,
						1135
					]
				},
				{
					"title": "Methods",
					"children": [
						1120,
						1115,
						1112,
						1131,
						1076,
						1072,
						1082,
						1068,
						1092,
						1074,
						1070,
						1088,
						1084,
						1079
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "snackabra-jslib/snackabra.ts",
						"qualifiedName": "EventEmitter"
					},
					"name": "EventEmitter",
					"package": "snackabra"
				}
			]
		},
		{
			"id": 508,
			"name": "StorageApi",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "StorageAPI"
					}
				]
			},
			"children": [
				{
					"id": 522,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 523,
							"name": "new StorageApi",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 524,
									"name": "stringOrPromise",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Promise"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												],
												"name": "Promise",
												"package": "typescript"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 508,
								"name": "StorageApi",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 540,
					"name": "fetchData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 541,
							"name": "fetchData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This assumes you have a complete SBObjectHandle. Note that if you only have\nthe 'id' and 'verification' fields, you can reconstruct / request the rest.\nThe current interface will return both nonce, salt, and encrypted data.\n\nNot that fetchData will prioritize checking with the storageServer in the\nhandle, if present. Next, it will always check localhost at port 3841 if a\nlocal mirror is running. After that, it may or may not check one or several\npossible servers."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Promise<ArrayBuffer | string> - the shard data\n\nNote that this returns a handle, which is the same handle but might be\nupdated (for example iv, salt filled in). Server will be updated with\nwhatever server 'worked', etc.\n\nThe returned shard contents is referenced by 'data' in the handle. It's\nstored as a 'weakref', meaning, you can hang on to the handle as your\n'cache', and use ''getData()'' to safely retrieve the data."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 542,
									"name": "handle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 183,
										"name": "SBObjectHandle",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 183,
										"name": "SBObjectHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 526,
					"name": "getStorageServer",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 527,
							"name": "getStorageServer",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 531,
					"name": "storeData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 532,
							"name": "storeData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Store 'contents' as a shard, returns an object handle. Note that 'contents' can be\nanything, and is always packaged as a payload before storing."
									}
								]
							},
							"parameters": [
								{
									"id": 533,
									"name": "contents",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 534,
									"name": "budgetSource",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 105,
												"name": "SBStorageToken",
												"package": "snackabra"
											},
											{
												"type": "reference",
												"target": 112,
												"name": "SBChannelHandle",
												"package": "snackabra"
											},
											{
												"type": "reference",
												"target": 593,
												"name": "Channel",
												"package": "snackabra"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 183,
										"name": "SBObjectHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 516,
					"name": "getData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 517,
							"name": "getData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Convenience wrapper for object handles: returns the data if it's present,\nreturns null if it's not, and throws an error if the handle is invalid."
									}
								]
							},
							"parameters": [
								{
									"id": 518,
									"name": "handle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 183,
										"name": "SBObjectHandle",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								]
							}
						}
					]
				},
				{
					"id": 512,
					"name": "getObjectKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 513,
							"name": "getObjectKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Derives the encryption key for a given object (shard)."
									}
								]
							},
							"parameters": [
								{
									"id": 514,
									"name": "fileHashBuffer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "BufferSource"
										},
										"name": "BufferSource",
										"package": "typescript"
									}
								},
								{
									"id": 515,
									"name": "salt",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 519,
					"name": "getPayload",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 520,
							"name": "getPayload",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Convenience wrapper for object handles: returns the payload."
									}
								]
							},
							"parameters": [
								{
									"id": 521,
									"name": "handle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 183,
										"name": "SBObjectHandle",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 509,
					"name": "padBuf",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"signatures": [
						{
							"id": 510,
							"name": "padBuf",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Pads object up to closest permitted size boundaries;\ncurrently that means a minimum of 4KB and a maximum of\nof 1 MB, after which it rounds up to closest MB."
									}
								]
							},
							"parameters": [
								{
									"id": 511,
									"name": "buf",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						522
					]
				},
				{
					"title": "Methods",
					"children": [
						540,
						526,
						531,
						516,
						512,
						519,
						509
					]
				}
			]
		},
		{
			"id": 164,
			"name": "ChannelAdminData",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This corresponds to all important meta-data on a channel that an Owner\nhas access to."
					}
				]
			},
			"children": [
				{
					"id": 169,
					"name": "accepted",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Set"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Set",
						"package": "typescript"
					}
				},
				{
					"id": 167,
					"name": "capacity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 166,
					"name": "channelData",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 118,
						"name": "SBChannelData",
						"package": "snackabra"
					}
				},
				{
					"id": 165,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 173,
					"name": "latestTimestamp",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 168,
					"name": "locked",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 172,
					"name": "motherChannel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 171,
					"name": "storageLimit",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 170,
					"name": "visitors",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Map"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Map",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						169,
						167,
						166,
						165,
						173,
						168,
						172,
						171,
						170
					]
				}
			]
		},
		{
			"id": 133,
			"name": "ChannelApiBody",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Pretty much every api call needs a payload that contains the\napi request, information about 'requestor' (user/visitor),\nsignature of same, time stamp, yada yada."
					}
				]
			},
			"children": [
				{
					"id": 143,
					"name": "[SB_CHANNEL_API_BODY_SYMBOL]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 142,
					"name": "apiPayload",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 141,
					"name": "apiPayloadBuf",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 134,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 138,
					"name": "isOwner",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 135,
					"name": "path",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 140,
					"name": "sign",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 139,
					"name": "timestamp",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 136,
					"name": "userId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 137,
					"name": "userPublicKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						143,
						142,
						141,
						134,
						138,
						135,
						140,
						139,
						136,
						137
					]
				}
			]
		},
		{
			"id": 144,
			"name": "ChannelMessage",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "SB standard wrapped encrypted messages. This is largely 'internal', normal\nusage of the library will work at a higher level ('Message' interface).\n\nEncryption is done with AES-GCM, 16 bytes of salt.\n\nTimestamp prefix is fourty-two (26) [0-3] characters. It encodes epoch\nmilliseconds * 4^4 (last four are '0000').\n\n\"Everything is optional\" as this is used in multiple contexts. Use\n"
					},
					{
						"kind": "code",
						"text": "``validate_ChannelMessage()``"
					},
					{
						"kind": "text",
						"text": " to validate.\n\nNote that channel server doesn't need userPublicKey on every channel message\nsince it's provided on websocket setup.\n\nComplete channel \"_id\" is channelId + '_' + subChannel + '_' +\ntimestampPrefix This allows (prefix) searches within time spans on a per\nchannel (and if applicable, subchannel) basis. Special subchannel 'blank'\n(represented as '____') is the default channel and generally the only one\nthat visitors have access to.\n\nA core exception is that all messages with a TTL in the range 1-7 (eg range\nof 1 minute to 72 hours) are duplicated onto subchannels matching the TTLs,\nnamely '___1', '___2', '___3', etc. Thus an oldMessages fetch can for example\nrequest '___4' to get all messages that were sent with TTL 4 (eg 1 hour).\nWhich also means that as Owner, if you set TTL on a message then you can't\nuse the fourth character (if you try to while setting a TTL, channel server\nwill reject it).\n\nProperties that are generally retained or communicated inside payload\npackaging have short names (apologies for lack of readability).\n'unencryptedContents' has a long and cumbersome name for obvious reasons.\n\nThere are a couple of semantics that are enforced by the channel server;\nsince this is partly a policy issue of the channel server, anything in this\njslib documentation might be incomplete. For example, baseline channel server\ndoes not allow messages to both be 'infinite ttl' and addressed (eg have a\n'to' field value). \n\nIf any protocol wants to do additional or different encryption, it would need\nto wrap: the core binary format is defined to have room for iv and salt, and\nprescribes sizes 12 and 16 respectively. Strictly speaking, the protocol can\nuse these 28 bytes for whatever it wants. A protocol that wants to do\nsomething completely different can simply modify the 'c' (contents) buffer\nand append any binary data it needs."
					}
				]
			},
			"children": [
				{
					"id": 163,
					"name": "[SB_CHANNEL_MESSAGE_SYMBOL]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 155,
					"name": "_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 146,
					"name": "c",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 151,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 159,
					"name": "error",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 145,
					"name": "f",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 152,
					"name": "i2",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 147,
					"name": "iv",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					}
				},
				{
					"id": 162,
					"name": "protocol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 357,
						"name": "SBProtocol",
						"package": "snackabra"
					}
				},
				{
					"id": 158,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 149,
					"name": "s",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 148,
					"name": "salt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 157,
					"name": "stringMessage",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 153,
					"name": "sts",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 160,
					"name": "t",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 154,
					"name": "timestampPrefix",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 150,
					"name": "ts",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 161,
					"name": "ttl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 156,
					"name": "unencryptedContents",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						163,
						155,
						146,
						151,
						159,
						145,
						152,
						147,
						162,
						158,
						149,
						148,
						157,
						153,
						160,
						154,
						150,
						161,
						156
					]
				}
			]
		},
		{
			"id": 174,
			"name": "EncryptParams",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This is eseentially web standard type AesGcmParams, but with properties being\noptional - they'll be filled in at the \"bottom layer\" if missing (and if\nneeded)."
					}
				]
			},
			"children": [
				{
					"id": 177,
					"name": "additionalData",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "BufferSource"
						},
						"name": "BufferSource",
						"package": "typescript"
					}
				},
				{
					"id": 176,
					"name": "iv",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 175,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 178,
					"name": "tagLength",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						177,
						176,
						175,
						178
					]
				}
			]
		},
		{
			"id": 123,
			"name": "Message",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The \"app\" level message format, provided to onMessage (by ChannelSocket), and\nsimilar interfaces. Note it will only be forwarded if verified."
					}
				]
			},
			"children": [
				{
					"id": 132,
					"name": "_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 124,
					"name": "body",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 125,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 131,
					"name": "eol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 127,
					"name": "messageTo",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 126,
					"name": "sender",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 128,
					"name": "senderPublicKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 129,
					"name": "senderTimestamp",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 130,
					"name": "serverTimestamp",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						132,
						124,
						125,
						131,
						127,
						126,
						128,
						129,
						130
					]
				}
			]
		},
		{
			"id": 206,
			"name": "MessageHistory",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "'MessageHistory' is where Messages go to retire. It's an infinitely-scaleable\n(in a practical sense) structure that can be used to store messages in a\nflexible way. Chunks of messages are stored as shards, in the form of a\npayload wrapped Map (key->message), where each message in turn is a\npayload-wrapped ChannelMessage.\n\nThis can be thought of as a flexible 'key-value store archive format' (where\nthe keys are globally unique and monotonically increasing).\n\nThe channel server keeps the 'latest' messages (by some definition) in a\nstraight KV format; overflow (or archiving) is done by processing these into\nthis structure.\n\nNote that depending on at what stage this object is in, it can either be\nmutable or immutable. While immutable, the timestamps track updates. Once\n(and eventually) encapsulated into a shard and it becomes immutable, then\n'lastModified' documents that point of time.\n\nNote that this structure is not particularly opinionated about how it should\norganize itself. Since any components that are shardified are immutable, any\nfuture processing requirements can re-map as needed. Our initial design\npriority is to be flexible, and simple, in particular to keep bug rate low."
					}
				]
			},
			"children": [
				{
					"id": 209,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 212,
					"name": "channelServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 215,
					"name": "count",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 211,
					"name": "created",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 213,
					"name": "from",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 210,
					"name": "ownerPublicKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 214,
					"name": "to",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 207,
					"name": "type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "directory"
							},
							{
								"type": "literal",
								"value": "entry"
							}
						]
					}
				},
				{
					"id": 208,
					"name": "version",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "literal",
						"value": "20240228001"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						209,
						212,
						215,
						211,
						213,
						210,
						214,
						207,
						208
					]
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 216,
					"name": "MessageHistoryEntry"
				},
				{
					"type": "reference",
					"target": 227,
					"name": "MessageHistoryDirectory"
				}
			]
		},
		{
			"id": 227,
			"name": "MessageHistoryDirectory",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Directory of message history structures. entries can be 'direct' objects, or\nto handle (arbitrary) scaling then at any point they can be 'sharded' (eg\npayload-wrapped); the string key is always the 'from' ('first') of whatever\nis referenced by Map (directly or indirectly).\n\n'depth' of '0' means all the entries are 'direct', eg they are all shards\nof sets of messages; depth '1' means"
					}
				]
			},
			"children": [
				{
					"id": 234,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 209,
						"name": "MessageHistory.channelId"
					}
				},
				{
					"id": 237,
					"name": "channelServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 212,
						"name": "MessageHistory.channelServer"
					}
				},
				{
					"id": 240,
					"name": "count",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 215,
						"name": "MessageHistory.count"
					}
				},
				{
					"id": 236,
					"name": "created",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 211,
						"name": "MessageHistory.created"
					}
				},
				{
					"id": 229,
					"name": "depth",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 238,
					"name": "from",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 213,
						"name": "MessageHistory.from"
					}
				},
				{
					"id": 230,
					"name": "lastModified",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 235,
					"name": "ownerPublicKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 210,
						"name": "MessageHistory.ownerPublicKey"
					}
				},
				{
					"id": 231,
					"name": "shards",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Map"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": 183,
								"name": "SBObjectHandle",
								"package": "snackabra"
							}
						],
						"name": "Map",
						"package": "typescript"
					}
				},
				{
					"id": 232,
					"name": "subdirectories",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Map"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": 227,
								"name": "MessageHistoryDirectory",
								"package": "snackabra"
							}
						],
						"name": "Map",
						"package": "typescript"
					}
				},
				{
					"id": 239,
					"name": "to",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 214,
						"name": "MessageHistory.to"
					}
				},
				{
					"id": 228,
					"name": "type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "literal",
						"value": "directory"
					},
					"overwrites": {
						"type": "reference",
						"target": 207,
						"name": "MessageHistory.type"
					}
				},
				{
					"id": 233,
					"name": "version",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "literal",
						"value": "20240228001"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 208,
						"name": "MessageHistory.version"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						234,
						237,
						240,
						236,
						229,
						238,
						230,
						235,
						231,
						232,
						239,
						228,
						233
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 206,
					"name": "MessageHistory",
					"package": "snackabra"
				}
			]
		},
		{
			"id": 216,
			"name": "MessageHistoryEntry",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A single messagehistory shard: a Map<string, ArrayBuffer> where each buffer\nis a payload-wrapped ChannelMessage, in turn payload-wrapped and shardified.\nIf the shard is missing, count must be zero (and vice versa).\n\nAn entry is always shardified."
					}
				]
			},
			"children": [
				{
					"id": 220,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 209,
						"name": "MessageHistory.channelId"
					}
				},
				{
					"id": 223,
					"name": "channelServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 212,
						"name": "MessageHistory.channelServer"
					}
				},
				{
					"id": 226,
					"name": "count",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 215,
						"name": "MessageHistory.count"
					}
				},
				{
					"id": 222,
					"name": "created",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 211,
						"name": "MessageHistory.created"
					}
				},
				{
					"id": 224,
					"name": "from",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 213,
						"name": "MessageHistory.from"
					}
				},
				{
					"id": 218,
					"name": "messages",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Map"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							}
						],
						"name": "Map",
						"package": "typescript"
					}
				},
				{
					"id": 221,
					"name": "ownerPublicKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 210,
						"name": "MessageHistory.ownerPublicKey"
					}
				},
				{
					"id": 225,
					"name": "to",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 214,
						"name": "MessageHistory.to"
					}
				},
				{
					"id": 217,
					"name": "type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "literal",
						"value": "entry"
					},
					"overwrites": {
						"type": "reference",
						"target": 207,
						"name": "MessageHistory.type"
					}
				},
				{
					"id": 219,
					"name": "version",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "literal",
						"value": "20240228001"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 208,
						"name": "MessageHistory.version"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						220,
						223,
						226,
						222,
						224,
						218,
						221,
						225,
						217,
						219
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 206,
					"name": "MessageHistory",
					"package": "snackabra"
				}
			]
		},
		{
			"id": 494,
			"name": "MessageOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 498,
					"name": "protocol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 357,
						"name": "SBProtocol",
						"package": "snackabra"
					}
				},
				{
					"id": 500,
					"name": "retries",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 499,
					"name": "sendString",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 496,
					"name": "sendTo",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 497,
					"name": "subChannel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 495,
					"name": "ttl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						498,
						500,
						499,
						496,
						497,
						495
					]
				}
			]
		},
		{
			"id": 368,
			"name": "Protocol_KeyInfo",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Superset of what different protocols might need. Their meaning\ndepends on the protocol"
					}
				]
			},
			"children": [
				{
					"id": 373,
					"name": "hash1",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 374,
					"name": "hash2",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 371,
					"name": "iterations1",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 372,
					"name": "iterations2",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 369,
					"name": "salt1",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 370,
					"name": "salt2",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 375,
					"name": "summary",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						373,
						374,
						371,
						372,
						369,
						370,
						375
					]
				}
			]
		},
		{
			"id": 118,
			"name": "SBChannelData",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This is what the Channel Server knows about the channel.\n\nNote: all of these are (ultimately) strings, and are sent straight-up\nto/from channel server."
					}
				]
			},
			"children": [
				{
					"id": 119,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 120,
					"name": "ownerPublicKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 121,
					"name": "storageToken",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 105,
						"name": "SBStorageToken",
						"package": "snackabra"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						119,
						120,
						121
					]
				}
			]
		},
		{
			"id": 112,
			"name": "SBChannelHandle",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Channel 'descriptor'."
					}
				]
			},
			"children": [
				{
					"id": 117,
					"name": "[SB_CHANNEL_HANDLE_SYMBOL]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 116,
					"name": "channelData",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 118,
						"name": "SBChannelData",
						"package": "snackabra"
					}
				},
				{
					"id": 114,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 115,
					"name": "channelServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 113,
					"name": "userPrivateKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						117,
						116,
						114,
						115,
						113
					]
				}
			]
		},
		{
			"id": 183,
			"name": "SBObjectHandle",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "SBObjectHandle\n\nSBObjectHandle is a string that encodes the object type, object id, and\nobject key. It is used to retrieve objects from the storage server.\n\n- version is a single character string that indicates the version of the\n  object handle. Currently, the following versions are supported:\n\n  - '1' : version 1 (legacy)\n  - '2' : version 2 (legacy)\n  - '3' : version 3 (current)\n\n- id is a 43 character base62 string that identifies the object. It is used\n  to retrieve the object from the storage server.\n\n- key is a 43 character base62\n\n- verification is a random (server specific) string that is used to verify\n  that you're allowed to access the object (specifically, that somebody,\n  perhaps you, has paid for the object).\n\n- iv and salt are optional and not tracked by shard servers etc, but\n  facilitates app usage. During a period of time (the 'privacy window') you\n  can request these from the storage server. After that window they get\n  re-randomized, and if you didn't keep the values (for example, you received\n  an object but didn't do anything with it), then they're gone.\n\n- storageServer is optional, if provided it'll be asked first"
					}
				]
			},
			"children": [
				{
					"id": 200,
					"name": "[SB_OBJECT_HANDLE_SYMBOL]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 197,
					"name": "actualSize",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 191,
					"name": "data",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es2021.weakref.d.ts",
									"qualifiedName": "WeakRef"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								],
								"name": "WeakRef",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 194,
					"name": "dateAndTime",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 193,
					"name": "fileName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 195,
					"name": "fileType",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 184,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 297,
						"name": "Base62Encoded",
						"package": "snackabra"
					}
				},
				{
					"id": 188,
					"name": "iv",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							},
							{
								"type": "reference",
								"target": 297,
								"name": "Base62Encoded",
								"package": "snackabra"
							}
						]
					}
				},
				{
					"id": 187,
					"name": "key",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 297,
						"name": "Base62Encoded",
						"package": "snackabra"
					}
				},
				{
					"id": 196,
					"name": "lastModified",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 192,
					"name": "payload",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 189,
					"name": "salt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							},
							{
								"type": "reference",
								"target": 297,
								"name": "Base62Encoded",
								"package": "snackabra"
							}
						]
					}
				},
				{
					"id": 198,
					"name": "savedSize",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 190,
					"name": "storageServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 199,
					"name": "type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 185,
					"name": "verification",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 186,
					"name": "version",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 182,
						"name": "SBObjectHandleVersions",
						"package": "snackabra"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						200,
						197,
						191,
						194,
						193,
						195,
						184,
						188,
						187,
						196,
						192,
						189,
						198,
						190,
						199,
						185,
						186
					]
				}
			]
		},
		{
			"id": 357,
			"name": "SBProtocol",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Key exchange protocol. (Note that SBMessage always includes\na reference to the channel)"
					}
				]
			},
			"children": [
				{
					"id": 364,
					"name": "decryptionKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 365,
							"name": "decryptionKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 366,
									"name": "channel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 593,
										"name": "Channel",
										"package": "snackabra"
									}
								},
								{
									"id": 367,
									"name": "msg",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 144,
										"name": "ChannelMessage",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "CryptoKey"
												},
												"name": "CryptoKey",
												"package": "typescript"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 361,
					"name": "encryptionKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 362,
							"name": "encryptionKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 363,
									"name": "msg",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 144,
										"name": "ChannelMessage",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 358,
					"name": "setChannel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 359,
							"name": "setChannel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 360,
									"name": "channel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 593,
										"name": "Channel",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						364,
						361,
						358
					]
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"target": 376,
					"name": "Protocol_AES_GCM_256"
				},
				{
					"type": "reference",
					"target": 401,
					"name": "Protocol_ECDH"
				}
			]
		},
		{
			"id": 105,
			"name": "SBStorageToken",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 111,
					"name": "[SB_STORAGE_TOKEN_SYMBOL]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 109,
					"name": "created",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 106,
					"name": "hash",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 108,
					"name": "motherChannel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 107,
					"name": "size",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 110,
					"name": "used",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						111,
						109,
						106,
						108,
						107,
						110
					]
				}
			]
		},
		{
			"id": 501,
			"name": "Shard",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "***************************************************************************************************"
					}
				]
			},
			"children": [
				{
					"id": 506,
					"name": "actualSize",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 507,
					"name": "data",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 503,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 297,
						"name": "Base62Encoded",
						"package": "snackabra"
					}
				},
				{
					"id": 504,
					"name": "iv",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					}
				},
				{
					"id": 505,
					"name": "salt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 502,
					"name": "version",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "literal",
						"value": "3"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						506,
						507,
						503,
						504,
						505,
						502
					]
				}
			]
		},
		{
			"id": 297,
			"name": "Base62Encoded",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "***************************************************************************************************"
					}
				]
			},
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 298,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 299,
									"name": "_brand",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "literal",
										"value": "Base62Encoded"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										299
									]
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 179,
			"name": "MessageTtl",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Index/number of seconds/string description of TTL values (0-15) for\nmessages.\n\n"
					},
					{
						"kind": "code",
						"text": "```text\n    #    Seconds  Description\n    0          0  Ephemeral (not stored)\n    1             <reserved>\n    2             <reserved>\n    3         60  One minute (current minimum)\n    4        300  Five minutes\n    5       1800  Thirty minutes\n    6      14400  Four hours\n    7     129600  36 hours\n    8     864000  Ten days\n   10             <reserved> (all 'reserved' future choices will be monotonically increasing)\n   11             <reserved>\n   12             <reserved>\n   13             <reserved>\n   14             <reserved>\n   15   Infinity  Permastore, this is the default.\n ```"
					},
					{
						"kind": "text",
						"text": "\n\n Note that time periods above '8' (10 days) is largely TBD pending\n finalization of what the storage server will prefer. As far as messages\n are concerned, anything above '8' is 'very long'.\n\n A few rules around messages and TTL (this list is not exhaustive):\n\n - Currently only values 0, 3-8, and 15 are valid (15 is default).\n - Routable messages (eg messages with a 'to' field) may not have ttl above '8'.\n - TTL messages are never in storage shards; channel servers can chose to\n   limit how many they will keep (on a per TTL category basis) regardless\n   of time value (but at least last 1000).\n - TTL messages are duplicated and available on 'main' channel ('i2')\n   '____' as well as on subchannels '___3', '___4', up to '___8'.\n\n It's valid to encode it as four bits."
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": 0
					},
					{
						"type": "literal",
						"value": 3
					},
					{
						"type": "literal",
						"value": 4
					},
					{
						"type": "literal",
						"value": 5
					},
					{
						"type": "literal",
						"value": 6
					},
					{
						"type": "literal",
						"value": 7
					},
					{
						"type": "literal",
						"value": 8
					},
					{
						"type": "literal",
						"value": 15
					}
				]
			}
		},
		{
			"id": 201,
			"name": "SB384Hash",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 203,
			"name": "SBChannelId",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "reference",
				"target": 201,
				"name": "SB384Hash",
				"package": "snackabra"
			}
		},
		{
			"id": 182,
			"name": "SBObjectHandleVersions",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "1"
					},
					{
						"type": "literal",
						"value": "2"
					},
					{
						"type": "literal",
						"value": "3"
					}
				]
			}
		},
		{
			"id": 122,
			"name": "SBStorageTokenHash",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This is whatever token system the channel server uses.\n\nFor example with 'channel-server', you could command-line bootstrap with\nsomething like:\n\n'''bash\n  wrangler kv:key put --preview false --binding=LEDGER_NAMESPACE \"zzR5Ljv8LlYjgOnO5yOr4Gtgr9yVS7dTAQkJeVQ4I7w\" '{\"used\":false,\"size\":33554432}'"
					}
				]
			},
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 202,
			"name": "SBUserId",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The three encodings of a 'user'"
					}
				]
			},
			"type": {
				"type": "reference",
				"target": 201,
				"name": "SB384Hash",
				"package": "snackabra"
			}
		},
		{
			"id": 205,
			"name": "SBUserPrivateKey",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 204,
			"name": "SBUserPublicKey",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 103,
			"name": "NEW_CHANNEL_MINIMUM_BUDGET",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "***************************************************************************************************"
					}
				]
			},
			"type": {
				"type": "intrinsic",
				"name": "number"
			},
			"defaultValue": "..."
		},
		{
			"id": 1154,
			"name": "SB",
			"variant": "declaration",
			"kind": 32,
			"flags": {},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1155,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1157,
							"name": "Channel",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 593,
									"name": "Channel",
									"package": "snackabra"
								}
							},
							"defaultValue": "Channel"
						},
						{
							"id": 1159,
							"name": "SB384",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 543,
									"name": "SB384",
									"package": "snackabra"
								}
							},
							"defaultValue": "SB384"
						},
						{
							"id": 1158,
							"name": "SBCrypto",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 307,
									"name": "SBCrypto",
									"package": "snackabra"
								}
							},
							"defaultValue": "SBCrypto"
						},
						{
							"id": 1156,
							"name": "Snackabra",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 1059,
									"name": "Snackabra",
									"package": "snackabra"
								}
							},
							"defaultValue": "Snackabra"
						},
						{
							"id": 1168,
							"name": "arrayBufferToBase62",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1169,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"signatures": [
										{
											"id": 1170,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Converts any array buffer to base62."
													}
												]
											},
											"parameters": [
												{
													"id": 1171,
													"name": "buffer",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "ArrayBuffer"
																},
																"name": "ArrayBuffer",
																"package": "typescript"
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							"defaultValue": "arrayBufferToBase62"
						},
						{
							"id": 1160,
							"name": "arrayBufferToBase64url",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1161,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"signatures": [
										{
											"id": 1162,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Converts an ArrayBuffer to base64url."
													}
												]
											},
											"parameters": [
												{
													"id": 1163,
													"name": "buffer",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "ArrayBuffer"
																},
																"name": "ArrayBuffer",
																"package": "typescript"
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							"defaultValue": "arrayBufferToBase64url"
						},
						{
							"id": 1172,
							"name": "base62ToArrayBuffer",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1173,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"signatures": [
										{
											"id": 1174,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Converts a base62 string to matching ArrayBuffer."
													}
												]
											},
											"parameters": [
												{
													"id": 1175,
													"name": "s",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ArrayBuffer"
												},
												"name": "ArrayBuffer",
												"package": "typescript"
											}
										}
									]
								}
							},
							"defaultValue": "base62ToArrayBuffer"
						},
						{
							"id": 1164,
							"name": "base64ToArrayBuffer",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1165,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"signatures": [
										{
											"id": 1166,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Converts base64/base64url to ArrayBuffer. We're tolerant of inputs. Despite\nit's name, we return Uint8Array."
													}
												]
											},
											"parameters": [
												{
													"id": 1167,
													"name": "s",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"name": "Uint8Array",
												"package": "typescript"
											}
										}
									]
								}
							},
							"defaultValue": "base64ToArrayBuffer"
						},
						{
							"id": 1176,
							"name": "sbCrypto",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 307,
								"name": "SBCrypto",
								"package": "snackabra"
							},
							"defaultValue": "sbCrypto"
						},
						{
							"id": 1178,
							"name": "setDebugLevel",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1179,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"signatures": [
										{
											"id": 1180,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"parameters": [
												{
													"id": 1181,
													"name": "dbg1",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 1182,
													"name": "dbg2",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							},
							"defaultValue": "setDebugLevel"
						},
						{
							"id": 1177,
							"name": "version",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "version"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1157,
								1159,
								1158,
								1156,
								1168,
								1160,
								1172,
								1164,
								1176,
								1178,
								1177
							]
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 104,
			"name": "SBStorageTokenPrefix",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"type": {
				"type": "literal",
				"value": "LM2r"
			},
			"defaultValue": "'LM2r'"
		},
		{
			"id": 301,
			"name": "b62regex",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"type": {
				"type": "reference",
				"target": {
					"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
					"qualifiedName": "RegExp"
				},
				"name": "RegExp",
				"package": "typescript"
			},
			"defaultValue": "..."
		},
		{
			"id": 300,
			"name": "base62",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"type": {
				"type": "literal",
				"value": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
			},
			"defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'"
		},
		{
			"id": 302,
			"name": "base62regex",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"type": {
				"type": "reference",
				"target": {
					"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
					"qualifiedName": "RegExp"
				},
				"name": "RegExp",
				"package": "typescript"
			},
			"defaultValue": "b62regex"
		},
		{
			"id": 296,
			"name": "base64url",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"type": {
				"type": "literal",
				"value": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
			},
			"defaultValue": "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'"
		},
		{
			"id": 180,
			"name": "msgTtlToSeconds",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "number"
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 181,
			"name": "msgTtlToString",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "string"
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 356,
			"name": "sbCrypto",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This is the GLOBAL SBCrypto object, which is instantiated\nimmediately upon loading the jslib library.\n\nYou should use this guy, not instantiate your own. We don't\nuse static functions in SBCrypto(), because we want to be\nable to add features (like global key store) incrementally."
					}
				]
			},
			"type": {
				"type": "reference",
				"target": 307,
				"name": "SBCrypto",
				"package": "snackabra"
			},
			"defaultValue": "..."
		},
		{
			"id": 1149,
			"name": "version",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"type": {
				"type": "literal",
				"value": "2.0.0-alpha.5 (build 093)"
			},
			"defaultValue": "'2.0.0-alpha.5 (build 093)'"
		},
		{
			"id": 93,
			"name": "Memoize",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 94,
					"name": "Memoize",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "***************************************************************************************************"
							}
						]
					},
					"parameters": [
						{
							"id": 95,
							"name": "target",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 96,
							"name": "propertyKey",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 97,
							"name": "descriptor",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyDescriptor"
								},
								"name": "PropertyDescriptor",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 98,
			"name": "Ready",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 99,
					"name": "Ready",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 100,
							"name": "target",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 101,
							"name": "propertyKey",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 102,
							"name": "descriptor",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyDescriptor"
								},
								"name": "PropertyDescriptor",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 61,
			"name": "SBApiFetch",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 62,
					"name": "SBApiFetch",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Wrapper to SBFetch that applies SB API calling conventions on both sides of\nthe call; it will return whatever data structure the server returns, note\nthat it will extract the reply (either from json or from payload). if there\nare any issues or if the reply contains an error message, it will throw an\nerror."
							}
						]
					},
					"parameters": [
						{
							"id": 63,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "RequestInfo"
										},
										"name": "RequestInfo",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "URL"
										},
										"name": "URL",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 64,
							"name": "init",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
									"qualifiedName": "RequestInit"
								},
								"name": "RequestInit",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 13,
			"name": "_check_SBChannelData",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 14,
					"name": "_check_SBChannelData",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 15,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 118,
								"name": "SBChannelData",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "literal",
								"value": ""
							},
							{
								"type": "reference",
								"target": 105,
								"name": "SBStorageToken",
								"package": "snackabra"
							}
						]
					}
				}
			]
		},
		{
			"id": 7,
			"name": "_check_SBChannelHandle",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 8,
					"name": "_check_SBChannelHandle",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 9,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 112,
								"name": "SBChannelHandle",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "literal",
								"value": ""
							},
							{
								"type": "reference",
								"target": 105,
								"name": "SBStorageToken",
								"package": "snackabra"
							}
						]
					}
				}
			]
		},
		{
			"id": 32,
			"name": "_check_SBObjectHandle",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 33,
					"name": "_check_SBObjectHandle",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 34,
							"name": "h",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 183,
								"name": "SBObjectHandle",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 1,
			"name": "_check_SBStorageToken",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 2,
					"name": "_check_SBStorageToken",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 3,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 105,
								"name": "SBStorageToken",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "literal",
								"value": ""
							}
						]
					}
				}
			]
		},
		{
			"id": 1143,
			"name": "arrayBufferToBase62",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 1144,
					"name": "arrayBufferToBase62",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Converts any array buffer to base62."
							}
						]
					},
					"parameters": [
						{
							"id": 1145,
							"name": "buffer",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 1137,
			"name": "arrayBufferToBase64url",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 1138,
					"name": "arrayBufferToBase64url",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Converts an ArrayBuffer to base64url."
							}
						]
					},
					"parameters": [
						{
							"id": 1139,
							"name": "buffer",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 83,
			"name": "assemblePayload",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 84,
					"name": "assemblePayload",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Assemble payload. This creates a single binary (wire) format\nof an arbitrary set of (named) binary objects."
							}
						]
					},
					"parameters": [
						{
							"id": 85,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							},
							{
								"type": "literal",
								"value": null
							}
						]
					}
				}
			]
		},
		{
			"id": 80,
			"name": "b32decode",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 81,
					"name": "b32decode",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 82,
							"name": "encoded",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "literal",
								"value": null
							}
						]
					}
				}
			]
		},
		{
			"id": 74,
			"name": "b32encode",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 75,
					"name": "b32encode",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 76,
							"name": "num",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 77,
			"name": "b32process",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 78,
					"name": "b32process",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 79,
							"name": "str",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 1146,
			"name": "base62ToArrayBuffer",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 1147,
					"name": "base62ToArrayBuffer",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Converts a base62 string to matching ArrayBuffer."
							}
						]
					},
					"parameters": [
						{
							"id": 1148,
							"name": "s",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 68,
			"name": "base62ToBase64",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 69,
					"name": "base62ToBase64",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convenience: direct conversion from Base62 to Base64."
							}
						]
					},
					"parameters": [
						{
							"id": 70,
							"name": "s",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 297,
								"name": "Base62Encoded",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 1140,
			"name": "base64ToArrayBuffer",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 1141,
					"name": "base64ToArrayBuffer",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Converts base64/base64url to ArrayBuffer. We're tolerant of inputs. Despite\nit's name, we return Uint8Array."
							}
						]
					},
					"parameters": [
						{
							"id": 1142,
							"name": "s",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 71,
			"name": "base64ToBase62",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 72,
					"name": "base64ToBase62",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convenience: direct conversion from Base64 to Base62."
							}
						]
					},
					"parameters": [
						{
							"id": 73,
							"name": "s",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 297,
						"name": "Base62Encoded",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 54,
			"name": "compareBuffers",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 55,
					"name": "compareBuffers",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Simple comparison of buffers"
							}
						]
					},
					"parameters": [
						{
							"id": 56,
							"name": "a",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 57,
							"name": "b",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 86,
			"name": "extractPayload",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 87,
					"name": "extractPayload",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extract payload - this decodes from our binary (wire) format\nto a JS object. This supports a wide range of objects."
							}
						]
					},
					"parameters": [
						{
							"id": 88,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 58,
			"name": "getRandomValues",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 59,
					"name": "getRandomValues",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Fills buffer with random data"
							}
						]
					},
					"parameters": [
						{
							"id": 60,
							"name": "buffer",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 89,
			"name": "hydrateKey",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 90,
					"name": "hydrateKey",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "'hydrates' a key - if needed; if it's already good on hydration, just returns it.\nProviding pubKey (from other source) is optional so that you can use this function\nto easily confirm that a key is hydrated, it will return undefined if it's not."
							}
						]
					},
					"parameters": [
						{
							"id": 91,
							"name": "privKey",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 92,
							"name": "pubKey",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 205,
								"name": "SBUserPrivateKey",
								"package": "snackabra"
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				}
			]
		},
		{
			"id": 65,
			"name": "isBase62Encoded",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 66,
					"name": "isBase62Encoded",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 67,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": 297,
										"name": "Base62Encoded",
										"package": "snackabra"
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": 297,
							"name": "Base62Encoded",
							"package": "snackabra"
						}
					}
				}
			]
		},
		{
			"id": 51,
			"name": "jsonOrString",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 52,
					"name": "jsonOrString",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Different version than jsonParseWrapper. Does not throw, and also checks for\nsimple strings (which are not valid JSON) and would return those. Returns\nnull if input is null, or it can't figure out what it is. Used in (low level)\nmessaging contexts."
							}
						]
					},
					"parameters": [
						{
							"id": 53,
							"name": "str",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 41,
			"name": "jsonParseWrapper",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 42,
					"name": "jsonParseWrapper",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Adding a more resilient wrapper around JSON.parse. The 'loc' parameter is typically (file) line number."
							}
						]
					},
					"parameters": [
						{
							"id": 43,
							"name": "str",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 44,
							"name": "loc",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 45,
							"name": "reviver",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 46,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"signatures": [
										{
											"id": 47,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"parameters": [
												{
													"id": 48,
													"name": "this",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 49,
													"name": "key",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 50,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 1150,
			"name": "setDebugLevel",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 1151,
					"name": "setDebugLevel",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 1152,
							"name": "dbg1",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1153,
							"name": "dbg2",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 38,
			"name": "stringify_SBObjectHandle",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 39,
					"name": "stringify_SBObjectHandle",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "In some circumstances we need to make sure we have a JSON serializable\nversion of the object handle, eg that iv and salt are base62 strings,\nand that the verification has been resolved"
							}
						]
					},
					"parameters": [
						{
							"id": 40,
							"name": "h",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 183,
								"name": "SBObjectHandle",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 183,
								"name": "SBObjectHandle",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 28,
			"name": "stripChannelMessage",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 29,
					"name": "stripChannelMessage",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Complements validate_ChannelMessage. This is used to strip out the parts that\nare not strictly needed. Addresses privacy, security, and message size\nissues. Note that 'ChannelMessage' is a 'public' interface, in the sense that\nthis is what is actually stored (as payload ArrayBuffers) at rest, both on\nservers and clients.\n\n'serverMode' is slightly more strict and used by server-side code."
							}
						]
					},
					"parameters": [
						{
							"id": 30,
							"name": "msg",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 144,
								"name": "ChannelMessage",
								"package": "snackabra"
							}
						},
						{
							"id": 31,
							"name": "serverMode",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						}
					],
					"type": {
						"type": "reference",
						"target": 144,
						"name": "ChannelMessage",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 22,
			"name": "validate_ChannelApiBody",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 23,
					"name": "validate_ChannelApiBody",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 24,
							"name": "body",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 133,
						"name": "ChannelApiBody",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 25,
			"name": "validate_ChannelMessage",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 26,
					"name": "validate_ChannelMessage",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 27,
							"name": "body",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 144,
								"name": "ChannelMessage",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 144,
						"name": "ChannelMessage",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 19,
			"name": "validate_Message",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 20,
					"name": "validate_Message",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 21,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 123,
								"name": "Message",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 123,
						"name": "Message",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 16,
			"name": "validate_SBChannelData",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 17,
					"name": "validate_SBChannelData",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 18,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 118,
						"name": "SBChannelData",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 10,
			"name": "validate_SBChannelHandle",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 11,
					"name": "validate_SBChannelHandle",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Validates 'SBChannelHandle', throws if there's an issue"
							}
						]
					},
					"parameters": [
						{
							"id": 12,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 112,
								"name": "SBChannelHandle",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 112,
						"name": "SBChannelHandle",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 35,
			"name": "validate_SBObjectHandle",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 36,
					"name": "validate_SBObjectHandle",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 37,
							"name": "h",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 183,
								"name": "SBObjectHandle",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 183,
						"name": "SBObjectHandle",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 4,
			"name": "validate_SBStorageToken",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 5,
					"name": "validate_SBStorageToken",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 6,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 105,
								"name": "SBStorageToken",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 105,
						"name": "SBStorageToken",
						"package": "snackabra"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Enumerations",
			"children": [
				303
			]
		},
		{
			"title": "Classes",
			"children": [
				593,
				811,
				241,
				263,
				376,
				401,
				543,
				421,
				307,
				292,
				1059,
				508
			]
		},
		{
			"title": "Interfaces",
			"children": [
				164,
				133,
				144,
				174,
				123,
				206,
				227,
				216,
				494,
				368,
				118,
				112,
				183,
				357,
				105,
				501
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				297,
				179,
				201,
				203,
				182,
				122,
				202,
				205,
				204
			]
		},
		{
			"title": "Variables",
			"children": [
				103,
				1154,
				104,
				301,
				300,
				302,
				296,
				180,
				181,
				356,
				1149
			]
		},
		{
			"title": "Functions",
			"children": [
				93,
				98,
				61,
				13,
				7,
				32,
				1,
				1143,
				1137,
				83,
				80,
				74,
				77,
				1146,
				68,
				1140,
				71,
				54,
				86,
				58,
				89,
				65,
				51,
				41,
				1150,
				38,
				28,
				22,
				25,
				19,
				16,
				10,
				35,
				4
			]
		}
	],
	"packageName": "snackabra",
	"symbolIdMap": {
		"0": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_check_SBStorageToken"
		},
		"2": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_check_SBStorageToken"
		},
		"3": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"4": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_SBStorageToken"
		},
		"5": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_SBStorageToken"
		},
		"6": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"7": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_check_SBChannelHandle"
		},
		"8": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_check_SBChannelHandle"
		},
		"9": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"10": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_SBChannelHandle"
		},
		"11": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_SBChannelHandle"
		},
		"12": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"13": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_check_SBChannelData"
		},
		"14": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_check_SBChannelData"
		},
		"15": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"16": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_SBChannelData"
		},
		"17": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_SBChannelData"
		},
		"18": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"19": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_Message"
		},
		"20": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_Message"
		},
		"21": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"22": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_ChannelApiBody"
		},
		"23": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_ChannelApiBody"
		},
		"24": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "body"
		},
		"25": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_ChannelMessage"
		},
		"26": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_ChannelMessage"
		},
		"27": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "body"
		},
		"28": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "stripChannelMessage"
		},
		"29": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "stripChannelMessage"
		},
		"30": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msg"
		},
		"31": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "serverMode"
		},
		"32": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_check_SBObjectHandle"
		},
		"33": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_check_SBObjectHandle"
		},
		"34": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "h"
		},
		"35": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_SBObjectHandle"
		},
		"36": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "validate_SBObjectHandle"
		},
		"37": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "h"
		},
		"38": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "stringify_SBObjectHandle"
		},
		"39": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "stringify_SBObjectHandle"
		},
		"40": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "h"
		},
		"41": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "jsonParseWrapper"
		},
		"42": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "jsonParseWrapper"
		},
		"43": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "str"
		},
		"44": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "loc"
		},
		"45": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "reviver"
		},
		"46": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"47": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"48": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "this"
		},
		"49": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"50": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"51": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "jsonOrString"
		},
		"52": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "jsonOrString"
		},
		"53": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "str"
		},
		"54": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "compareBuffers"
		},
		"55": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "compareBuffers"
		},
		"56": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "a"
		},
		"57": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b"
		},
		"58": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "getRandomValues"
		},
		"59": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "getRandomValues"
		},
		"60": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"61": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBApiFetch"
		},
		"62": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBApiFetch"
		},
		"63": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "input"
		},
		"64": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "init"
		},
		"65": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "isBase62Encoded"
		},
		"66": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "isBase62Encoded"
		},
		"67": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"68": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToBase64"
		},
		"69": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToBase64"
		},
		"70": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"71": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToBase62"
		},
		"72": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToBase62"
		},
		"73": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"74": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b32encode"
		},
		"75": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b32encode"
		},
		"76": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "num"
		},
		"77": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b32process"
		},
		"78": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b32process"
		},
		"79": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "str"
		},
		"80": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b32decode"
		},
		"81": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b32decode"
		},
		"82": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "encoded"
		},
		"83": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "assemblePayload"
		},
		"84": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "assemblePayload"
		},
		"85": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"86": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractPayload"
		},
		"87": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractPayload"
		},
		"88": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"89": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "hydrateKey"
		},
		"90": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "hydrateKey"
		},
		"91": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "privKey"
		},
		"92": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "pubKey"
		},
		"93": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Memoize"
		},
		"94": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Memoize"
		},
		"95": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "target"
		},
		"96": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "propertyKey"
		},
		"97": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "descriptor"
		},
		"98": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Ready"
		},
		"99": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Ready"
		},
		"100": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "target"
		},
		"101": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "propertyKey"
		},
		"102": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "descriptor"
		},
		"103": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "NEW_CHANNEL_MINIMUM_BUDGET"
		},
		"104": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBStorageTokenPrefix"
		},
		"105": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBStorageToken"
		},
		"106": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBStorageToken.hash"
		},
		"107": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBStorageToken.size"
		},
		"108": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBStorageToken.motherChannel"
		},
		"109": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBStorageToken.created"
		},
		"110": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBStorageToken.used"
		},
		"111": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBStorageToken.[SB_STORAGE_TOKEN_SYMBOL]"
		},
		"112": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle"
		},
		"113": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle.userPrivateKey"
		},
		"114": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle.channelId"
		},
		"115": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle.channelServer"
		},
		"116": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle.channelData"
		},
		"117": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle.[SB_CHANNEL_HANDLE_SYMBOL]"
		},
		"118": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelData"
		},
		"119": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelData.channelId"
		},
		"120": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelData.ownerPublicKey"
		},
		"121": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelData.storageToken"
		},
		"122": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBStorageTokenHash"
		},
		"123": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Message"
		},
		"124": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Message.body"
		},
		"125": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Message.channelId"
		},
		"126": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Message.sender"
		},
		"127": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Message.messageTo"
		},
		"128": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Message.senderPublicKey"
		},
		"129": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Message.senderTimestamp"
		},
		"130": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Message.serverTimestamp"
		},
		"131": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Message.eol"
		},
		"132": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Message._id"
		},
		"133": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApiBody"
		},
		"134": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApiBody.channelId"
		},
		"135": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApiBody.path"
		},
		"136": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApiBody.userId"
		},
		"137": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApiBody.userPublicKey"
		},
		"138": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApiBody.isOwner"
		},
		"139": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApiBody.timestamp"
		},
		"140": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApiBody.sign"
		},
		"141": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApiBody.apiPayloadBuf"
		},
		"142": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApiBody.apiPayload"
		},
		"143": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelApiBody.[SB_CHANNEL_API_BODY_SYMBOL]"
		},
		"144": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage"
		},
		"145": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.f"
		},
		"146": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.c"
		},
		"147": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.iv"
		},
		"148": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.salt"
		},
		"149": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.s"
		},
		"150": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.ts"
		},
		"151": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.channelId"
		},
		"152": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.i2"
		},
		"153": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.sts"
		},
		"154": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.timestampPrefix"
		},
		"155": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage._id"
		},
		"156": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.unencryptedContents"
		},
		"157": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.stringMessage"
		},
		"158": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.ready"
		},
		"159": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.error"
		},
		"160": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.t"
		},
		"161": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.ttl"
		},
		"162": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.protocol"
		},
		"163": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.[SB_CHANNEL_MESSAGE_SYMBOL]"
		},
		"164": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData"
		},
		"165": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.channelId"
		},
		"166": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.channelData"
		},
		"167": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.capacity"
		},
		"168": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.locked"
		},
		"169": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.accepted"
		},
		"170": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.visitors"
		},
		"171": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.storageLimit"
		},
		"172": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.motherChannel"
		},
		"173": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.latestTimestamp"
		},
		"174": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptParams"
		},
		"175": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptParams.name"
		},
		"176": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptParams.iv"
		},
		"177": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptParams.additionalData"
		},
		"178": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptParams.tagLength"
		},
		"179": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageTtl"
		},
		"180": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msgTtlToSeconds"
		},
		"181": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msgTtlToString"
		},
		"182": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleVersions"
		},
		"183": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle"
		},
		"184": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.id"
		},
		"185": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.verification"
		},
		"186": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.version"
		},
		"187": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.key"
		},
		"188": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.iv"
		},
		"189": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.salt"
		},
		"190": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.storageServer"
		},
		"191": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.data"
		},
		"192": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.payload"
		},
		"193": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.fileName"
		},
		"194": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.dateAndTime"
		},
		"195": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.fileType"
		},
		"196": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.lastModified"
		},
		"197": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.actualSize"
		},
		"198": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.savedSize"
		},
		"199": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.type"
		},
		"200": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.[SB_OBJECT_HANDLE_SYMBOL]"
		},
		"201": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384Hash"
		},
		"202": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBUserId"
		},
		"203": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelId"
		},
		"204": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBUserPublicKey"
		},
		"205": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBUserPrivateKey"
		},
		"206": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory"
		},
		"207": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.type"
		},
		"208": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.version"
		},
		"209": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.channelId"
		},
		"210": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.ownerPublicKey"
		},
		"211": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.created"
		},
		"212": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.channelServer"
		},
		"213": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.from"
		},
		"214": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.to"
		},
		"215": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.count"
		},
		"216": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistoryEntry"
		},
		"217": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistoryEntry.type"
		},
		"218": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistoryEntry.messages"
		},
		"219": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.version"
		},
		"220": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.channelId"
		},
		"221": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.ownerPublicKey"
		},
		"222": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.created"
		},
		"223": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.channelServer"
		},
		"224": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.from"
		},
		"225": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.to"
		},
		"226": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.count"
		},
		"227": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistoryDirectory"
		},
		"228": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistoryDirectory.type"
		},
		"229": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistoryDirectory.depth"
		},
		"230": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistoryDirectory.lastModified"
		},
		"231": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistoryDirectory.shards"
		},
		"232": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistoryDirectory.subdirectories"
		},
		"233": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.version"
		},
		"234": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.channelId"
		},
		"235": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.ownerPublicKey"
		},
		"236": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.created"
		},
		"237": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.channelServer"
		},
		"238": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.from"
		},
		"239": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.to"
		},
		"240": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageHistory.count"
		},
		"241": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus"
		},
		"244": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.bus"
		},
		"245": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"246": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.__index"
		},
		"251": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.subscribe"
		},
		"252": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.subscribe"
		},
		"253": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "event"
		},
		"254": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handler"
		},
		"255": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.unsubscribe"
		},
		"256": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.unsubscribe"
		},
		"257": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "event"
		},
		"258": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handler"
		},
		"259": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.publish"
		},
		"260": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.publish"
		},
		"261": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "event"
		},
		"262": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "args"
		},
		"263": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue"
		},
		"266": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue.T"
		},
		"278": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue.enqueue"
		},
		"279": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue.enqueue"
		},
		"280": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "item"
		},
		"281": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue.dequeue"
		},
		"282": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue.dequeue"
		},
		"283": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue.isEmpty"
		},
		"284": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue.isEmpty"
		},
		"285": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue.close"
		},
		"286": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue.close"
		},
		"287": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "reason"
		},
		"288": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue.drain"
		},
		"289": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue.drain"
		},
		"290": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "reason"
		},
		"291": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageQueue.T"
		},
		"292": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBError"
		},
		"293": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBError.__constructor"
		},
		"294": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBError"
		},
		"295": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "message"
		},
		"296": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64url"
		},
		"297": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Base62Encoded"
		},
		"298": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"299": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type._brand"
		},
		"300": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62"
		},
		"301": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b62regex"
		},
		"302": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62regex"
		},
		"303": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "KeyPrefix"
		},
		"304": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "KeyPrefix.SBPublicKey"
		},
		"305": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "KeyPrefix.SBPrivateKey"
		},
		"306": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "KeyPrefix.SBDehydratedKey"
		},
		"307": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto"
		},
		"310": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateIdKey"
		},
		"311": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateIdKey"
		},
		"312": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buf"
		},
		"313": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"314": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.idBinary"
		},
		"315": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.keyMaterial"
		},
		"316": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateKeys"
		},
		"317": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateKeys"
		},
		"318": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.importKey"
		},
		"319": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.importKey"
		},
		"320": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "format"
		},
		"321": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"322": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "type"
		},
		"323": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractable"
		},
		"324": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keyUsages"
		},
		"325": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.exportKey"
		},
		"326": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.exportKey"
		},
		"327": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "format"
		},
		"328": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"329": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.encrypt"
		},
		"330": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.encrypt"
		},
		"331": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"332": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"333": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "params"
		},
		"334": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.wrap"
		},
		"335": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.wrap"
		},
		"336": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "body"
		},
		"337": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sender"
		},
		"338": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "encryptionKey"
		},
		"339": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "salt"
		},
		"340": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "signingKey"
		},
		"341": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.sign"
		},
		"342": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.sign"
		},
		"343": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "signKey"
		},
		"344": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "contents"
		},
		"345": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.verify"
		},
		"346": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.verify"
		},
		"347": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "verifyKey"
		},
		"348": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sign"
		},
		"349": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "contents"
		},
		"350": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.str2ab"
		},
		"351": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.str2ab"
		},
		"352": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "string"
		},
		"353": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.ab2str"
		},
		"354": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.ab2str"
		},
		"355": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"356": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sbCrypto"
		},
		"357": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBProtocol"
		},
		"358": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBProtocol.setChannel"
		},
		"359": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBProtocol.setChannel"
		},
		"360": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channel"
		},
		"361": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBProtocol.encryptionKey"
		},
		"362": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBProtocol.encryptionKey"
		},
		"363": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msg"
		},
		"364": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBProtocol.decryptionKey"
		},
		"365": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBProtocol.decryptionKey"
		},
		"366": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channel"
		},
		"367": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msg"
		},
		"368": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_KeyInfo"
		},
		"369": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_KeyInfo.salt1"
		},
		"370": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_KeyInfo.salt2"
		},
		"371": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_KeyInfo.iterations1"
		},
		"372": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_KeyInfo.iterations2"
		},
		"373": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_KeyInfo.hash1"
		},
		"374": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_KeyInfo.hash2"
		},
		"375": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_KeyInfo.summary"
		},
		"376": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256"
		},
		"377": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256.genKey"
		},
		"378": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256.genKey"
		},
		"379": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256.__constructor"
		},
		"380": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256"
		},
		"381": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "passphrase"
		},
		"382": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keyInfo"
		},
		"385": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256.setChannel"
		},
		"386": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256.setChannel"
		},
		"387": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_channel"
		},
		"388": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256.initializeMasterKey"
		},
		"389": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256.initializeMasterKey"
		},
		"390": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "passphrase"
		},
		"394": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256.encryptionKey"
		},
		"395": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256.encryptionKey"
		},
		"396": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msg"
		},
		"397": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256.decryptionKey"
		},
		"398": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_AES_GCM_256.decryptionKey"
		},
		"399": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_channel"
		},
		"400": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msg"
		},
		"401": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_ECDH"
		},
		"402": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_ECDH.__constructor"
		},
		"403": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_ECDH"
		},
		"406": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_ECDH.setChannel"
		},
		"407": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_ECDH.setChannel"
		},
		"408": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channel"
		},
		"409": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_ECDH.encryptionKey"
		},
		"410": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_ECDH.encryptionKey"
		},
		"411": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msg"
		},
		"412": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_ECDH.decryptionKey"
		},
		"413": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Protocol_ECDH.decryptionKey"
		},
		"414": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channel"
		},
		"415": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msg"
		},
		"421": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys"
		},
		"422": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.ReadyFlag"
		},
		"423": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.__constructor"
		},
		"424": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys"
		},
		"425": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handleOrKey"
		},
		"427": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.sbChannelKeysReady"
		},
		"429": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelServer"
		},
		"430": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.ready"
		},
		"431": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.ready"
		},
		"432": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.SBChannelKeysReadyFlag"
		},
		"433": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.SBChannelKeysReadyFlag"
		},
		"434": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelData"
		},
		"435": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelData"
		},
		"436": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.owner"
		},
		"437": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.owner"
		},
		"438": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelId"
		},
		"439": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelId"
		},
		"440": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.handle"
		},
		"441": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.handle"
		},
		"442": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.buildApiBody"
		},
		"443": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.buildApiBody"
		},
		"444": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "path"
		},
		"445": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "apiPayload"
		},
		"446": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.callApi"
		},
		"447": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.callApi"
		},
		"448": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "path"
		},
		"449": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.callApi"
		},
		"450": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "path"
		},
		"451": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "apiPayload"
		},
		"452": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.sb384Ready"
		},
		"463": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.errorState"
		},
		"464": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.SB384ReadyFlag"
		},
		"465": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.SB384ReadyFlag"
		},
		"466": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"467": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"468": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"469": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"470": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hashB32"
		},
		"471": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hashB32"
		},
		"472": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"473": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"474": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"475": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"476": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"477": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"478": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.signKey"
		},
		"479": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.signKey"
		},
		"480": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.publicKey"
		},
		"481": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.publicKey"
		},
		"482": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPrivate"
		},
		"483": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPrivate"
		},
		"484": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPublic"
		},
		"485": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPublic"
		},
		"486": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ySign"
		},
		"487": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ySign"
		},
		"488": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPublicKey"
		},
		"489": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPublicKey"
		},
		"490": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKey"
		},
		"491": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKey"
		},
		"492": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKeyDehydrated"
		},
		"493": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKeyDehydrated"
		},
		"494": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageOptions"
		},
		"495": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageOptions.ttl"
		},
		"496": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageOptions.sendTo"
		},
		"497": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageOptions.subChannel"
		},
		"498": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageOptions.protocol"
		},
		"499": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageOptions.sendString"
		},
		"500": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageOptions.retries"
		},
		"501": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Shard"
		},
		"502": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Shard.version"
		},
		"503": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Shard.id"
		},
		"504": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Shard.iv"
		},
		"505": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Shard.salt"
		},
		"506": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Shard.actualSize"
		},
		"507": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Shard.data"
		},
		"508": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi"
		},
		"509": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.padBuf"
		},
		"510": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.padBuf"
		},
		"511": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buf"
		},
		"512": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.getObjectKey"
		},
		"513": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.getObjectKey"
		},
		"514": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "fileHashBuffer"
		},
		"515": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "salt"
		},
		"516": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.getData"
		},
		"517": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.getData"
		},
		"518": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handle"
		},
		"519": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.getPayload"
		},
		"520": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.getPayload"
		},
		"521": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handle"
		},
		"522": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.__constructor"
		},
		"523": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi"
		},
		"524": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "stringOrPromise"
		},
		"526": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.getStorageServer"
		},
		"527": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.getStorageServer"
		},
		"531": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.storeData"
		},
		"532": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.storeData"
		},
		"533": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "contents"
		},
		"534": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "budgetSource"
		},
		"540": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.fetchData"
		},
		"541": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "StorageApi.fetchData"
		},
		"542": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handle"
		},
		"543": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384"
		},
		"544": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ReadyFlag"
		},
		"545": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.__constructor"
		},
		"546": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384"
		},
		"547": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"548": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "forcePrivate"
		},
		"549": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.sb384Ready"
		},
		"560": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.errorState"
		},
		"561": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.SB384ReadyFlag"
		},
		"562": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.SB384ReadyFlag"
		},
		"563": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ready"
		},
		"564": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ready"
		},
		"565": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"566": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"567": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"568": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"569": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hashB32"
		},
		"570": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hashB32"
		},
		"571": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"572": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"573": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"574": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"575": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"576": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"577": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.signKey"
		},
		"578": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.signKey"
		},
		"579": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.publicKey"
		},
		"580": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.publicKey"
		},
		"581": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPrivate"
		},
		"582": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPrivate"
		},
		"583": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPublic"
		},
		"584": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPublic"
		},
		"585": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ySign"
		},
		"586": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ySign"
		},
		"587": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPublicKey"
		},
		"588": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPublicKey"
		},
		"589": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKey"
		},
		"590": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKey"
		},
		"591": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKeyDehydrated"
		},
		"592": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKeyDehydrated"
		},
		"593": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel"
		},
		"594": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.ReadyFlag"
		},
		"595": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.defaultProtocol"
		},
		"596": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.LOWEST_TIMESTAMP"
		},
		"597": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.HIGHEST_TIMESTAMP"
		},
		"598": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.timestampToBase4String"
		},
		"599": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.timestampToBase4String"
		},
		"600": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "tsNum"
		},
		"601": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.base4stringToDate"
		},
		"602": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.base4stringToDate"
		},
		"603": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "tsStr"
		},
		"604": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLexicalExtremes"
		},
		"605": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLexicalExtremes"
		},
		"606": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "T"
		},
		"607": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "set"
		},
		"608": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.messageKeySetToPrefix"
		},
		"609": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.messageKeySetToPrefix"
		},
		"610": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keys"
		},
		"611": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.timestampLongestPrefix"
		},
		"612": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.timestampLongestPrefix"
		},
		"613": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s1"
		},
		"614": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s2"
		},
		"615": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.timestampRegex"
		},
		"616": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.base4StringToTimestamp"
		},
		"617": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.base4StringToTimestamp"
		},
		"618": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "tsStr"
		},
		"619": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.base4StringToDate"
		},
		"620": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.base4StringToDate"
		},
		"621": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "tsStr"
		},
		"622": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.deComposeMessageKey"
		},
		"623": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.deComposeMessageKey"
		},
		"624": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"625": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"626": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.channelId"
		},
		"627": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.i2"
		},
		"628": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.timestamp"
		},
		"629": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.composeMessageKey"
		},
		"630": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.composeMessageKey"
		},
		"631": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelId"
		},
		"632": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "timestamp"
		},
		"633": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "subChannel"
		},
		"634": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.__constructor"
		},
		"635": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel"
		},
		"636": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel"
		},
		"637": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "newChannel"
		},
		"638": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "protocol"
		},
		"639": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel"
		},
		"640": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"641": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "protocol"
		},
		"642": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel"
		},
		"643": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handle"
		},
		"644": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "protocol"
		},
		"645": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelReady"
		},
		"646": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.locked"
		},
		"647": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.protocol"
		},
		"648": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.visitors"
		},
		"649": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.sendQueue"
		},
		"650": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.isClosed"
		},
		"651": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.ready"
		},
		"652": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.ready"
		},
		"653": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.ChannelReadyFlag"
		},
		"654": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.ChannelReadyFlag"
		},
		"655": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"656": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"657": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.extractMessage"
		},
		"658": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.extractMessage"
		},
		"659": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msgRaw"
		},
		"660": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.extractMessageMap"
		},
		"661": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.extractMessageMap"
		},
		"662": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msgMap"
		},
		"663": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.packageMessage"
		},
		"664": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.packageMessage"
		},
		"665": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "contents"
		},
		"666": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"667": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.finalizeMessage"
		},
		"668": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.finalizeMessage"
		},
		"669": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msg"
		},
		"673": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.send"
		},
		"674": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.send"
		},
		"675": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "contents"
		},
		"676": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"677": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.create"
		},
		"678": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.create"
		},
		"679": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "storageToken"
		},
		"680": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelServer"
		},
		"681": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLastMessageTimes"
		},
		"682": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLastMessageTimes"
		},
		"683": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLatestTimestamp"
		},
		"684": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLatestTimestamp"
		},
		"685": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.messageQueueManager"
		},
		"686": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.messageQueueManager"
		},
		"687": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.close"
		},
		"688": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.close"
		},
		"689": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMessageKeys"
		},
		"690": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMessageKeys"
		},
		"691": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "prefix"
		},
		"692": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"693": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.keys"
		},
		"694": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.historyShard"
		},
		"695": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getRawMessageMap"
		},
		"696": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getRawMessageMap"
		},
		"697": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "messageKeys"
		},
		"698": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMessageMap"
		},
		"699": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMessageMap"
		},
		"700": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "messageKeys"
		},
		"701": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getHistory"
		},
		"702": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getHistory"
		},
		"703": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.setPage"
		},
		"704": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.setPage"
		},
		"705": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"706": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"707": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.page"
		},
		"708": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.prefix"
		},
		"709": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.type"
		},
		"710": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getPage"
		},
		"711": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getPage"
		},
		"712": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.acceptVisitor"
		},
		"713": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.acceptVisitor"
		},
		"714": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "userId"
		},
		"715": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getCapacity"
		},
		"716": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getCapacity"
		},
		"717": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getAdminData"
		},
		"718": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getAdminData"
		},
		"719": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMother"
		},
		"720": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMother"
		},
		"721": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.isLocked"
		},
		"722": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.isLocked"
		},
		"723": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.lock"
		},
		"724": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.lock"
		},
		"725": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"726": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.success"
		},
		"727": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.updateCapacity"
		},
		"728": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.updateCapacity"
		},
		"729": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "capacity"
		},
		"730": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getChannelKeys"
		},
		"731": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getChannelKeys"
		},
		"732": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getPubKeys"
		},
		"733": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getPubKeys"
		},
		"734": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageLimit"
		},
		"735": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageLimit"
		},
		"736": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageToken"
		},
		"737": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageToken"
		},
		"738": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "size"
		},
		"739": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.budd"
		},
		"740": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.budd"
		},
		"741": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"742": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"743": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.targetChannel"
		},
		"744": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.size"
		},
		"746": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.sbChannelKeysReady"
		},
		"748": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelServer"
		},
		"749": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.SBChannelKeysReadyFlag"
		},
		"750": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.SBChannelKeysReadyFlag"
		},
		"751": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelData"
		},
		"752": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelData"
		},
		"753": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.owner"
		},
		"754": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.owner"
		},
		"755": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelId"
		},
		"756": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelId"
		},
		"757": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.handle"
		},
		"758": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.handle"
		},
		"759": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.buildApiBody"
		},
		"760": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.buildApiBody"
		},
		"761": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "path"
		},
		"762": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "apiPayload"
		},
		"763": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.callApi"
		},
		"764": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.callApi"
		},
		"765": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "path"
		},
		"766": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.callApi"
		},
		"767": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "path"
		},
		"768": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "apiPayload"
		},
		"769": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.sb384Ready"
		},
		"780": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.errorState"
		},
		"781": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.SB384ReadyFlag"
		},
		"782": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.SB384ReadyFlag"
		},
		"783": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"784": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"785": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"786": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"787": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hashB32"
		},
		"788": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hashB32"
		},
		"789": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"790": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"791": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"792": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"793": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"794": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"795": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.signKey"
		},
		"796": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.signKey"
		},
		"797": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.publicKey"
		},
		"798": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.publicKey"
		},
		"799": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPrivate"
		},
		"800": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPrivate"
		},
		"801": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPublic"
		},
		"802": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPublic"
		},
		"803": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ySign"
		},
		"804": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ySign"
		},
		"805": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPublicKey"
		},
		"806": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPublicKey"
		},
		"807": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKey"
		},
		"808": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKey"
		},
		"809": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKeyDehydrated"
		},
		"810": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKeyDehydrated"
		},
		"811": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket"
		},
		"812": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.ReadyFlag"
		},
		"813": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.defaultProtocol"
		},
		"814": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.LOWEST_TIMESTAMP"
		},
		"815": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.HIGHEST_TIMESTAMP"
		},
		"816": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.timestampToBase4String"
		},
		"817": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.timestampToBase4String"
		},
		"818": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "tsNum"
		},
		"819": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.base4stringToDate"
		},
		"820": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.base4stringToDate"
		},
		"821": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "tsStr"
		},
		"822": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLexicalExtremes"
		},
		"823": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLexicalExtremes"
		},
		"824": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "T"
		},
		"825": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "set"
		},
		"826": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.messageKeySetToPrefix"
		},
		"827": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.messageKeySetToPrefix"
		},
		"828": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keys"
		},
		"829": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.timestampLongestPrefix"
		},
		"830": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.timestampLongestPrefix"
		},
		"831": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s1"
		},
		"832": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s2"
		},
		"833": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.timestampRegex"
		},
		"834": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.base4StringToTimestamp"
		},
		"835": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.base4StringToTimestamp"
		},
		"836": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "tsStr"
		},
		"837": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.base4StringToDate"
		},
		"838": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.base4StringToDate"
		},
		"839": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "tsStr"
		},
		"840": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.deComposeMessageKey"
		},
		"841": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.deComposeMessageKey"
		},
		"842": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"843": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"844": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.channelId"
		},
		"845": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.i2"
		},
		"846": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.timestamp"
		},
		"847": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.composeMessageKey"
		},
		"848": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.composeMessageKey"
		},
		"849": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelId"
		},
		"850": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "timestamp"
		},
		"851": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "subChannel"
		},
		"852": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.__constructor"
		},
		"853": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket"
		},
		"854": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handleOrKey"
		},
		"855": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "onMessage"
		},
		"856": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"857": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"858": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m"
		},
		"859": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "protocol"
		},
		"860": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.channelSocketReady"
		},
		"863": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.onMessage"
		},
		"864": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.onMessage"
		},
		"865": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_m"
		},
		"872": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.lastTimestampPrefix"
		},
		"881": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.ready"
		},
		"882": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.ready"
		},
		"883": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.ChannelSocketReadyFlag"
		},
		"884": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.ChannelSocketReadyFlag"
		},
		"885": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.status"
		},
		"886": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.status"
		},
		"887": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.enableTrace"
		},
		"888": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.enableTrace"
		},
		"889": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b"
		},
		"893": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.send"
		},
		"894": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.send"
		},
		"895": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "contents"
		},
		"896": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"897": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.reset"
		},
		"898": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.reset"
		},
		"899": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.close"
		},
		"900": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.close"
		},
		"901": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelReady"
		},
		"902": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.locked"
		},
		"903": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.protocol"
		},
		"904": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.visitors"
		},
		"905": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.sendQueue"
		},
		"906": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.isClosed"
		},
		"907": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.ChannelReadyFlag"
		},
		"908": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.ChannelReadyFlag"
		},
		"909": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"910": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"911": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.extractMessage"
		},
		"912": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.extractMessage"
		},
		"913": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msgRaw"
		},
		"914": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.extractMessageMap"
		},
		"915": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.extractMessageMap"
		},
		"916": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msgMap"
		},
		"917": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.packageMessage"
		},
		"918": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.packageMessage"
		},
		"919": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "contents"
		},
		"920": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"921": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.finalizeMessage"
		},
		"922": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.finalizeMessage"
		},
		"923": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msg"
		},
		"927": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.create"
		},
		"928": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.create"
		},
		"929": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "storageToken"
		},
		"930": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelServer"
		},
		"931": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLastMessageTimes"
		},
		"932": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLastMessageTimes"
		},
		"933": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLatestTimestamp"
		},
		"934": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLatestTimestamp"
		},
		"935": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.messageQueueManager"
		},
		"936": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.messageQueueManager"
		},
		"937": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMessageKeys"
		},
		"938": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMessageKeys"
		},
		"939": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "prefix"
		},
		"940": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"941": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.keys"
		},
		"942": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.historyShard"
		},
		"943": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getRawMessageMap"
		},
		"944": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getRawMessageMap"
		},
		"945": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "messageKeys"
		},
		"946": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMessageMap"
		},
		"947": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMessageMap"
		},
		"948": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "messageKeys"
		},
		"949": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getHistory"
		},
		"950": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getHistory"
		},
		"951": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.setPage"
		},
		"952": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.setPage"
		},
		"953": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"954": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"955": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.page"
		},
		"956": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.prefix"
		},
		"957": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.type"
		},
		"958": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getPage"
		},
		"959": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getPage"
		},
		"960": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.acceptVisitor"
		},
		"961": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.acceptVisitor"
		},
		"962": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "userId"
		},
		"963": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getCapacity"
		},
		"964": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getCapacity"
		},
		"965": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getAdminData"
		},
		"966": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getAdminData"
		},
		"967": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMother"
		},
		"968": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMother"
		},
		"969": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.isLocked"
		},
		"970": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.isLocked"
		},
		"971": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.lock"
		},
		"972": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.lock"
		},
		"973": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"974": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.success"
		},
		"975": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.updateCapacity"
		},
		"976": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.updateCapacity"
		},
		"977": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "capacity"
		},
		"978": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getChannelKeys"
		},
		"979": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getChannelKeys"
		},
		"980": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getPubKeys"
		},
		"981": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getPubKeys"
		},
		"982": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageLimit"
		},
		"983": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageLimit"
		},
		"984": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageToken"
		},
		"985": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageToken"
		},
		"986": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "size"
		},
		"987": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.budd"
		},
		"988": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.budd"
		},
		"989": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"990": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"991": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.targetChannel"
		},
		"992": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.size"
		},
		"994": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.sbChannelKeysReady"
		},
		"996": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelServer"
		},
		"997": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.SBChannelKeysReadyFlag"
		},
		"998": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.SBChannelKeysReadyFlag"
		},
		"999": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelData"
		},
		"1000": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelData"
		},
		"1001": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.owner"
		},
		"1002": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.owner"
		},
		"1003": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelId"
		},
		"1004": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelId"
		},
		"1005": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.handle"
		},
		"1006": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.handle"
		},
		"1007": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.buildApiBody"
		},
		"1008": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.buildApiBody"
		},
		"1009": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "path"
		},
		"1010": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "apiPayload"
		},
		"1011": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.callApi"
		},
		"1012": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.callApi"
		},
		"1013": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "path"
		},
		"1014": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.callApi"
		},
		"1015": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "path"
		},
		"1016": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "apiPayload"
		},
		"1017": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.sb384Ready"
		},
		"1028": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.errorState"
		},
		"1029": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.SB384ReadyFlag"
		},
		"1030": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.SB384ReadyFlag"
		},
		"1031": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"1032": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"1033": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"1034": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"1035": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hashB32"
		},
		"1036": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hashB32"
		},
		"1037": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"1038": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"1039": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"1040": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"1041": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"1042": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.privateKey"
		},
		"1043": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.signKey"
		},
		"1044": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.signKey"
		},
		"1045": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.publicKey"
		},
		"1046": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.publicKey"
		},
		"1047": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPrivate"
		},
		"1048": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPrivate"
		},
		"1049": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPublic"
		},
		"1050": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwkPublic"
		},
		"1051": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ySign"
		},
		"1052": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ySign"
		},
		"1053": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPublicKey"
		},
		"1054": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPublicKey"
		},
		"1055": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKey"
		},
		"1056": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKey"
		},
		"1057": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKeyDehydrated"
		},
		"1058": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userPrivateKeyDehydrated"
		},
		"1059": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra"
		},
		"1060": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.lastTimeStamp"
		},
		"1061": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.activeFetches"
		},
		"1063": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.isShutdown"
		},
		"1064": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.lastTimestampPrefix"
		},
		"1066": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.onlineStatus"
		},
		"1067": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.defaultChannelServer"
		},
		"1068": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.dateNow"
		},
		"1069": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.dateNow"
		},
		"1070": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.heardFromServer"
		},
		"1071": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.heardFromServer"
		},
		"1072": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.checkUnknownNetworkStatus"
		},
		"1073": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.checkUnknownNetworkStatus"
		},
		"1074": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.haveNotHeardFromServer"
		},
		"1075": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.haveNotHeardFromServer"
		},
		"1076": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.addChannelSocket"
		},
		"1077": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.addChannelSocket"
		},
		"1078": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "socket"
		},
		"1079": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.removeChannelSocket"
		},
		"1080": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.removeChannelSocket"
		},
		"1081": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "socket"
		},
		"1082": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.closeAll"
		},
		"1083": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.closeAll"
		},
		"1084": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"1085": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"1086": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "eventName"
		},
		"1087": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "listener"
		},
		"1088": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EventEmitter.off"
		},
		"1089": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EventEmitter.off"
		},
		"1090": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "eventName"
		},
		"1091": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "listener"
		},
		"1092": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EventEmitter.emit"
		},
		"1093": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EventEmitter.emit"
		},
		"1094": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "eventName"
		},
		"1095": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "args"
		},
		"1096": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.__constructor"
		},
		"1097": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra"
		},
		"1098": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelServer"
		},
		"1099": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"1100": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"1101": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.DEBUG"
		},
		"1102": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.DEBUG2"
		},
		"1103": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.sbFetch"
		},
		"1104": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"1105": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"1106": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "input"
		},
		"1107": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "init"
		},
		"1112": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.getPage"
		},
		"1113": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.getPage"
		},
		"1114": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "prefix"
		},
		"1115": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.create"
		},
		"1116": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.create"
		},
		"1117": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "budgetChannel"
		},
		"1118": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.create"
		},
		"1119": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "storageToken"
		},
		"1120": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.connect"
		},
		"1121": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.connect"
		},
		"1122": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handleOrKey"
		},
		"1123": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.connect"
		},
		"1124": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handleOrKey"
		},
		"1125": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "onMessage"
		},
		"1126": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"1127": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"1128": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m"
		},
		"1129": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.storage"
		},
		"1130": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.storage"
		},
		"1131": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.getStorageServer"
		},
		"1132": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.getStorageServer"
		},
		"1133": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.crypto"
		},
		"1134": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.crypto"
		},
		"1135": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.version"
		},
		"1136": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.version"
		},
		"1137": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase64url"
		},
		"1138": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase64url"
		},
		"1139": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"1140": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToArrayBuffer"
		},
		"1141": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToArrayBuffer"
		},
		"1142": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"1143": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase62"
		},
		"1144": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase62"
		},
		"1145": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"1146": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToArrayBuffer"
		},
		"1147": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToArrayBuffer"
		},
		"1148": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"1149": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "version"
		},
		"1150": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "setDebugLevel"
		},
		"1151": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "setDebugLevel"
		},
		"1152": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "dbg1"
		},
		"1153": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "dbg2"
		},
		"1154": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB"
		},
		"1155": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object"
		},
		"1156": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.Snackabra"
		},
		"1157": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.Channel"
		},
		"1158": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.SBCrypto"
		},
		"1159": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.SB384"
		},
		"1160": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.arrayBufferToBase64url"
		},
		"1161": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase64url"
		},
		"1162": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase64url"
		},
		"1163": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"1164": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.base64ToArrayBuffer"
		},
		"1165": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToArrayBuffer"
		},
		"1166": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToArrayBuffer"
		},
		"1167": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"1168": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.arrayBufferToBase62"
		},
		"1169": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase62"
		},
		"1170": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase62"
		},
		"1171": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"1172": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.base62ToArrayBuffer"
		},
		"1173": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToArrayBuffer"
		},
		"1174": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToArrayBuffer"
		},
		"1175": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"1176": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.sbCrypto"
		},
		"1177": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.version"
		},
		"1178": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.setDebugLevel"
		},
		"1179": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "setDebugLevel"
		},
		"1180": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "setDebugLevel"
		},
		"1181": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "dbg1"
		},
		"1182": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "dbg2"
		}
	}
}