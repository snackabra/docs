{
	"id": 0,
	"name": "JSLib Reference Manual",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 128,
			"name": "Interfaces",
			"variant": "declaration",
			"kind": 4,
			"flags": {},
			"children": [
				{
					"id": 129,
					"name": "SBObjectHandle_base",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 141,
							"name": "[SB_OBJECT_HANDLE_SYMBOL]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 139,
							"name": "actualSize",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 136,
							"name": "dateAndTime",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 135,
							"name": "fileName",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 137,
							"name": "fileType",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 133,
							"name": "iv",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 138,
							"name": "lastModified",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 134,
							"name": "salt",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 140,
							"name": "savedSize",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 131,
							"name": "type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": 126,
								"name": "SBObjectType",
								"package": "snackabra"
							}
						},
						{
							"id": 132,
							"name": "verification",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 130,
							"name": "version",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": 127,
								"name": "SBObjectHandleVersions",
								"package": "snackabra"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								141,
								139,
								136,
								135,
								137,
								133,
								138,
								134,
								140,
								131,
								132,
								130
							]
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"target": 142,
							"name": "SBObjectHandle_v1"
						},
						{
							"type": "reference",
							"target": 159,
							"name": "SBObjectHandle_v2"
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"target": 627,
							"name": "SBObjectHandle"
						}
					]
				},
				{
					"id": 142,
					"name": "SBObjectHandle_v1",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 158,
							"name": "[SB_OBJECT_HANDLE_SYMBOL]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 141,
								"name": "SBObjectHandle_base.[SB_OBJECT_HANDLE_SYMBOL]"
							}
						},
						{
							"id": 156,
							"name": "actualSize",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 139,
								"name": "SBObjectHandle_base.actualSize"
							}
						},
						{
							"id": 153,
							"name": "dateAndTime",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 136,
								"name": "SBObjectHandle_base.dateAndTime"
							}
						},
						{
							"id": 152,
							"name": "fileName",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 135,
								"name": "SBObjectHandle_base.fileName"
							}
						},
						{
							"id": 154,
							"name": "fileType",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 137,
								"name": "SBObjectHandle_base.fileType"
							}
						},
						{
							"id": 144,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 146,
							"name": "id32",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "snackabra-jslib/snackabra.ts",
									"qualifiedName": "Base62Encoded"
								},
								"name": "Base62Encoded",
								"package": "snackabra"
							}
						},
						{
							"id": 150,
							"name": "iv",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 133,
								"name": "SBObjectHandle_base.iv"
							}
						},
						{
							"id": 145,
							"name": "key",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 147,
							"name": "key32",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "snackabra-jslib/snackabra.ts",
									"qualifiedName": "Base62Encoded"
								},
								"name": "Base62Encoded",
								"package": "snackabra"
							}
						},
						{
							"id": 155,
							"name": "lastModified",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 138,
								"name": "SBObjectHandle_base.lastModified"
							}
						},
						{
							"id": 151,
							"name": "salt",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 134,
								"name": "SBObjectHandle_base.salt"
							}
						},
						{
							"id": 157,
							"name": "savedSize",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 140,
								"name": "SBObjectHandle_base.savedSize"
							}
						},
						{
							"id": 148,
							"name": "type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": 126,
								"name": "SBObjectType",
								"package": "snackabra"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 131,
								"name": "SBObjectHandle_base.type"
							}
						},
						{
							"id": 149,
							"name": "verification",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 132,
								"name": "SBObjectHandle_base.verification"
							}
						},
						{
							"id": 143,
							"name": "version",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "literal",
								"value": "1"
							},
							"overwrites": {
								"type": "reference",
								"target": 130,
								"name": "SBObjectHandle_base.version"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								158,
								156,
								153,
								152,
								154,
								144,
								146,
								150,
								145,
								147,
								155,
								151,
								157,
								148,
								149,
								143
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 129,
							"name": "SBObjectHandle_base",
							"package": "snackabra",
							"qualifiedName": "Interfaces.SBObjectHandle_base"
						}
					]
				},
				{
					"id": 159,
					"name": "SBObjectHandle_v2",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 173,
							"name": "[SB_OBJECT_HANDLE_SYMBOL]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 141,
								"name": "SBObjectHandle_base.[SB_OBJECT_HANDLE_SYMBOL]"
							}
						},
						{
							"id": 171,
							"name": "actualSize",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 139,
								"name": "SBObjectHandle_base.actualSize"
							}
						},
						{
							"id": 168,
							"name": "dateAndTime",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 136,
								"name": "SBObjectHandle_base.dateAndTime"
							}
						},
						{
							"id": 167,
							"name": "fileName",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 135,
								"name": "SBObjectHandle_base.fileName"
							}
						},
						{
							"id": 169,
							"name": "fileType",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 137,
								"name": "SBObjectHandle_base.fileType"
							}
						},
						{
							"id": 161,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "snackabra-jslib/snackabra.ts",
									"qualifiedName": "Base62Encoded"
								},
								"name": "Base62Encoded",
								"package": "snackabra"
							}
						},
						{
							"id": 165,
							"name": "iv",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 133,
								"name": "SBObjectHandle_base.iv"
							}
						},
						{
							"id": 162,
							"name": "key",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "snackabra-jslib/snackabra.ts",
									"qualifiedName": "Base62Encoded"
								},
								"name": "Base62Encoded",
								"package": "snackabra"
							}
						},
						{
							"id": 170,
							"name": "lastModified",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 138,
								"name": "SBObjectHandle_base.lastModified"
							}
						},
						{
							"id": 166,
							"name": "salt",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 134,
								"name": "SBObjectHandle_base.salt"
							}
						},
						{
							"id": 172,
							"name": "savedSize",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 140,
								"name": "SBObjectHandle_base.savedSize"
							}
						},
						{
							"id": 163,
							"name": "type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": 126,
								"name": "SBObjectType",
								"package": "snackabra"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 131,
								"name": "SBObjectHandle_base.type"
							}
						},
						{
							"id": 164,
							"name": "verification",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 132,
								"name": "SBObjectHandle_base.verification"
							}
						},
						{
							"id": 160,
							"name": "version",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "literal",
								"value": "2"
							},
							"overwrites": {
								"type": "reference",
								"target": 130,
								"name": "SBObjectHandle_base.version"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								173,
								171,
								168,
								167,
								169,
								161,
								165,
								162,
								170,
								166,
								172,
								163,
								164,
								160
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 129,
							"name": "SBObjectHandle_base",
							"package": "snackabra",
							"qualifiedName": "Interfaces.SBObjectHandle_base"
						}
					]
				},
				{
					"id": 174,
					"name": "SBObjectHandle",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 142,
								"name": "SBObjectHandle_v1",
								"package": "snackabra",
								"qualifiedName": "Interfaces.SBObjectHandle_v1"
							},
							{
								"type": "reference",
								"target": 159,
								"name": "SBObjectHandle_v2",
								"package": "snackabra",
								"qualifiedName": "Interfaces.SBObjectHandle_v2"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [
						129,
						142,
						159
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						174
					]
				}
			]
		},
		{
			"id": 275,
			"name": "Channel",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Channel"
					}
				]
			},
			"children": [
				{
					"id": 276,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 277,
							"name": "new Channel",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Join a channel, taking a channel handle. Returns channel object.\n\nYou must have an identity when connecting, because every single\nmessage is signed by sender.\n\nMost classes in SB follow the \"ready\" template: objects can be used\nright away, but they decide for themselves if they're ready or not.\nThe SB384 state is the *user* of the channel, not the channel\nitself; it has an Owner (also SB384 object), which can be the\nsame as the user/visitor, but that requires finalizing creating\nthe channel to find out (from the channel server).\n\nThe Channel class communicates asynchronously with the channel.\n\nThe ChannelSocket class is a subclass of Channel, and it communicates\nsynchronously (via websockets).\n\nNote that you don't need to worry about what API calls involve race\nconditions and which don't, the library will do that for you.\n\nCurrent (2.x) interface:"
									}
								]
							},
							"parameters": [
								{
									"id": 278,
									"name": "handle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 66,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 275,
								"name": "Channel",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "SBChannelKeys.constructor"
							}
						},
						{
							"id": 279,
							"name": "new Channel",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 280,
									"name": "sbServer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 61,
										"name": "SBServer",
										"package": "snackabra"
									}
								},
								{
									"id": 281,
									"name": "userKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								},
								{
									"id": 282,
									"name": "channelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 275,
								"name": "Channel",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "SBChannelKeys.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.constructor"
					}
				},
				{
					"id": 288,
					"name": "adminData",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "Dictionary"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Dictionary",
						"package": "snackabra"
					}
				},
				{
					"id": 284,
					"name": "channelReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 275,
								"name": "Channel",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 287,
					"name": "locked",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 286,
					"name": "motd",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "''"
				},
				{
					"id": 283,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 275,
								"name": "Channel",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.ready"
					}
				},
				{
					"id": 399,
					"name": "sb384Ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 226,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.sb384Ready"
					}
				},
				{
					"id": 371,
					"name": "sbChannelKeysReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "snackabra-jslib/snackabra.ts",
									"qualifiedName": "SBChannelKeys"
								},
								"name": "SBChannelKeys",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.sbChannelKeysReady"
					}
				},
				{
					"id": 289,
					"name": "verifiedGuest",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 293,
					"name": "api",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 294,
						"name": "api",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "this"
						}
					}
				},
				{
					"id": 389,
					"name": "channelData",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 390,
						"name": "channelData",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 201,
							"name": "ChannelData",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.channelData"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.channelData"
					}
				},
				{
					"id": 393,
					"name": "channelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 394,
						"name": "channelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.channelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.channelId"
					}
				},
				{
					"id": 395,
					"name": "channelServer",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 396,
						"name": "channelServer",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.channelServer"
						}
					},
					"setSignature": {
						"id": 397,
						"name": "channelServer",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"parameters": [
							{
								"id": 398,
								"name": "channelServer",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.channelServer"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.channelServer"
					}
				},
				{
					"id": 385,
					"name": "channelSignKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 386,
						"name": "channelSignKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.channelSignKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.channelSignKey"
					}
				},
				{
					"id": 383,
					"name": "encryptionKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 384,
						"name": "encryptionKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.encryptionKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.encryptionKey"
					}
				},
				{
					"id": 415,
					"name": "exportable_pubKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 416,
						"name": "exportable_pubKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "For 'jwk' format use cases."
								}
							]
						},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.exportable_pubKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.exportable_pubKey"
					}
				},
				{
					"id": 407,
					"name": "hash",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 408,
						"name": "hash",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns a unique identifier for external use, that will be unique\nfor any class or object that uses SB384 as it's root.\n\nThis is deterministic. Important use case is to translate a user id\ninto a channel id (eg the channel that any user id is inherently\nthe owner of).\n\nThe hash is base64 encoding of the SHA-384 hash of the public key,\ntaking the 'x' and 'y' fields. Note that it is slightly restricted, it only\nallows [A-Za-z0-9], eg does not allow the '_' or '-' characters. This makes the\nencoding more practical for end-user interactions like copy-paste. This\nis accomplished by simply re-hashing until the result is valid. This \nreduces the entropy of the channel ID by a neglible amount. \n\nNote this is not b62 encoding, which we use for 256-bit entities. This\nis still ~384 bits (e.g. x and y fields are each 384 bits, but of course\nthe underlying total entropy isn't that (exercise left to the reader).\n\nNOTE: if you ever need to COMPARE hashes, the short version is that\nyou cannot do so in the general case: you need to use sbCrypto.compareHashWithKey()"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.hash"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.hash"
					}
				},
				{
					"id": 411,
					"name": "jwk",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 412,
						"name": "jwk",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.jwk"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.jwk"
					}
				},
				{
					"id": 413,
					"name": "key",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 414,
						"name": "key",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.key"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.key"
					}
				},
				{
					"id": 391,
					"name": "keys",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 392,
						"name": "keys",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 106,
							"name": "ChannelKeys",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.keys"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.keys"
					}
				},
				{
					"id": 387,
					"name": "owner",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 388,
						"name": "owner",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.owner"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.owner"
					}
				},
				{
					"id": 409,
					"name": "ownerChannelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 410,
						"name": "ownerChannelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "ChannelID that corresponds to this, if it's an owner"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.ownerChannelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.ownerChannelId"
					}
				},
				{
					"id": 405,
					"name": "private",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 406,
						"name": "private",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns true if this is a private key, otherwise false.\nWill throw an exception if the object is not ready."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.private"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.private"
					}
				},
				{
					"id": 291,
					"name": "readyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 292,
						"name": "readyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"overwrites": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.readyFlag"
						}
					},
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.readyFlag"
					}
				},
				{
					"id": 419,
					"name": "userId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 420,
						"name": "userId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Somewhat confusing at times, the string version of the user key per se is\ndifferent from \"hash\" (the full public key can be recovered from SBUserId).\nEg this is the public identifier."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.userId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.userId"
					}
				},
				{
					"id": 417,
					"name": "userKeyString",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 418,
						"name": "userKeyString",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Wire format of full info of key (eg private key)."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "SBChannelKeys.userKeyString"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "SBChannelKeys.userKeyString"
					}
				},
				{
					"id": 355,
					"name": "acceptVisitor",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 356,
							"name": "acceptVisitor",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 357,
									"name": "userId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 337,
					"name": "authorize",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 338,
							"name": "authorize",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 339,
									"name": "ownerPublicKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "Dictionary"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"package": "snackabra"
									}
								},
								{
									"id": 340,
									"name": "serverSecret",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 363,
					"name": "budd",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 364,
							"name": "budd",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "\"budd\" will spin a channel off an existing one.\nYou need to provide one of the following combinations of info:\n\n- nothing: create new channel and transfer all storage budget\n- just storage amount: creates new channel with that amount, returns new channel\n- just a target channel: moves all storage budget to that channel\n- just keys: creates new channel with those keys and transfers all storage budget\n- keys and storage amount: creates new channel with those keys and that storage amount\n\nIn the first (special) case you can just call budd(), in the other\ncases you need to fill out the 'options' object.\n\nAnother way to remember the above: all combinations are valid except\nboth a target channel and assigning keys.\n\nNote: if you're specifying the target channel, then the return values will\nnot include the private key (that return value will be empty).\n\nSame channels as mother and target will be a no-op, regardless of other\nparameters.\n\nNote: if you provide a value for 'storage', it cannot be undefined. If you\nwish it to be Infinity, then you need to omit the property from options.\n\nFuture: negative amount of storage leaves that amount behind, the rest is transferred"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 66,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 365,
							"name": "budd",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 366,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 367,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 368,
													"name": "keys",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
															"qualifiedName": "JsonWebKey"
														},
														"name": "JsonWebKey",
														"package": "typescript"
													}
												},
												{
													"id": 369,
													"name": "storage",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 370,
													"name": "targetChannel",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														368,
														369,
														370
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 66,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 301,
					"name": "deCryptChannelMessage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 302,
							"name": "deCryptChannelMessage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 303,
									"name": "m00",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 304,
									"name": "m01",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 119,
										"name": "EncryptedContents",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": 73,
												"name": "ChannelMessage",
												"package": "snackabra"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 332,
					"name": "downloadData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 333,
							"name": "downloadData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Channel.downloadData"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 330,
					"name": "getAdminData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 331,
							"name": "getAdminData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Channel.getAdminData"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 115,
										"name": "ChannelAdminData",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 317,
					"name": "getCapacity",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 318,
							"name": "getCapacity",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getCapacity"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 323,
					"name": "getJoinRequests",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 324,
							"name": "getJoinRequests",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getJoinRequests"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 305,
					"name": "getLastMessageTimes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 306,
							"name": "getLastMessageTimes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Channel.getLastMessageTimes"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 321,
					"name": "getMother",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 322,
							"name": "getMother",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getMother\n\nGet the channelID from which this channel was budded. Note that\nthis is only accessible by Owner (as well as hosting server)"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 307,
					"name": "getOldMessages",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 308,
							"name": "getOldMessages",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Channel.getOldMessages\n\nWill return most recent messages from the channel."
									}
								]
							},
							"parameters": [
								{
									"id": 309,
									"name": "currentMessagesLength",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "number to fetch (default 100)"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "100"
								},
								{
									"id": 310,
									"name": "paginate",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "if true, will paginate from last request (default false)"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 73,
											"name": "ChannelMessage",
											"package": "snackabra"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 319,
					"name": "getStorageLimit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 320,
							"name": "getStorageLimit",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getStorageLimit (current storage budget)"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 360,
					"name": "getStorageToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 361,
							"name": "getStorageToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "returns a storage token (promise); basic consumption of channel budget"
									}
								]
							},
							"parameters": [
								{
									"id": 362,
									"name": "size",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 325,
					"name": "isLocked",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 326,
							"name": "isLocked",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "isLocked"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 349,
					"name": "lock",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 350,
							"name": "lock",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Channel.lock()\n\nLocks the channel, so that new visitors need an \"ack\" to join."
									}
								]
							},
							"parameters": [
								{
									"id": 351,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 352,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 353,
													"name": "locked",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 354,
													"name": "lockedKey",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
															"qualifiedName": "JsonWebKey"
														},
														"name": "JsonWebKey",
														"package": "typescript"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														353,
														354
													]
												}
											]
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 358,
					"name": "ownerKeyRotation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 359,
							"name": "ownerKeyRotation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 341,
					"name": "postPubKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 342,
							"name": "postPubKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 343,
									"name": "_exportable_pubKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 344,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 345,
													"name": "success",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														345
													]
												}
											]
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 311,
					"name": "send",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 312,
							"name": "send",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 313,
									"name": "_msg",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 256,
												"name": "SBMessage",
												"package": "snackabra"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 327,
					"name": "setMOTD",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 328,
							"name": "setMOTD",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set message of the day"
									}
								]
							},
							"parameters": [
								{
									"id": 329,
									"name": "motd",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 346,
					"name": "storageRequest",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 347,
							"name": "storageRequest",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 348,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "Dictionary"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 314,
					"name": "updateCapacity",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 315,
							"name": "updateCapacity",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update (set) the capacity of the channel; Owner only"
									}
								]
							},
							"parameters": [
								{
									"id": 316,
									"name": "capacity",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 334,
					"name": "uploadChannel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 335,
							"name": "uploadChannel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 336,
									"name": "channelData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 201,
										"name": "ChannelData",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						276
					]
				},
				{
					"title": "Properties",
					"children": [
						288,
						284,
						287,
						286,
						283,
						399,
						371,
						289
					]
				},
				{
					"title": "Accessors",
					"children": [
						293,
						389,
						393,
						395,
						385,
						383,
						415,
						407,
						411,
						413,
						391,
						387,
						409,
						405,
						291,
						419,
						417
					]
				},
				{
					"title": "Methods",
					"children": [
						355,
						337,
						363,
						301,
						332,
						330,
						317,
						323,
						305,
						321,
						307,
						319,
						360,
						325,
						349,
						358,
						341,
						311,
						327,
						346,
						314,
						334
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "snackabra-jslib/snackabra.ts",
						"qualifiedName": "SBChannelKeys"
					},
					"name": "SBChannelKeys",
					"package": "snackabra"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 421,
					"name": "ChannelSocket"
				}
			]
		},
		{
			"id": 421,
			"name": "ChannelSocket",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "ChannelSocket"
					}
				]
			},
			"children": [
				{
					"id": 422,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 423,
							"name": "new ChannelSocket",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "ChannelSocket constructor\n\nThis extends Channel. Use this instead of ChannelEndpoint if you\nare going to be sending/receiving messages.\n\nYou send by calling channel.send(msg: SBMessage | string), i.e.\nyou can send a quick string.\n\nYou can set your message handler upon creation, or later by using\nchannel.onMessage = (m: ChannelMessage) => { ... }.\n\nThis implementation uses websockeds to connect all participating\nclients through a single servlet (somewhere), with very fast\nforwarding.\n\nYou don't need to worry about managing resources, like closing it,\nor checking if it's open. It will close based on server behavior,\neg it's up to the server to close the connection based on inactivity.\nThe ChannelSocket will re-open if you try to send against a closed\nconnection. You can check status with channelSocket.status if you\nlike, but it shouldn't be necessary.\n\nMessages are delivered as type ChannelMessage. Usually they are\nsimple blobs of data that are encrypted: the ChannelSocket will\ndecrypt them for you. It also handles a simple ack/nack mechanism\nwith the server transparently.\n\nBe aware that if ChannelSocket doesn't know how to handle a certain\nmessage, it will generally just forward it to you as-is."
									}
								]
							},
							"parameters": [
								{
									"id": 424,
									"name": "sbServerOrHandle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 66,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								},
								{
									"id": 425,
									"name": "onMessage",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 426,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 427,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 428,
															"name": "m",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 73,
																"name": "ChannelMessage",
																"package": "snackabra"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 421,
								"name": "ChannelSocket",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": 277,
								"name": "Channel.constructor"
							}
						},
						{
							"id": 429,
							"name": "new ChannelSocket",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"parameters": [
								{
									"id": 430,
									"name": "sbServerOrHandle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 61,
										"name": "SBServer",
										"package": "snackabra"
									}
								},
								{
									"id": 431,
									"name": "onMessage",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 432,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 433,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 434,
															"name": "m",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 73,
																"name": "ChannelMessage",
																"package": "snackabra"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 435,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								},
								{
									"id": 436,
									"name": "channelId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 421,
								"name": "ChannelSocket",
								"package": "snackabra"
							},
							"overwrites": {
								"type": "reference",
								"target": 279,
								"name": "Channel.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 276,
						"name": "Channel.constructor"
					}
				},
				{
					"id": 497,
					"name": "adminData",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "Dictionary"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Dictionary",
						"package": "snackabra"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 288,
						"name": "Channel.adminData"
					}
				},
				{
					"id": 493,
					"name": "channelReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 275,
								"name": "Channel",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 284,
						"name": "Channel.channelReady"
					}
				},
				{
					"id": 438,
					"name": "channelSocketReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 421,
								"name": "ChannelSocket",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 496,
					"name": "locked",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 287,
						"name": "Channel.locked"
					}
				},
				{
					"id": 495,
					"name": "motd",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "''",
					"inheritedFrom": {
						"type": "reference",
						"target": 286,
						"name": "Channel.motd"
					}
				},
				{
					"id": 437,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 421,
								"name": "ChannelSocket",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"overwrites": {
						"type": "reference",
						"target": 283,
						"name": "Channel.ready"
					}
				},
				{
					"id": 605,
					"name": "sb384Ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 226,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 399,
						"name": "Channel.sb384Ready"
					}
				},
				{
					"id": 577,
					"name": "sbChannelKeysReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "snackabra-jslib/snackabra.ts",
									"qualifiedName": "SBChannelKeys"
								},
								"name": "SBChannelKeys",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 371,
						"name": "Channel.sbChannelKeysReady"
					}
				},
				{
					"id": 498,
					"name": "verifiedGuest",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"target": 289,
						"name": "Channel.verifiedGuest"
					}
				},
				{
					"id": 502,
					"name": "api",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 503,
						"name": "api",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "this"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.api"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 293,
						"name": "Channel.api"
					}
				},
				{
					"id": 595,
					"name": "channelData",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 596,
						"name": "channelData",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 201,
							"name": "ChannelData",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.channelData"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 389,
						"name": "Channel.channelData"
					}
				},
				{
					"id": 599,
					"name": "channelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 600,
						"name": "channelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.channelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 393,
						"name": "Channel.channelId"
					}
				},
				{
					"id": 601,
					"name": "channelServer",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 602,
						"name": "channelServer",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.channelServer"
						}
					},
					"setSignature": {
						"id": 603,
						"name": "channelServer",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"parameters": [
							{
								"id": 604,
								"name": "channelServer",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.channelServer"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 395,
						"name": "Channel.channelServer"
					}
				},
				{
					"id": 591,
					"name": "channelSignKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 592,
						"name": "channelSignKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.channelSignKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 385,
						"name": "Channel.channelSignKey"
					}
				},
				{
					"id": 485,
					"name": "enableTrace",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"setSignature": {
						"id": 486,
						"name": "enableTrace",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Enables debug output"
								}
							]
						},
						"parameters": [
							{
								"id": 487,
								"name": "b",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 589,
					"name": "encryptionKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 590,
						"name": "encryptionKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.encryptionKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 383,
						"name": "Channel.encryptionKey"
					}
				},
				{
					"id": 491,
					"name": "exportable_owner_pubKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 492,
						"name": "exportable_owner_pubKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 621,
					"name": "exportable_pubKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 622,
						"name": "exportable_pubKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "For 'jwk' format use cases."
								}
							]
						},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.exportable_pubKey"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 415,
						"name": "Channel.exportable_pubKey"
					}
				},
				{
					"id": 613,
					"name": "hash",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 614,
						"name": "hash",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns a unique identifier for external use, that will be unique\nfor any class or object that uses SB384 as it's root.\n\nThis is deterministic. Important use case is to translate a user id\ninto a channel id (eg the channel that any user id is inherently\nthe owner of).\n\nThe hash is base64 encoding of the SHA-384 hash of the public key,\ntaking the 'x' and 'y' fields. Note that it is slightly restricted, it only\nallows [A-Za-z0-9], eg does not allow the '_' or '-' characters. This makes the\nencoding more practical for end-user interactions like copy-paste. This\nis accomplished by simply re-hashing until the result is valid. This \nreduces the entropy of the channel ID by a neglible amount. \n\nNote this is not b62 encoding, which we use for 256-bit entities. This\nis still ~384 bits (e.g. x and y fields are each 384 bits, but of course\nthe underlying total entropy isn't that (exercise left to the reader).\n\nNOTE: if you ever need to COMPARE hashes, the short version is that\nyou cannot do so in the general case: you need to use sbCrypto.compareHashWithKey()"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.hash"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 407,
						"name": "Channel.hash"
					}
				},
				{
					"id": 617,
					"name": "jwk",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 618,
						"name": "jwk",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.jwk"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 411,
						"name": "Channel.jwk"
					}
				},
				{
					"id": 619,
					"name": "key",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 620,
						"name": "key",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.key"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 413,
						"name": "Channel.key"
					}
				},
				{
					"id": 597,
					"name": "keys",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 598,
						"name": "keys",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 106,
							"name": "ChannelKeys",
							"package": "snackabra"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.keys"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 391,
						"name": "Channel.keys"
					}
				},
				{
					"id": 475,
					"name": "onMessage",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 476,
						"name": "onMessage",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reflection",
							"declaration": {
								"id": 477,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"signatures": [
									{
										"id": 478,
										"name": "__type",
										"variant": "signature",
										"kind": 4096,
										"flags": {},
										"parameters": [
											{
												"id": 479,
												"name": "m",
												"variant": "param",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "reference",
													"target": 73,
													"name": "ChannelMessage",
													"package": "snackabra"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "void"
										}
									}
								]
							}
						}
					},
					"setSignature": {
						"id": 480,
						"name": "onMessage",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"parameters": [
							{
								"id": 481,
								"name": "f",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "reflection",
									"declaration": {
										"id": 482,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {},
										"signatures": [
											{
												"id": 483,
												"name": "__type",
												"variant": "signature",
												"kind": 4096,
												"flags": {},
												"parameters": [
													{
														"id": 484,
														"name": "m",
														"variant": "param",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "reference",
															"target": 73,
															"name": "ChannelMessage",
															"package": "snackabra"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "void"
												}
											}
										]
									}
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 593,
					"name": "owner",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 594,
						"name": "owner",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.owner"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 387,
						"name": "Channel.owner"
					}
				},
				{
					"id": 615,
					"name": "ownerChannelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 616,
						"name": "ownerChannelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "ChannelID that corresponds to this, if it's an owner"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.ownerChannelId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 409,
						"name": "Channel.ownerChannelId"
					}
				},
				{
					"id": 611,
					"name": "private",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 612,
						"name": "private",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns true if this is a private key, otherwise false.\nWill throw an exception if the object is not ready."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.private"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 405,
						"name": "Channel.private"
					}
				},
				{
					"id": 500,
					"name": "readyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 501,
						"name": "readyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.readyFlag"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 291,
						"name": "Channel.readyFlag"
					}
				},
				{
					"id": 473,
					"name": "status",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 474,
						"name": "status",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "CLOSED"
								},
								{
									"type": "literal",
									"value": "CONNECTING"
								},
								{
									"type": "literal",
									"value": "OPEN"
								},
								{
									"type": "literal",
									"value": "CLOSING"
								}
							]
						}
					}
				},
				{
					"id": 625,
					"name": "userId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 626,
						"name": "userId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Somewhat confusing at times, the string version of the user key per se is\ndifferent from \"hash\" (the full public key can be recovered from SBUserId).\nEg this is the public identifier."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.userId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 419,
						"name": "Channel.userId"
					}
				},
				{
					"id": 623,
					"name": "userKeyString",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 624,
						"name": "userKeyString",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Wire format of full info of key (eg private key)."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						},
						"inheritedFrom": {
							"type": "reference",
							"target": -1,
							"name": "Channel.userKeyString"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 417,
						"name": "Channel.userKeyString"
					}
				},
				{
					"id": 561,
					"name": "acceptVisitor",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 562,
							"name": "acceptVisitor",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 563,
									"name": "userId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 356,
								"name": "Channel.acceptVisitor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 355,
						"name": "Channel.acceptVisitor"
					}
				},
				{
					"id": 543,
					"name": "authorize",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 544,
							"name": "authorize",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 545,
									"name": "ownerPublicKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "Dictionary"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"package": "snackabra"
									}
								},
								{
									"id": 546,
									"name": "serverSecret",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 338,
								"name": "Channel.authorize"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 337,
						"name": "Channel.authorize"
					}
				},
				{
					"id": 569,
					"name": "budd",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 570,
							"name": "budd",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "\"budd\" will spin a channel off an existing one.\nYou need to provide one of the following combinations of info:\n\n- nothing: create new channel and transfer all storage budget\n- just storage amount: creates new channel with that amount, returns new channel\n- just a target channel: moves all storage budget to that channel\n- just keys: creates new channel with those keys and transfers all storage budget\n- keys and storage amount: creates new channel with those keys and that storage amount\n\nIn the first (special) case you can just call budd(), in the other\ncases you need to fill out the 'options' object.\n\nAnother way to remember the above: all combinations are valid except\nboth a target channel and assigning keys.\n\nNote: if you're specifying the target channel, then the return values will\nnot include the private key (that return value will be empty).\n\nSame channels as mother and target will be a no-op, regardless of other\nparameters.\n\nNote: if you provide a value for 'storage', it cannot be undefined. If you\nwish it to be Infinity, then you need to omit the property from options.\n\nFuture: negative amount of storage leaves that amount behind, the rest is transferred"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 66,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 364,
								"name": "Channel.budd"
							}
						},
						{
							"id": 571,
							"name": "budd",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 572,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 573,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 574,
													"name": "keys",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
															"qualifiedName": "JsonWebKey"
														},
														"name": "JsonWebKey",
														"package": "typescript"
													}
												},
												{
													"id": 575,
													"name": "storage",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 576,
													"name": "targetChannel",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														574,
														575,
														576
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 66,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 365,
								"name": "Channel.budd"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 363,
						"name": "Channel.budd"
					}
				},
				{
					"id": 510,
					"name": "deCryptChannelMessage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 511,
							"name": "deCryptChannelMessage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 512,
									"name": "m00",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 513,
									"name": "m01",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 119,
										"name": "EncryptedContents",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": 73,
												"name": "ChannelMessage",
												"package": "snackabra"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 302,
								"name": "Channel.deCryptChannelMessage"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 301,
						"name": "Channel.deCryptChannelMessage"
					}
				},
				{
					"id": 538,
					"name": "downloadData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 539,
							"name": "downloadData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Channel.downloadData"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 333,
								"name": "Channel.downloadData"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 332,
						"name": "Channel.downloadData"
					}
				},
				{
					"id": 536,
					"name": "getAdminData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 537,
							"name": "getAdminData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Channel.getAdminData"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 115,
										"name": "ChannelAdminData",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 331,
								"name": "Channel.getAdminData"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 330,
						"name": "Channel.getAdminData"
					}
				},
				{
					"id": 523,
					"name": "getCapacity",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 524,
							"name": "getCapacity",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getCapacity"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 318,
								"name": "Channel.getCapacity"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 317,
						"name": "Channel.getCapacity"
					}
				},
				{
					"id": 529,
					"name": "getJoinRequests",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 530,
							"name": "getJoinRequests",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getJoinRequests"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 324,
								"name": "Channel.getJoinRequests"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 323,
						"name": "Channel.getJoinRequests"
					}
				},
				{
					"id": 514,
					"name": "getLastMessageTimes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 515,
							"name": "getLastMessageTimes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Channel.getLastMessageTimes"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 306,
								"name": "Channel.getLastMessageTimes"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 305,
						"name": "Channel.getLastMessageTimes"
					}
				},
				{
					"id": 527,
					"name": "getMother",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 528,
							"name": "getMother",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getMother\n\nGet the channelID from which this channel was budded. Note that\nthis is only accessible by Owner (as well as hosting server)"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 322,
								"name": "Channel.getMother"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 321,
						"name": "Channel.getMother"
					}
				},
				{
					"id": 516,
					"name": "getOldMessages",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 517,
							"name": "getOldMessages",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Channel.getOldMessages\n\nWill return most recent messages from the channel."
									}
								]
							},
							"parameters": [
								{
									"id": 518,
									"name": "currentMessagesLength",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "number to fetch (default 100)"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "100"
								},
								{
									"id": 519,
									"name": "paginate",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "if true, will paginate from last request (default false)"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 73,
											"name": "ChannelMessage",
											"package": "snackabra"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 308,
								"name": "Channel.getOldMessages"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 307,
						"name": "Channel.getOldMessages"
					}
				},
				{
					"id": 525,
					"name": "getStorageLimit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 526,
							"name": "getStorageLimit",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "getStorageLimit (current storage budget)"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 320,
								"name": "Channel.getStorageLimit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 319,
						"name": "Channel.getStorageLimit"
					}
				},
				{
					"id": 566,
					"name": "getStorageToken",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 567,
							"name": "getStorageToken",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "returns a storage token (promise); basic consumption of channel budget"
									}
								]
							},
							"parameters": [
								{
									"id": 568,
									"name": "size",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 361,
								"name": "Channel.getStorageToken"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 360,
						"name": "Channel.getStorageToken"
					}
				},
				{
					"id": 531,
					"name": "isLocked",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 532,
							"name": "isLocked",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "isLocked"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 326,
								"name": "Channel.isLocked"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 325,
						"name": "Channel.isLocked"
					}
				},
				{
					"id": 555,
					"name": "lock",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 556,
							"name": "lock",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Channel.lock()\n\nLocks the channel, so that new visitors need an \"ack\" to join."
									}
								]
							},
							"parameters": [
								{
									"id": 557,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 558,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 559,
													"name": "locked",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 560,
													"name": "lockedKey",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
															"qualifiedName": "JsonWebKey"
														},
														"name": "JsonWebKey",
														"package": "typescript"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														559,
														560
													]
												}
											]
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 350,
								"name": "Channel.lock"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 349,
						"name": "Channel.lock"
					}
				},
				{
					"id": 564,
					"name": "ownerKeyRotation",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 565,
							"name": "ownerKeyRotation",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 359,
								"name": "Channel.ownerKeyRotation"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 358,
						"name": "Channel.ownerKeyRotation"
					}
				},
				{
					"id": 547,
					"name": "postPubKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 548,
							"name": "postPubKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 549,
									"name": "_exportable_pubKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 550,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 551,
													"name": "success",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														551
													]
												}
											]
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 342,
								"name": "Channel.postPubKey"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 341,
						"name": "Channel.postPubKey"
					}
				},
				{
					"id": 488,
					"name": "send",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 489,
							"name": "send",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "ChannelSocket.send()\n\nReturns a promise that resolves to \"success\" when sent,\nor an error message if it fails."
									}
								]
							},
							"parameters": [
								{
									"id": 490,
									"name": "msg",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 256,
												"name": "SBMessage",
												"package": "snackabra"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": 312,
								"name": "Channel.send"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 311,
						"name": "Channel.send"
					}
				},
				{
					"id": 533,
					"name": "setMOTD",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 534,
							"name": "setMOTD",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set message of the day"
									}
								]
							},
							"parameters": [
								{
									"id": 535,
									"name": "motd",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 328,
								"name": "Channel.setMOTD"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 327,
						"name": "Channel.setMOTD"
					}
				},
				{
					"id": 552,
					"name": "storageRequest",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 553,
							"name": "storageRequest",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 554,
									"name": "byteLength",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "Dictionary"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 347,
								"name": "Channel.storageRequest"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 346,
						"name": "Channel.storageRequest"
					}
				},
				{
					"id": 520,
					"name": "updateCapacity",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 521,
							"name": "updateCapacity",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Update (set) the capacity of the channel; Owner only"
									}
								]
							},
							"parameters": [
								{
									"id": 522,
									"name": "capacity",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 315,
								"name": "Channel.updateCapacity"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 314,
						"name": "Channel.updateCapacity"
					}
				},
				{
					"id": 540,
					"name": "uploadChannel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 541,
							"name": "uploadChannel",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 542,
									"name": "channelData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 201,
										"name": "ChannelData",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 335,
								"name": "Channel.uploadChannel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 334,
						"name": "Channel.uploadChannel"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						422
					]
				},
				{
					"title": "Properties",
					"children": [
						497,
						493,
						438,
						496,
						495,
						437,
						605,
						577,
						498
					]
				},
				{
					"title": "Accessors",
					"children": [
						502,
						595,
						599,
						601,
						591,
						485,
						589,
						491,
						621,
						613,
						617,
						619,
						597,
						475,
						593,
						615,
						611,
						500,
						473,
						625,
						623
					]
				},
				{
					"title": "Methods",
					"children": [
						561,
						543,
						569,
						510,
						538,
						536,
						523,
						529,
						514,
						527,
						516,
						525,
						566,
						531,
						555,
						564,
						547,
						488,
						533,
						552,
						520,
						540
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 275,
					"name": "Channel",
					"package": "snackabra"
				}
			]
		},
		{
			"id": 175,
			"name": "MessageBus",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "MessageBus"
					}
				]
			},
			"children": [
				{
					"id": 176,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 177,
							"name": "new MessageBus",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 175,
								"name": "MessageBus",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 178,
					"name": "bus",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "Dictionary"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Dictionary",
						"package": "snackabra"
					},
					"defaultValue": "{}"
				},
				{
					"id": 190,
					"name": "publish",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 191,
							"name": "publish",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Publish"
									}
								]
							},
							"parameters": [
								{
									"id": 192,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 193,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "unknown"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 182,
					"name": "subscribe",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 183,
							"name": "subscribe",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Subscribe. 'event' is a string, special case '*' means everything\n (in which case the handler is also given the message)"
									}
								]
							},
							"parameters": [
								{
									"id": 184,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 185,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "CallableFunction"
										},
										"name": "CallableFunction",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 186,
					"name": "unsubscribe",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 187,
							"name": "unsubscribe",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Unsubscribe"
									}
								]
							},
							"parameters": [
								{
									"id": 188,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 189,
									"name": "handler",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "CallableFunction"
										},
										"name": "CallableFunction",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						176
					]
				},
				{
					"title": "Properties",
					"children": [
						178
					]
				},
				{
					"title": "Methods",
					"children": [
						190,
						182,
						186
					]
				}
			]
		},
		{
			"id": 226,
			"name": "SB384",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "SB384"
					}
				]
			},
			"children": [
				{
					"id": 227,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 228,
							"name": "new SB384",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Basic (core) capability object in SB.\n\nLike most SB classes, SB384 follows the \"ready template\" design\npattern: the object is immediately available upon creation,\nbut isn't \"ready\" until it says it's ready. See "
									},
									{
										"kind": "code",
										"text": "`Channel Class`"
									},
									{
										"kind": "text",
										"text": "_\nexample below. Getters will throw exceptions if the object\nisn't sufficiently initialized. Also see Design Note [4]_.\n\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "https://snackabra.io/jslib.html#dn-004-the-ready-pattern",
										"target": "https://snackabra.io/jslib.html#dn-004-the-ready-pattern"
									}
								]
							},
							"parameters": [
								{
									"id": 229,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "a jwk with which to create identity; if not provided,\nit will 'mint' (generate) them randomly, in other words it will\ndefault to creating a new identity (\"384\")."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "JsonWebKey"
												},
												"name": "JsonWebKey",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 230,
									"name": "forcePrivate",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "if true, will force SB384 to include private\nkey; it will throw an exception if the key is not private.\nIf SB384 is used to mint, then it's always private."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 226,
								"name": "SB384",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 231,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 226,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 232,
					"name": "sb384Ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 226,
								"name": "SB384",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 250,
					"name": "exportable_pubKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 251,
						"name": "exportable_pubKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "For 'jwk' format use cases."
								}
							]
						},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 242,
					"name": "hash",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 243,
						"name": "hash",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns a unique identifier for external use, that will be unique\nfor any class or object that uses SB384 as it's root.\n\nThis is deterministic. Important use case is to translate a user id\ninto a channel id (eg the channel that any user id is inherently\nthe owner of).\n\nThe hash is base64 encoding of the SHA-384 hash of the public key,\ntaking the 'x' and 'y' fields. Note that it is slightly restricted, it only\nallows [A-Za-z0-9], eg does not allow the '_' or '-' characters. This makes the\nencoding more practical for end-user interactions like copy-paste. This\nis accomplished by simply re-hashing until the result is valid. This \nreduces the entropy of the channel ID by a neglible amount. \n\nNote this is not b62 encoding, which we use for 256-bit entities. This\nis still ~384 bits (e.g. x and y fields are each 384 bits, but of course\nthe underlying total entropy isn't that (exercise left to the reader).\n\nNOTE: if you ever need to COMPARE hashes, the short version is that\nyou cannot do so in the general case: you need to use sbCrypto.compareHashWithKey()"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 246,
					"name": "jwk",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 247,
						"name": "jwk",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "JsonWebKey"
							},
							"name": "JsonWebKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 248,
					"name": "key",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 249,
						"name": "key",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "CryptoKey"
							},
							"name": "CryptoKey",
							"package": "typescript"
						}
					}
				},
				{
					"id": 244,
					"name": "ownerChannelId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 245,
						"name": "ownerChannelId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "ChannelID that corresponds to this, if it's an owner"
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 240,
					"name": "private",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 241,
						"name": "private",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns true if this is a private key, otherwise false.\nWill throw an exception if the object is not ready."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						}
					}
				},
				{
					"id": 238,
					"name": "readyFlag",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 239,
						"name": "readyFlag",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "boolean"
						}
					}
				},
				{
					"id": 254,
					"name": "userId",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 255,
						"name": "userId",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Somewhat confusing at times, the string version of the user key per se is\ndifferent from \"hash\" (the full public key can be recovered from SBUserId).\nEg this is the public identifier."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 252,
					"name": "userKeyString",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 253,
						"name": "userKeyString",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Wire format of full info of key (eg private key)."
								}
							]
						},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						227
					]
				},
				{
					"title": "Properties",
					"children": [
						231,
						232
					]
				},
				{
					"title": "Accessors",
					"children": [
						250,
						242,
						246,
						248,
						244,
						240,
						238,
						254,
						252
					]
				}
			]
		},
		{
			"id": 707,
			"name": "SBCrypto",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"children": [
				{
					"id": 708,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 709,
							"name": "new SBCrypto",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 707,
								"name": "SBCrypto",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 714,
					"name": "JWKToSBKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 715,
							"name": "JWKToSBKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Converts a JsonWebKey to a SBKey. Any issues and we return undefined."
									}
								]
							},
							"parameters": [
								{
									"id": 716,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								},
								{
									"id": 717,
									"name": "forcePublic",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"target": 197,
										"name": "SBKey",
										"package": "snackabra"
									}
								]
							}
						}
					]
				},
				{
					"id": 721,
					"name": "JWKToSBUserId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 722,
							"name": "JWKToSBUserId",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Convenience function. Note that SBUserId is always 'public'."
									}
								]
							},
							"parameters": [
								{
									"id": 723,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					]
				},
				{
					"id": 711,
					"name": "SBKeyToJWK",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 712,
							"name": "SBKeyToJWK",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Converts a SBKey to a JsonWebKey, if the input is already a JsonWebKey\nthen it's returned as is."
									}
								]
							},
							"parameters": [
								{
									"id": 713,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "JsonWebKey"
												},
												"name": "JsonWebKey",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": 197,
												"name": "SBKey",
												"package": "snackabra"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
									"qualifiedName": "JsonWebKey"
								},
								"name": "JsonWebKey",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 718,
					"name": "SBKeyToString",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 719,
							"name": "SBKeyToString",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Here we convert SBKey to a serialized string, it's a single\nstring that begins with the four-character identifying prefix,\nand then just a string. The way that string is encoded is as\nfollows:\n\n- AES256 key: it is 43x base64, so 256 bits, so can be base62 encoded straight up\n\n  public key: this is x and y, each are 384 bits, and we need to figure out a \n  way to encode as a32 (base62) - remember we can only encode a32 in chunks of 256 bits.\n  perhaps we do as above but append 128 \"zero\" bits to it, for a total of 1280\n  bits, which we can split into four chunks of 256 bits, and do as above.\n\n- private key: this is x, y, and d, each are 384 bits, so that's a total \n  of 768 bis, which can be encoded as three strings of 43 base62 characters.\n  BUT we need to convert all of them to BINARY, and then concatenate them\n  as binary, then split that to three equal-length buffers (32 bytes) and\n  then convert each to base62."
									}
								]
							},
							"parameters": [
								{
									"id": 720,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 197,
										"name": "SBKey",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 727,
					"name": "StringToJWK",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 728,
							"name": "StringToJWK",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 729,
									"name": "userId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								]
							}
						}
					]
				},
				{
					"id": 724,
					"name": "StringToSBKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 725,
							"name": "StringToSBKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 726,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"target": 197,
										"name": "SBKey",
										"package": "snackabra"
									}
								]
							}
						}
					]
				},
				{
					"id": 824,
					"name": "ab2str",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 825,
							"name": "ab2str",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Standardized 'ab2str()' function, array buffer to string.\nThis assumes one byte per character."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "string"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 826,
									"name": "buffer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 730,
					"name": "addKnownKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 731,
							"name": "addKnownKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.addKnownKey()\n\nAdds any key to the list of known keys; if it's known\nbut only as a public key, then it will be 'upgraded'."
									}
								]
							},
							"parameters": [
								{
									"id": 732,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "Key"
										},
										"name": "Key",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 831,
					"name": "channelKeyStringsToCryptoKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 832,
							"name": "channelKeyStringsToCryptoKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 833,
									"name": "keyStrings",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 211,
										"name": "ChannelKeyStrings",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 106,
										"name": "ChannelKeys",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 755,
					"name": "compareHashWithKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 756,
							"name": "compareHashWithKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.compareHashWithKey()\n\nChecks if an existing SB384Hash is 'compatible' with a given key.\n\nNote that you CAN NOT have a hash, and a key, generate a hash\nfrom that key, and then compare the two. The hash generation per\nse will be deterministic and specific AT ANY POINT IN TIME,\nbut may change over time, and this comparison function will \nmaintain ability to compare over versions.\n\nFor example, this comparison will accept a simple straight\nb64-encoded hash without iteration or other processing."
									}
								]
							},
							"parameters": [
								{
									"id": 757,
									"name": "hash",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 758,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "JsonWebKey"
												},
												"name": "JsonWebKey",
												"package": "typescript"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 827,
					"name": "compareKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 828,
							"name": "compareKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.compareKeys()\n\nCompare JSON keys, true if the 'same', false if different. We consider\nthem \"equal\" if both have 'x' and 'y' properties and they are the same.\n(Which means it doesn't care about which or either being public or private)"
									}
								]
							},
							"parameters": [
								{
									"id": 829,
									"name": "key1",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "Dictionary"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"package": "snackabra"
									}
								},
								{
									"id": 830,
									"name": "key2",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "Dictionary"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 776,
					"name": "deriveKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 777,
							"name": "deriveKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.deriveKey()\n\nDerive key. Takes a private and public key, and returns a Promise to a cryptoKey for 1:1 communication."
									}
								]
							},
							"parameters": [
								{
									"id": 778,
									"name": "privateKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 779,
									"name": "publicKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 780,
									"name": "type",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 781,
									"name": "extractable",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 782,
									"name": "keyUsages",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
												"qualifiedName": "KeyUsage"
											},
											"name": "KeyUsage",
											"package": "typescript"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 783,
					"name": "encrypt",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 784,
							"name": "encrypt",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.encrypt()\n\nEncrypt. if no nonce (iv) is given, will create it. Returns a Promise\nthat resolves either to raw array buffer or a packaged EncryptedContents.\nNote that for the former, nonce must be given."
									}
								]
							},
							"parameters": [
								{
									"id": 785,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "BufferSource"
										},
										"name": "BufferSource",
										"package": "typescript"
									}
								},
								{
									"id": 786,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 787,
									"name": "_iv",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"name": "Uint8Array",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 788,
									"name": "returnType",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "literal",
										"value": "encryptedContents"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 119,
										"name": "EncryptedContents",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 789,
							"name": "encrypt",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 790,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "BufferSource"
										},
										"name": "BufferSource",
										"package": "typescript"
									}
								},
								{
									"id": 791,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 792,
									"name": "_iv",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Uint8Array"
												},
												"name": "Uint8Array",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 793,
									"name": "returnType",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "literal",
										"value": "arrayBuffer"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 772,
					"name": "exportKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 773,
							"name": "exportKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.exportKey()\n\nExport key; note that if there's an issue, this will return undefined.\nThat can happen normally if for example the key is restricted (and\nnot extractable)."
									}
								]
							},
							"parameters": [
								{
									"id": 774,
									"name": "format",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "jwk"
									}
								},
								{
									"id": 775,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "JsonWebKey"
												},
												"name": "JsonWebKey",
												"package": "typescript"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 742,
					"name": "extractPubKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 743,
							"name": "extractPubKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Extracts (generates) public key from a private key."
									}
								]
							},
							"parameters": [
								{
									"id": 744,
									"name": "privateKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								]
							}
						}
					]
				},
				{
					"id": 736,
					"name": "generateIdKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 737,
							"name": "generateIdKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Hashes and splits into two (h1 and h1) signature of data, h1\nis used to request (salt, iv) pair and then h2 is used for\nencryption (h2, salt, iv).\n\nTransitioning to internal binary format"
									}
								]
							},
							"parameters": [
								{
									"id": 738,
									"name": "buf",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "blob of data to be stored"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 739,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 740,
													"name": "id_binary",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "ArrayBuffer"
														},
														"name": "ArrayBuffer",
														"package": "typescript"
													}
												},
												{
													"id": 741,
													"name": "key_material",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "ArrayBuffer"
														},
														"name": "ArrayBuffer",
														"package": "typescript"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														740,
														741
													]
												}
											]
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 763,
					"name": "generateKeys",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 764,
							"name": "generateKeys",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.generatekeys()\n\nGenerates standard "
									},
									{
										"kind": "code",
										"text": "``ECDH``"
									},
									{
										"kind": "text",
										"text": " keys using "
									},
									{
										"kind": "code",
										"text": "``P-384``"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKeyPair"
										},
										"name": "CryptoKeyPair",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 765,
					"name": "importKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 766,
							"name": "importKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.importKey()\n\nImport keys"
									}
								]
							},
							"parameters": [
								{
									"id": 767,
									"name": "format",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "KeyFormat"
										},
										"name": "KeyFormat",
										"package": "typescript"
									}
								},
								{
									"id": 768,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "BufferSource"
												},
												"name": "BufferSource",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "JsonWebKey"
												},
												"name": "JsonWebKey",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 769,
									"name": "type",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "ECDH"
											},
											{
												"type": "literal",
												"value": "AES"
											},
											{
												"type": "literal",
												"value": "PBKDF2"
											}
										]
									}
								},
								{
									"id": 770,
									"name": "extractable",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 771,
									"name": "keyUsages",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
												"qualifiedName": "KeyUsage"
											},
											"name": "KeyUsage",
											"package": "typescript"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 733,
					"name": "lookupKeyGlobal",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 734,
							"name": "lookupKeyGlobal",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.lookupKeyGlobal()\n\nGiven any sort of SB384Hash, returns the corresponding known key, if any"
									}
								]
							},
							"parameters": [
								{
									"id": 735,
									"name": "hash",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "knownKeysInfo"
										},
										"name": "knownKeysInfo",
										"package": "snackabra"
									}
								]
							}
						}
					]
				},
				{
					"id": 752,
					"name": "sb384Hash",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 753,
							"name": "sb384Hash",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.sb384Hash()\n\nTakes a JsonWebKey and returns a SB384Hash. If there's a problem, returns undefined."
									}
								]
							},
							"parameters": [
								{
									"id": 754,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "CryptoKey"
												},
												"name": "CryptoKey",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "JsonWebKey"
												},
												"name": "JsonWebKey",
												"package": "typescript"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 812,
					"name": "sign",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 813,
							"name": "sign",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.sign()\n\nSign"
									}
								]
							},
							"parameters": [
								{
									"id": 814,
									"name": "secretKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 815,
									"name": "contents",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 821,
					"name": "str2ab",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 822,
							"name": "str2ab",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Standardized 'str2ab()' function, string to array buffer.\nThis assumes on byte per character."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "buffer"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 823,
									"name": "string",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 803,
					"name": "unwrap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 804,
							"name": "unwrap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.unwrap\n\nDecrypts a wrapped object, returns (promise to) decrypted contents\nper se (either as a string or arrayBuffer)"
									}
								]
							},
							"parameters": [
								{
									"id": 805,
									"name": "k",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 806,
									"name": "o",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 119,
										"name": "EncryptedContents",
										"package": "snackabra"
									}
								},
								{
									"id": 807,
									"name": "returnType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 808,
							"name": "unwrap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 809,
									"name": "k",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 810,
									"name": "o",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 119,
										"name": "EncryptedContents",
										"package": "snackabra"
									}
								},
								{
									"id": 811,
									"name": "returnType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "arrayBuffer"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 816,
					"name": "verify",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 817,
							"name": "verify",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBCrypto.verify()\n\nVerify signature."
									}
								]
							},
							"parameters": [
								{
									"id": 818,
									"name": "verifyKey",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 819,
									"name": "sign",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 820,
									"name": "contents",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 759,
					"name": "verifyChannelId",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 760,
							"name": "verifyChannelId",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "'Compare' two channel IDs. Note that this is not constant time."
									}
								]
							},
							"parameters": [
								{
									"id": 761,
									"name": "owner_key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								},
								{
									"id": 762,
									"name": "channel_id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 794,
					"name": "wrap",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 795,
							"name": "wrap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 796,
									"name": "k",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 797,
									"name": "b",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 798,
									"name": "bodyType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 119,
										"name": "EncryptedContents",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 799,
							"name": "wrap",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 800,
									"name": "k",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "CryptoKey"
										},
										"name": "CryptoKey",
										"package": "typescript"
									}
								},
								{
									"id": 801,
									"name": "b",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									}
								},
								{
									"id": 802,
									"name": "bodyType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "arrayBuffer"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 119,
										"name": "EncryptedContents",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						708
					]
				},
				{
					"title": "Methods",
					"children": [
						714,
						721,
						711,
						718,
						727,
						724,
						824,
						730,
						831,
						755,
						827,
						776,
						783,
						772,
						742,
						736,
						763,
						765,
						733,
						752,
						812,
						821,
						803,
						816,
						759,
						794
					]
				}
			]
		},
		{
			"id": 256,
			"name": "SBMessage",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "SBMessage"
					}
				]
			},
			"children": [
				{
					"id": 257,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 258,
							"name": "new SBMessage",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBMessage\n\nBody should be below 32KiB, though it tolerates up to 64KiB"
									}
								]
							},
							"parameters": [
								{
									"id": 259,
									"name": "channel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 275,
										"name": "Channel",
										"package": "snackabra"
									}
								},
								{
									"id": 260,
									"name": "bodyParameter",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "snackabra-jslib/snackabra.ts",
													"qualifiedName": "SBMessageContents"
												},
												"name": "SBMessageContents",
												"package": "snackabra"
											}
										]
									},
									"defaultValue": "''"
								},
								{
									"id": 261,
									"name": "sendToJsonWebKey",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 256,
								"name": "SBMessage",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 266,
					"name": "MAX_SB_BODY_SIZE",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 274,
					"name": "[SB_MESSAGE_SYMBOL]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "true"
				},
				{
					"id": 267,
					"name": "channel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"type": {
						"type": "reference",
						"target": 275,
						"name": "Channel",
						"package": "snackabra"
					}
				},
				{
					"id": 263,
					"name": "contents",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "SBMessageContents"
						},
						"name": "SBMessageContents",
						"package": "snackabra"
					}
				},
				{
					"id": 262,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 256,
								"name": "SBMessage",
								"package": "snackabra"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				},
				{
					"id": 268,
					"name": "encryptionKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 269,
						"name": "encryptionKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
										"qualifiedName": "CryptoKey"
									},
									"name": "CryptoKey",
									"package": "typescript"
								}
							]
						}
					}
				},
				{
					"id": 270,
					"name": "sendToPubKey",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 271,
						"name": "sendToPubKey",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
										"qualifiedName": "JsonWebKey"
									},
									"name": "JsonWebKey",
									"package": "typescript"
								}
							]
						}
					}
				},
				{
					"id": 272,
					"name": "send",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 273,
							"name": "send",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "SBMessage.send()"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						257
					]
				},
				{
					"title": "Properties",
					"children": [
						266,
						274,
						267,
						263,
						262
					]
				},
				{
					"title": "Accessors",
					"children": [
						268,
						270
					]
				},
				{
					"title": "Methods",
					"children": [
						272
					]
				}
			]
		},
		{
			"id": 627,
			"name": "SBObjectHandle",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "SBObjecdtHandle"
					}
				]
			},
			"children": [
				{
					"id": 628,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 629,
							"name": "new SBObjectHandle",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Basic object handle for a shard (all storage).\n\nTo RETRIEVE a shard, you need id and verification.\n\nTo DECRYPT a shard, you need key, iv, and salt. Current\ngeneration of shard servers will provide (iv, salt) upon\nrequest if (and only if) you have id and verification.\n\nNote that id32/key32 are array32 encoded base62 encoded.\n\n'verification' is a 64-bit integer, encoded as a string\nof up 23 characters: it is four 16-bit integers, either\njoined by '.' or simply concatenated. Currently all four\nvalues are random, future generation only first three\nare guaranteed to be random, the fourth may be \"designed\"."
									}
								]
							},
							"parameters": [
								{
									"id": 630,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 174,
										"name": "SBObjectHandle",
										"package": "snackabra",
										"qualifiedName": "Interfaces.SBObjectHandle"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 627,
								"name": "SBObjectHandle",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 643,
					"name": "actualSize",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"implementationOf": {
						"type": "reference",
						"target": 139,
						"name": "SBObjectHandle_base.actualSize"
					}
				},
				{
					"id": 640,
					"name": "dateAndTime",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"implementationOf": {
						"type": "reference",
						"target": 136,
						"name": "SBObjectHandle_base.dateAndTime"
					}
				},
				{
					"id": 639,
					"name": "fileName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"implementationOf": {
						"type": "reference",
						"target": 135,
						"name": "SBObjectHandle_base.fileName"
					}
				},
				{
					"id": 641,
					"name": "fileType",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"implementationOf": {
						"type": "reference",
						"target": 137,
						"name": "SBObjectHandle_base.fileType"
					}
				},
				{
					"id": 637,
					"name": "iv",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						]
					},
					"implementationOf": {
						"type": "reference",
						"target": 133,
						"name": "SBObjectHandle_base.iv"
					}
				},
				{
					"id": 642,
					"name": "lastModified",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"implementationOf": {
						"type": "reference",
						"target": 138,
						"name": "SBObjectHandle_base.lastModified"
					}
				},
				{
					"id": 638,
					"name": "salt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						]
					},
					"implementationOf": {
						"type": "reference",
						"target": 134,
						"name": "SBObjectHandle_base.salt"
					}
				},
				{
					"id": 644,
					"name": "savedSize",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"implementationOf": {
						"type": "reference",
						"target": 140,
						"name": "SBObjectHandle_base.savedSize"
					}
				},
				{
					"id": 636,
					"name": "shardServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 631,
					"name": "version",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": 127,
						"name": "SBObjectHandleVersions",
						"package": "snackabra"
					},
					"defaultValue": "currentSBOHVersion",
					"implementationOf": {
						"type": "reference",
						"target": 130,
						"name": "SBObjectHandle_base.version"
					}
				},
				{
					"id": 651,
					"name": "id",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 652,
						"name": "id",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"setSignature": {
						"id": 653,
						"name": "id",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"parameters": [
							{
								"id": 654,
								"name": "value",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "ArrayBuffer"
											},
											"name": "ArrayBuffer",
											"package": "typescript"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "snackabra-jslib/snackabra.ts",
												"qualifiedName": "Base62Encoded"
											},
											"name": "Base62Encoded",
											"package": "snackabra"
										}
									]
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 661,
					"name": "id32",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 662,
						"name": "id32",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "snackabra-jslib/snackabra.ts",
								"qualifiedName": "Base62Encoded"
							},
							"name": "Base62Encoded",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 659,
					"name": "id64",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 660,
						"name": "id64",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 645,
					"name": "id_binary",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"setSignature": {
						"id": 646,
						"name": "id_binary",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"parameters": [
							{
								"id": 647,
								"name": "value",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "ArrayBuffer"
									},
									"name": "ArrayBuffer",
									"package": "typescript"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 655,
					"name": "key",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 656,
						"name": "key",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"setSignature": {
						"id": 657,
						"name": "key",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"parameters": [
							{
								"id": 658,
								"name": "value",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "ArrayBuffer"
											},
											"name": "ArrayBuffer",
											"package": "typescript"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "snackabra-jslib/snackabra.ts",
												"qualifiedName": "Base62Encoded"
											},
											"name": "Base62Encoded",
											"package": "snackabra"
										}
									]
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 665,
					"name": "key32",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 666,
						"name": "key32",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "snackabra-jslib/snackabra.ts",
								"qualifiedName": "Base62Encoded"
							},
							"name": "Base62Encoded",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 663,
					"name": "key64",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 664,
						"name": "key64",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 648,
					"name": "key_binary",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"setSignature": {
						"id": 649,
						"name": "key_binary",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"parameters": [
							{
								"id": 650,
								"name": "value",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "ArrayBuffer"
									},
									"name": "ArrayBuffer",
									"package": "typescript"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						}
					}
				},
				{
					"id": 671,
					"name": "type",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 672,
						"name": "type",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "reference",
							"target": 126,
							"name": "SBObjectType",
							"package": "snackabra"
						},
						"implementationOf": {
							"type": "reference",
							"target": 131,
							"name": "SBObjectHandle_base.type"
						}
					},
					"implementationOf": {
						"type": "reference",
						"target": 131,
						"name": "SBObjectHandle_base.type"
					}
				},
				{
					"id": 667,
					"name": "verification",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 668,
						"name": "verification",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "string"
								},
								{
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Promise"
									},
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "string"
										}
									],
									"name": "Promise",
									"package": "typescript"
								}
							]
						},
						"implementationOf": {
							"type": "reference",
							"target": 132,
							"name": "SBObjectHandle_base.verification"
						}
					},
					"setSignature": {
						"id": 669,
						"name": "verification",
						"variant": "signature",
						"kind": 1048576,
						"flags": {},
						"parameters": [
							{
								"id": 670,
								"name": "value",
								"variant": "param",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Promise"
											},
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "string"
												}
											],
											"name": "Promise",
											"package": "typescript"
										}
									]
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "void"
						},
						"implementationOf": {
							"type": "reference",
							"target": 132,
							"name": "SBObjectHandle_base.verification"
						}
					},
					"implementationOf": {
						"type": "reference",
						"target": 132,
						"name": "SBObjectHandle_base.verification"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						628
					]
				},
				{
					"title": "Properties",
					"children": [
						643,
						640,
						639,
						641,
						637,
						642,
						638,
						644,
						636,
						631
					]
				},
				{
					"title": "Accessors",
					"children": [
						651,
						661,
						659,
						645,
						655,
						665,
						663,
						648,
						671,
						667
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": 129,
					"name": "SBObjectHandle_base",
					"package": "snackabra",
					"qualifiedName": "Interfaces.SBObjectHandle_base"
				}
			]
		},
		{
			"id": 673,
			"name": "Snackabra",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Snackabra"
					}
				]
			},
			"children": [
				{
					"id": 674,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 675,
							"name": "new Snackabra",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "class Snackabra\n\nMain class. It corresponds to a single channel server. Most apps\nwill only be talking to one channel server, but it is possible\nto have multiple instances of Snackabra, each talking to a\ndifferent channel server.\n\nSB 2.0 prefers a single parameter, the URL to the channel server."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```typescript\n    const sb = new Snackabra('http://localhost:3845')\n```"
											},
											{
												"kind": "text",
												"text": "\n\nWebsocket server is always the same server (just different protocol),\nstorage server is now provided by '/api/info' endpoint, and shard\nservers are orthogonal anyway (any shard server can talk to any\nstorage server).\n\nNote that 'new Snackabra()' is guaranteed synchronous.\n\nSB 1.x interface was to provide a set of servers, eg:"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```typescript\n    const sb = new Snackabra({\n      channel_server: 'http://localhost:3845',\n      channel_ws: 'ws://localhost:3845',\n      storage_server: 'http://localhost:3843',\n      shard_server: 'http://localhost:3841',\n    })\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 676,
									"name": "sbServerOrChannelServer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 61,
												"name": "SBServer",
												"package": "snackabra"
											}
										]
									}
								},
								{
									"id": 677,
									"name": "setDBG",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 678,
									"name": "setDBG2",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 673,
								"name": "Snackabra",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 679,
					"name": "channelServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 680,
					"name": "storageServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 703,
					"name": "crypto",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 704,
						"name": "crypto",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns the crypto API."
								}
							]
						},
						"type": {
							"type": "reference",
							"target": 707,
							"name": "SBCrypto",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 701,
					"name": "storage",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 702,
						"name": "storage",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Returns the storage API."
								}
							]
						},
						"type": {
							"type": "reference",
							"target": {
								"sourceFileName": "snackabra-jslib/snackabra.ts",
								"qualifiedName": "StorageApi"
							},
							"name": "StorageApi",
							"package": "snackabra"
						}
					}
				},
				{
					"id": 705,
					"name": "version",
					"variant": "declaration",
					"kind": 262144,
					"flags": {},
					"getSignature": {
						"id": 706,
						"name": "version",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 683,
					"name": "attach",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 684,
							"name": "attach",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 685,
									"name": "handle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 66,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 275,
										"name": "Channel",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 694,
					"name": "connect",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 695,
							"name": "connect",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Connects to :term:"
									},
									{
										"kind": "code",
										"text": "`Channel Name`"
									},
									{
										"kind": "text",
										"text": " on this SB config.\nReturns a channel socket promise right away, but it\nwill not be ready until the "
									},
									{
										"kind": "code",
										"text": "``ready``"
									},
									{
										"kind": "text",
										"text": " promise is resolved.\n\nNote that if you have a preferred server then the channel\nobject will be returned right away, but the "
									},
									{
										"kind": "code",
										"text": "``ready``"
									},
									{
										"kind": "text",
										"text": " promise\nwill still be pending. If you do not have a preferred server,\nthen the "
									},
									{
										"kind": "code",
										"text": "``ready``"
									},
									{
										"kind": "text",
										"text": " promise will be resolved when at least\none of the known servers is responding and ready."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "a channel object"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 696,
									"name": "handle",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 66,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								},
								{
									"id": 697,
									"name": "onMessage",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 698,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"signatures": [
												{
													"id": 699,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 700,
															"name": "m",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 73,
																"name": "ChannelMessage",
																"package": "snackabra"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 421,
								"name": "ChannelSocket",
								"package": "snackabra"
							}
						}
					]
				},
				{
					"id": 686,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 687,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new channel.\nReturns a promise to a ''SBChannelHandle'' object.\nNote that this method does not connect to the channel,\nit just creates (authorizes) it and allocates storage budget.\n\nNew (2.0) interface:"
									}
								]
							},
							"parameters": [
								{
									"id": 688,
									"name": "ownerKeys",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 226,
										"name": "SB384",
										"package": "snackabra"
									}
								},
								{
									"id": 689,
									"name": "budgetChannel",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "NECESSARY unless local/dev; provides a channel to pay for storage"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 275,
										"name": "Channel",
										"package": "snackabra"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 66,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 690,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"parameters": [
								{
									"id": 691,
									"name": "sbServer",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 61,
										"name": "SBServer",
										"package": "snackabra"
									}
								},
								{
									"id": 692,
									"name": "serverSecretOrBudgetChannel",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 275,
												"name": "Channel",
												"package": "snackabra"
											}
										]
									}
								},
								{
									"id": 693,
									"name": "keys",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 66,
										"name": "SBChannelHandle",
										"package": "snackabra"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						674
					]
				},
				{
					"title": "Properties",
					"children": [
						679,
						680
					]
				},
				{
					"title": "Accessors",
					"children": [
						703,
						701,
						705
					]
				},
				{
					"title": "Methods",
					"children": [
						683,
						694,
						686
					]
				}
			]
		},
		{
			"id": 115,
			"name": "ChannelAdminData",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 118,
					"name": "capacity",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 117,
					"name": "join_requests",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 116,
					"name": "room_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						118,
						117,
						116
					]
				}
			]
		},
		{
			"id": 201,
			"name": "ChannelData",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 209,
					"name": "SERVER_SECRET",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 203,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 205,
					"name": "encryptionKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 207,
					"name": "motherChannel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 204,
					"name": "ownerKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 202,
					"name": "roomId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 206,
					"name": "signKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 210,
					"name": "size",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 208,
					"name": "storageToken",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						209,
						203,
						205,
						207,
						204,
						202,
						206,
						210,
						208
					]
				}
			]
		},
		{
			"id": 211,
			"name": "ChannelKeyStrings",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 216,
					"name": "encryptedLockedKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 212,
					"name": "encryptionKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 217,
					"name": "error",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 213,
					"name": "guestKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 214,
					"name": "ownerKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 215,
					"name": "signKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						216,
						212,
						217,
						213,
						214,
						215
					]
				}
			]
		},
		{
			"id": 106,
			"name": "ChannelKeys",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "ChannelKeys\n\nAll keys relevant for a given channel, in decoded (CryptoKey) form.\nThey are sent over channels as a message (see ChannelKeysMessage);\nin export/import code they may be in the intermediary form of\nstrings (see ChannelKeyStrings).\n\nIf the room is Locked, encryption key is different (lockedKey)"
					}
				],
				"blockTags": [
					{
						"tag": "@example",
						"content": [
							{
								"kind": "code",
								"text": "```ts\n{ \"ready\": true,\n *    \"keys\": {\n *            \"ownerKey\": \"{\\\"crv\\\":\\\"P-384\\\",\\\"ext\\\":true,\\\"key_ops\\\":[],\\\"kty\\\":\\\"EC\\\",\n *                        \\\"x\\\":\\\"9s17B4i0Cuf_w9XN_uAq2DFePOr6S3sMFMA95KjLN8akBUWEhPAcuMEMwNUlrrkN\\\",\n *                        \\\"y\\\":\\\"6dAtcyMbtsO5ufKvlhxRsvjTmkABGlTYG1BrEjTpwrAgtmn6k25GR7akklz9klBr\\\"}\",\n *            \"guestKey\": \"{\\\"crv\\\":\\\"P-384\\\",\\\"ext\\\":true,\\\"key_ops\\\":[],\\\"kty\\\":\\\"EC\\\",\n *                         \\\"x\\\":\\\"Lx0eJcbNuyEfHDobWaZqgy9UO7ppxVIsEpEtvbzkAlIjySh9lY2AvgnACREO6QXD\\\",\n *                         \\\"y\\\":\\\"zEHPgpsl4jge_Q-K6ekuzi2bQOybnaPT1MozCFQJnXEePBX8emkHriOiwl6P8BAS\\\"}\",\n *            \"encryptionKey\": \"{\\\"alg\\\":\\\"A256GCM\\\",\\\"ext\\\":true,\n *                             \\\"k\\\":\\\"F0sQTTLXDhuvvmgGQLzMoeHPD-SJlFyhfOD-cqejEOU\\\",\n *                             \\\"key_ops\\\":[\\\"encrypt\\\",\\\"decrypt\\\"],\\\"kty\\\":\\\"oct\\\"}\",\n *            \"signKey\": \"{\\\"crv\\\":\\\"P-384\\\",\n *                        \\\"d\\\":\\\"KCJHDZ34XgVFsS9-sU09HFzXZhnGCvnDgJ5a8GTSfjuJQaq-1N2acvchPRhknk8B\\\",\n *                        \\\"ext\\\":true,\\\"key_ops\\\":[\\\"deriveKey\\\"],\\\"kty\\\":\\\"EC\\\",\n *                        \\\"x\\\":\\\"rdsyBle0DD1hvp2OE2mINyyI87Cyg7FS3tCQUIeVkfPiNOACtFxi6iP8oeYt-Dge\\\",\n *                        \\\"y\\\":\\\"qW9VP72uf9rgUU117G7AfTkCMncJbT5scIaIRwBXfqET6FYcq20fwSP7R911J2_t\\\"}\"\n *             },\n * \"motd\": \"\",\n * \"roomLocked\": false}\n```"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 114,
					"name": "encryptedLockedKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 109,
					"name": "encryptionKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				},
				{
					"id": 108,
					"name": "guestKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				},
				{
					"id": 113,
					"name": "lockedKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				},
				{
					"id": 107,
					"name": "ownerKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				},
				{
					"id": 112,
					"name": "privateKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				},
				{
					"id": 111,
					"name": "publicSignKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				},
				{
					"id": 110,
					"name": "signKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "CryptoKey"
						},
						"name": "CryptoKey",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						114,
						109,
						108,
						113,
						107,
						112,
						111,
						110
					]
				}
			]
		},
		{
			"id": 73,
			"name": "ChannelMessage",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "for example the incoming message will look like this (after decryption)"
					}
				],
				"blockTags": [
					{
						"tag": "@example",
						"content": [
							{
								"kind": "code",
								"text": "```ts\n {\n   \"encrypted\":false,\n   \"contents\":\"Hello from test04d!\",\n   \"sign\":\"u7zAM-1fNLZjmuayOkwWvXTBGqMEimOuzp1DJGX4ECg\",\n   \"image\":\"\",\n   \"imageMetaData\":{},\n   \"sender_pubKey\":\n       {\n         \"crv\":\"P-384\",\"ext\":true,\"key_ops\":[],\"kty\":\"EC\",\n         \"x\":\"edqHd4aUn7dGsuDMQxtvzuw-Q2N7l77HBW81KvWj9qtzU7ab-sFHUBqogg2PKihj\",\n         \"y\":\"Oqp27bXL4RUcAHpWUEFHZdyEuhTo8_8oyTsAKJDk1g_NQOA0FR5Sy_8ViTTWS9wT\"\n       },\n   \"sender_username\":\"TestBot\",\n   \"image_sign\":\"3O0AYKthtWWYUX3AWDmdU4kTR49UyNyaA937CfKtcQw\",\n   \"imageMetadata_sign\":\"4LmewpsH6TcRhHYQLivd4Ce87SI1AJIaezhJB5sdD7M\"\n }\n ```"
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 76,
					"name": "_id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 80,
					"name": "channelID",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 84,
					"name": "contents",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 81,
					"name": "control",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 82,
					"name": "encrypted",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 83,
					"name": "encrypted_contents",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 119,
						"name": "EncryptedContents",
						"package": "snackabra"
					}
				},
				{
					"id": 77,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 87,
					"name": "image",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 89,
					"name": "imageMetaData",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 218,
						"name": "ImageMetaData",
						"package": "snackabra"
					}
				},
				{
					"id": 90,
					"name": "imageMetadata_sign",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 88,
					"name": "image_sign",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 75,
					"name": "keys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 211,
						"name": "ChannelKeyStrings",
						"package": "snackabra"
					}
				},
				{
					"id": 91,
					"name": "motd",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 92,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 102,
					"name": "replyTo",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "JsonWebKey"
						},
						"name": "JsonWebKey",
						"package": "typescript"
					}
				},
				{
					"id": 93,
					"name": "roomLocked",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 105,
					"name": "sendTo",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 94,
					"name": "sender_pubKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
							"qualifiedName": "JsonWebKey"
						},
						"name": "JsonWebKey",
						"package": "typescript"
					}
				},
				{
					"id": 95,
					"name": "sender_username",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 86,
					"name": "sign",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 96,
					"name": "system",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 85,
					"name": "text",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 78,
					"name": "timestamp",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 79,
					"name": "timestampPrefix",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 74,
					"name": "type",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 125,
						"name": "ChannelMessageTypes",
						"package": "snackabra"
					}
				},
				{
					"id": 97,
					"name": "user",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 98,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 100,
									"name": "_id",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "JsonWebKey"
										},
										"name": "JsonWebKey",
										"package": "typescript"
									}
								},
								{
									"id": 99,
									"name": "name",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										100,
										99
									]
								}
							]
						}
					}
				},
				{
					"id": 101,
					"name": "verificationToken",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 103,
					"name": "whisper",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 104,
					"name": "whispered",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						76,
						80,
						84,
						81,
						82,
						83,
						77,
						87,
						89,
						90,
						88,
						75,
						91,
						92,
						102,
						93,
						105,
						94,
						95,
						86,
						96,
						85,
						78,
						79,
						74,
						97,
						101,
						103,
						104
					]
				}
			]
		},
		{
			"id": 119,
			"name": "EncryptedContents",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Encryptedcontents\n\nSB standard wrapping encrypted messages.\n\nEncryption is done with AES-GCM, 16 bytes of salt, The\n"
					},
					{
						"kind": "code",
						"text": "``contents``"
					},
					{
						"kind": "text",
						"text": " are url-safe base64, same thing with the nonce (iv),\ndepending on if it's internal or over wire."
					}
				]
			},
			"children": [
				{
					"id": 120,
					"name": "content",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 121,
					"name": "iv",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						120,
						121
					]
				}
			]
		},
		{
			"id": 122,
			"name": "EncryptedContentsBin",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Same as EncryptedContents interface, but binary view enforced"
					}
				]
			},
			"children": [
				{
					"id": 123,
					"name": "content",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				},
				{
					"id": 124,
					"name": "iv",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						123,
						124
					]
				}
			]
		},
		{
			"id": 218,
			"name": "ImageMetaData",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 220,
					"name": "imageId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 221,
					"name": "imageKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 219,
					"name": "imgObjVersion",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "reference",
						"target": 127,
						"name": "SBObjectHandleVersions",
						"package": "snackabra"
					}
				},
				{
					"id": 222,
					"name": "previewId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 223,
					"name": "previewKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 224,
					"name": "previewNonce",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 225,
					"name": "previewSalt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						220,
						221,
						219,
						222,
						223,
						224,
						225
					]
				}
			]
		},
		{
			"id": 66,
			"name": "SBChannelHandle",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "SBChannelHandle\n\nComplete descriptor of a channel. SBUserKeyString (previously 'key')\nis a canonical format of stringified version of 'jwk'..\nThe underlying key is always private. If it corresponds to the channelId,\nthen it's an 'owner' key."
					}
				]
			},
			"children": [
				{
					"id": 70,
					"name": "[SB_CHANNEL_HANDLE_SYMBOL]",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 67,
					"name": "channelId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 69,
					"name": "channelServer",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 68,
					"name": "userKeyString",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						70,
						67,
						69,
						68
					]
				}
			]
		},
		{
			"id": 194,
			"name": "SBPayload",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Essentially a dictionary where each entry is an arraybuffer."
					}
				]
			},
			"indexSignature": {
				"id": 195,
				"name": "__index",
				"variant": "signature",
				"kind": 8192,
				"flags": {},
				"parameters": [
					{
						"id": 196,
						"name": "index",
						"variant": "param",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "reference",
					"target": {
						"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
						"qualifiedName": "ArrayBuffer"
					},
					"name": "ArrayBuffer",
					"package": "typescript"
				}
			}
		},
		{
			"id": 61,
			"name": "SBServer",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 62,
					"name": "channel_server",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The channel server is the server that handles channel creation,\nchannel deletion, and channel access. It is also the server that\nhandles channel messages."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 63,
					"name": "channel_ws",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The channel websocket is the websocket that handles channel\nmessages. It is the same as the channel server, but with a\ndifferent protocol."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 65,
					"name": "shard_server",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "\"shard\" server is a more modern version of the storage server,\ngenerally acting as a caching and/or mirroring layer. It proxies\nany new storage to one or more storage servers, and handles\nit's own caching behavior. Generally, this will be the fastest\ninterface, in particular for reading."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 64,
					"name": "storage_server",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The storage server is the server that all \"shard\" (blob) storage"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						62,
						63,
						65,
						64
					]
				}
			]
		},
		{
			"id": 125,
			"name": "ChannelMessageTypes",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "ack"
					},
					{
						"type": "literal",
						"value": "keys"
					},
					{
						"type": "literal",
						"value": "invalid"
					},
					{
						"type": "literal",
						"value": "ready"
					},
					{
						"type": "literal",
						"value": "encrypted"
					}
				]
			}
		},
		{
			"id": 71,
			"name": "SB384Hash",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 72,
			"name": "SBChannelId",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "reference",
				"target": 71,
				"name": "SB384Hash",
				"package": "snackabra"
			}
		},
		{
			"id": 197,
			"name": "SBKey",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "SBAES256Key"
						},
						"name": "SBAES256Key",
						"package": "snackabra"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "SBPrivateKey"
						},
						"name": "SBPrivateKey",
						"package": "snackabra"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "SBPublicKey"
						},
						"name": "SBPublicKey",
						"package": "snackabra"
					}
				]
			}
		},
		{
			"id": 127,
			"name": "SBObjectHandleVersions",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "1"
					},
					{
						"type": "literal",
						"value": "2"
					}
				]
			}
		},
		{
			"id": 126,
			"name": "SBObjectType",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "SBObjectType\n\nSBObjectType is a single character string that indicates the\ntype of object. Currently, the following types are supported:\n\n- 'f' : full object (e.g. image, this is the most common)\n- 'p' : preview object (e.g. thumbnail)\n- 'b' : block/binary object (e.g. 64KB block)\n- 't' : test object (for testing purposes)\n\nThe 't' type is used for testing purposes, and you should\nnot expect it to have any particular SLA or longevity.\n\nNote that when you retrieve any object, you must have the\nmatching object type."
					}
				]
			},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "f"
					},
					{
						"type": "literal",
						"value": "p"
					},
					{
						"type": "literal",
						"value": "b"
					},
					{
						"type": "literal",
						"value": "t"
					}
				]
			}
		},
		{
			"id": 199,
			"name": "SBUserId",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 198,
			"name": "SBUserKey",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "SBPrivateKey"
						},
						"name": "SBPrivateKey",
						"package": "snackabra"
					},
					{
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "SBPublicKey"
						},
						"name": "SBPublicKey",
						"package": "snackabra"
					}
				]
			}
		},
		{
			"id": 200,
			"name": "SBUserKeyString",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 840,
			"name": "SB",
			"variant": "declaration",
			"kind": 32,
			"flags": {},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 841,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 844,
							"name": "Channel",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 275,
									"name": "Channel",
									"package": "snackabra"
								}
							},
							"defaultValue": "Channel"
						},
						{
							"id": 846,
							"name": "SB384",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 226,
									"name": "SB384",
									"package": "snackabra"
								}
							},
							"defaultValue": "SB384"
						},
						{
							"id": 845,
							"name": "SBCrypto",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 707,
									"name": "SBCrypto",
									"package": "snackabra"
								}
							},
							"defaultValue": "SBCrypto"
						},
						{
							"id": 843,
							"name": "SBMessage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 256,
									"name": "SBMessage",
									"package": "snackabra"
								}
							},
							"defaultValue": "SBMessage"
						},
						{
							"id": 842,
							"name": "Snackabra",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 673,
									"name": "Snackabra",
									"package": "snackabra"
								}
							},
							"defaultValue": "Snackabra"
						},
						{
							"id": 847,
							"name": "arrayBufferToBase64",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 848,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"signatures": [
										{
											"id": 849,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Standardized 'btoa()'-like function, e.g., takes a binary string\n('b') and returns a Base64 encoded version ('a' used to be short\nfor 'ascii'). Defaults to URL safe ('url') but can be overriden\nto use standardized Base64 ('b64')."
													}
												],
												"blockTags": [
													{
														"tag": "@returns",
														"content": [
															{
																"kind": "text",
																"text": "- returns Base64 encoded string"
															}
														]
													}
												]
											},
											"parameters": [
												{
													"id": 850,
													"name": "buffer",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "binary string"
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "ArrayBuffer"
																},
																"name": "ArrayBuffer",
																"package": "typescript"
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Uint8Array"
																},
																"name": "Uint8Array",
																"package": "typescript"
															}
														]
													}
												},
												{
													"id": 851,
													"name": "variant",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "'b64' or 'url'"
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "url"
															},
															{
																"type": "literal",
																"value": "b64"
															}
														]
													},
													"defaultValue": "'url'"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							"defaultValue": "arrayBufferToBase64"
						},
						{
							"id": 852,
							"name": "sbCrypto",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 707,
								"name": "SBCrypto",
								"package": "snackabra"
							},
							"defaultValue": "sbCrypto"
						},
						{
							"id": 853,
							"name": "version",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "version"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								844,
								846,
								845,
								843,
								842,
								847,
								852,
								853
							]
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 838,
			"name": "sbCrypto",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This is the GLOBAL SBCrypto object, which is instantiated\nimmediately upon loading the jslib library.\n\nYou should use this guy, not instantiate your own. We don't\nuse static functions in SBCrypto(), because we want to be\nable to add features (like global key store) incrementally."
					}
				]
			},
			"type": {
				"type": "reference",
				"target": 707,
				"name": "SBCrypto",
				"package": "snackabra"
			},
			"defaultValue": "..."
		},
		{
			"id": 839,
			"name": "version",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"type": {
				"type": "literal",
				"value": "2.0.0-alpha.5 (build 20)"
			},
			"defaultValue": "'2.0.0-alpha.5 (build 20)'"
		},
		{
			"id": 23,
			"name": "arrayBuffer32ToBase62",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 24,
					"name": "arrayBuffer32ToBase62",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convenience wrapper."
							}
						]
					},
					"parameters": [
						{
							"id": 25,
							"name": "buffer",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "Base62Encoded"
						},
						"name": "Base62Encoded",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 14,
			"name": "arrayBufferToBase62",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 15,
					"name": "arrayBufferToBase62",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Converts any array buffer to base62.\nRestriction: ArrayBuffer must be size multiple of 4 bytes (32 bits)."
							}
						]
					},
					"parameters": [
						{
							"id": 16,
							"name": "buffer",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 834,
			"name": "arrayBufferToBase64",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 835,
					"name": "arrayBufferToBase64",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Standardized 'btoa()'-like function, e.g., takes a binary string\n('b') and returns a Base64 encoded version ('a' used to be short\nfor 'ascii'). Defaults to URL safe ('url') but can be overriden\nto use standardized Base64 ('b64')."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "- returns Base64 encoded string"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 836,
							"name": "buffer",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "binary string"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 837,
							"name": "variant",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "'b64' or 'url'"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "url"
									},
									{
										"type": "literal",
										"value": "b64"
									}
								]
							},
							"defaultValue": "'url'"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 46,
			"name": "assemblePayload",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 47,
					"name": "assemblePayload",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Assemble payload. This creates a single binary (wire) format\nof an arbitrary set of (named) binary objects."
							}
						]
					},
					"parameters": [
						{
							"id": 48,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 194,
								"name": "SBPayload",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							},
							{
								"type": "literal",
								"value": null
							}
						]
					}
				}
			]
		},
		{
			"id": 17,
			"name": "base62ToArrayBuffer",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 18,
					"name": "base62ToArrayBuffer",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "base62ToArrayBuffer\n\nConverts a base62 string to matchin ArrayBuffer.\nRestriction: the original array buffer size must have\nbeen a multiple of 4 bytes (32 bits), eg. this\nfunction will always return such an ArrayBuffer."
							}
						]
					},
					"parameters": [
						{
							"id": 19,
							"name": "s",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 20,
			"name": "base62ToArrayBuffer32",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 21,
					"name": "base62ToArrayBuffer32",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convenience wrapper, enforces array32 format"
							}
						]
					},
					"parameters": [
						{
							"id": 22,
							"name": "s",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "snackabra-jslib/snackabra.ts",
									"qualifiedName": "Base62Encoded"
								},
								"name": "Base62Encoded",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "ArrayBuffer"
						},
						"name": "ArrayBuffer",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 26,
			"name": "base62ToBase64",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 27,
					"name": "base62ToBase64",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "base62ToBase64 converts a base62 encoded string to a base64 encoded string."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "base64 encoded string"
									}
								]
							},
							{
								"tag": "@throws",
								"content": [
									{
										"kind": "text",
										"text": "Error if the string is not a valid base62 encoded string"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 28,
							"name": "s",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "base62 encoded string"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "snackabra-jslib/snackabra.ts",
									"qualifiedName": "Base62Encoded"
								},
								"name": "Base62Encoded",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 7,
			"name": "base64ToArrayBuffer",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 8,
					"name": "base64ToArrayBuffer",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Standardized 'atob()' function, e.g. takes the a Base64 encoded\ninput and decodes it. Note: always returns Uint8Array.\nAccepts both regular Base64 and the URL-friendly variant,\nwhere "
							},
							{
								"kind": "code",
								"text": "`+`"
							},
							{
								"kind": "text",
								"text": " => "
							},
							{
								"kind": "code",
								"text": "`-`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`/`"
							},
							{
								"kind": "text",
								"text": " => "
							},
							{
								"kind": "code",
								"text": "`_`"
							},
							{
								"kind": "text",
								"text": ", and the padding character is omitted."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "- returns decoded binary result"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 9,
							"name": "str",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "string in either regular or URL-friendly representation."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 29,
			"name": "base64ToBase62",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 30,
					"name": "base64ToBase62",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convenience function.\n\nbase64ToBase62 converts a base64 encoded string to a base62 encoded string."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "base62 encoded string"
									}
								]
							},
							{
								"tag": "@throws",
								"content": [
									{
										"kind": "text",
										"text": "Error if the string is not a valid base64 encoded string"
									}
								]
							}
						]
					},
					"parameters": [
						{
							"id": 31,
							"name": "s",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "base64 encoded string"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "snackabra-jslib/snackabra.ts",
							"qualifiedName": "Base62Encoded"
						},
						"name": "Base62Encoded",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 10,
			"name": "compareBuffers",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 11,
					"name": "compareBuffers",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Compare buffers"
							}
						]
					},
					"parameters": [
						{
							"id": 12,
							"name": "a",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 13,
							"name": "b",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayBuffer"
										},
										"name": "ArrayBuffer",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Uint8Array"
										},
										"name": "Uint8Array",
										"package": "typescript"
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			]
		},
		{
			"id": 55,
			"name": "decodeB64Url",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 56,
					"name": "decodeB64Url",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Decode b64 URL"
							}
						]
					},
					"parameters": [
						{
							"id": 57,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 52,
			"name": "encodeB64Url",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 53,
					"name": "encodeB64Url",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Encode into b64 URL"
							}
						]
					},
					"parameters": [
						{
							"id": 54,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 1,
			"name": "encryptedContentsMakeBinary",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 2,
					"name": "encryptedContentsMakeBinary",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Force EncryptedContents object to binary (interface\nsupports either string or arrays). String contents\nimplies base64 encoding."
							}
						]
					},
					"parameters": [
						{
							"id": 3,
							"name": "o",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 119,
								"name": "EncryptedContents",
								"package": "snackabra"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 122,
						"name": "EncryptedContentsBin",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 49,
			"name": "extractPayload",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 50,
					"name": "extractPayload",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extract payload - this decodes from our binary (wire) format\nto a JS object. This provides a binary encoding of any JSON,\nand it allows some elements of the JSON to be raw (binary)."
							}
						]
					},
					"parameters": [
						{
							"id": 51,
							"name": "payload",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "ArrayBuffer"
								},
								"name": "ArrayBuffer",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 194,
						"name": "SBPayload",
						"package": "snackabra"
					}
				}
			]
		},
		{
			"id": 4,
			"name": "getRandomValues",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 5,
					"name": "getRandomValues",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Fills buffer with random data"
							}
						]
					},
					"parameters": [
						{
							"id": 6,
							"name": "buffer",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Uint8Array"
								},
								"name": "Uint8Array",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Uint8Array"
						},
						"name": "Uint8Array",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 32,
			"name": "isBase62Encoded",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 33,
					"name": "isBase62Encoded",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 34,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "snackabra-jslib/snackabra.ts",
											"qualifiedName": "Base62Encoded"
										},
										"name": "Base62Encoded",
										"package": "snackabra"
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "snackabra-jslib/snackabra.ts",
								"qualifiedName": "Base62Encoded"
							},
							"name": "Base62Encoded",
							"package": "snackabra"
						}
					}
				}
			]
		},
		{
			"id": 58,
			"name": "isSBKey",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 59,
					"name": "isSBKey",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"parameters": [
						{
							"id": 60,
							"name": "key",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "key",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": 197,
							"name": "SBKey",
							"package": "snackabra"
						}
					}
				}
			]
		},
		{
			"id": 39,
			"name": "jsonParseWrapper",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 40,
					"name": "jsonParseWrapper",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "There are many problems with JSON parsing, adding a resilient wrapper to capture more info.\nThe 'loc' parameter should be a (unique) string that allows you to find the usage\nin the code; one approach is the line number in the file."
							}
						]
					},
					"parameters": [
						{
							"id": 41,
							"name": "str",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 42,
							"name": "loc",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			]
		},
		{
			"id": 35,
			"name": "partition",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"signatures": [
				{
					"id": 36,
					"name": "partition",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Partition"
							}
						]
					},
					"parameters": [
						{
							"id": 37,
							"name": "str",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 38,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Namespaces",
			"children": [
				128
			]
		},
		{
			"title": "Classes",
			"children": [
				275,
				421,
				175,
				226,
				707,
				256,
				627,
				673
			]
		},
		{
			"title": "Interfaces",
			"children": [
				115,
				201,
				211,
				106,
				73,
				119,
				122,
				218,
				66,
				194,
				61
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				125,
				71,
				72,
				197,
				127,
				126,
				199,
				198,
				200
			]
		},
		{
			"title": "Variables",
			"children": [
				840,
				838,
				839
			]
		},
		{
			"title": "Functions",
			"children": [
				23,
				14,
				834,
				46,
				17,
				20,
				26,
				7,
				29,
				10,
				55,
				52,
				1,
				49,
				4,
				32,
				58,
				39,
				35
			]
		}
	],
	"packageName": "snackabra",
	"symbolIdMap": {
		"0": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "encryptedContentsMakeBinary"
		},
		"2": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "encryptedContentsMakeBinary"
		},
		"3": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "o"
		},
		"4": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "getRandomValues"
		},
		"5": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "getRandomValues"
		},
		"6": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"7": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToArrayBuffer"
		},
		"8": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToArrayBuffer"
		},
		"9": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "str"
		},
		"10": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "compareBuffers"
		},
		"11": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "compareBuffers"
		},
		"12": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "a"
		},
		"13": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b"
		},
		"14": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase62"
		},
		"15": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase62"
		},
		"16": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"17": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToArrayBuffer"
		},
		"18": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToArrayBuffer"
		},
		"19": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"20": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToArrayBuffer32"
		},
		"21": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToArrayBuffer32"
		},
		"22": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"23": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBuffer32ToBase62"
		},
		"24": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBuffer32ToBase62"
		},
		"25": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"26": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToBase64"
		},
		"27": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base62ToBase64"
		},
		"28": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"29": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToBase62"
		},
		"30": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "base64ToBase62"
		},
		"31": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "s"
		},
		"32": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "isBase62Encoded"
		},
		"33": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "isBase62Encoded"
		},
		"34": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"35": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "partition"
		},
		"36": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "partition"
		},
		"37": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "str"
		},
		"38": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "n"
		},
		"39": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "jsonParseWrapper"
		},
		"40": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "jsonParseWrapper"
		},
		"41": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "str"
		},
		"42": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "loc"
		},
		"46": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "assemblePayload"
		},
		"47": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "assemblePayload"
		},
		"48": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"49": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractPayload"
		},
		"50": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractPayload"
		},
		"51": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "payload"
		},
		"52": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "encodeB64Url"
		},
		"53": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "encodeB64Url"
		},
		"54": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "input"
		},
		"55": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "decodeB64Url"
		},
		"56": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "decodeB64Url"
		},
		"57": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "input"
		},
		"58": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "isSBKey"
		},
		"59": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "isSBKey"
		},
		"60": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"61": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBServer"
		},
		"62": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBServer.channel_server"
		},
		"63": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBServer.channel_ws"
		},
		"64": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBServer.storage_server"
		},
		"65": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBServer.shard_server"
		},
		"66": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle"
		},
		"67": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle.channelId"
		},
		"68": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle.userKeyString"
		},
		"69": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle.channelServer"
		},
		"70": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelHandle.[SB_CHANNEL_HANDLE_SYMBOL]"
		},
		"71": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384Hash"
		},
		"72": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelId"
		},
		"73": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage"
		},
		"74": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.type"
		},
		"75": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.keys"
		},
		"76": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage._id"
		},
		"77": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.id"
		},
		"78": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.timestamp"
		},
		"79": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.timestampPrefix"
		},
		"80": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.channelID"
		},
		"81": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.control"
		},
		"82": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.encrypted"
		},
		"83": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.encrypted_contents"
		},
		"84": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.contents"
		},
		"85": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.text"
		},
		"86": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.sign"
		},
		"87": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.image"
		},
		"88": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.image_sign"
		},
		"89": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.imageMetaData"
		},
		"90": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.imageMetadata_sign"
		},
		"91": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.motd"
		},
		"92": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.ready"
		},
		"93": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.roomLocked"
		},
		"94": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.sender_pubKey"
		},
		"95": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.sender_username"
		},
		"96": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.system"
		},
		"97": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.user"
		},
		"98": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"99": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.name"
		},
		"100": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type._id"
		},
		"101": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.verificationToken"
		},
		"102": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.replyTo"
		},
		"103": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.whisper"
		},
		"104": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.whispered"
		},
		"105": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessage.sendTo"
		},
		"106": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys"
		},
		"107": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.ownerKey"
		},
		"108": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.guestKey"
		},
		"109": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.encryptionKey"
		},
		"110": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.signKey"
		},
		"111": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.publicSignKey"
		},
		"112": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.privateKey"
		},
		"113": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.lockedKey"
		},
		"114": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeys.encryptedLockedKey"
		},
		"115": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData"
		},
		"116": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.room_id"
		},
		"117": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.join_requests"
		},
		"118": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelAdminData.capacity"
		},
		"119": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptedContents"
		},
		"120": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptedContents.content"
		},
		"121": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptedContents.iv"
		},
		"122": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptedContentsBin"
		},
		"123": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptedContentsBin.content"
		},
		"124": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "EncryptedContentsBin.iv"
		},
		"125": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelMessageTypes"
		},
		"126": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectType"
		},
		"127": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandleVersions"
		},
		"128": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces"
		},
		"129": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base"
		},
		"130": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.version"
		},
		"131": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.type"
		},
		"132": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.verification"
		},
		"133": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.iv"
		},
		"134": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.salt"
		},
		"135": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.fileName"
		},
		"136": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.dateAndTime"
		},
		"137": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.fileType"
		},
		"138": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.lastModified"
		},
		"139": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.actualSize"
		},
		"140": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.savedSize"
		},
		"141": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.[SB_OBJECT_HANDLE_SYMBOL]"
		},
		"142": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_v1"
		},
		"143": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_v1.version"
		},
		"144": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_v1.id"
		},
		"145": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_v1.key"
		},
		"146": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_v1.id32"
		},
		"147": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_v1.key32"
		},
		"148": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.type"
		},
		"149": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.verification"
		},
		"150": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.iv"
		},
		"151": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.salt"
		},
		"152": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.fileName"
		},
		"153": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.dateAndTime"
		},
		"154": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.fileType"
		},
		"155": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.lastModified"
		},
		"156": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.actualSize"
		},
		"157": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.savedSize"
		},
		"158": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.[SB_OBJECT_HANDLE_SYMBOL]"
		},
		"159": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_v2"
		},
		"160": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_v2.version"
		},
		"161": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_v2.id"
		},
		"162": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_v2.key"
		},
		"163": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.type"
		},
		"164": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.verification"
		},
		"165": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.iv"
		},
		"166": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.salt"
		},
		"167": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.fileName"
		},
		"168": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.dateAndTime"
		},
		"169": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.fileType"
		},
		"170": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.lastModified"
		},
		"171": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.actualSize"
		},
		"172": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.savedSize"
		},
		"173": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle_base.[SB_OBJECT_HANDLE_SYMBOL]"
		},
		"174": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Interfaces.SBObjectHandle"
		},
		"175": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus"
		},
		"178": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.bus"
		},
		"182": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.subscribe"
		},
		"183": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.subscribe"
		},
		"184": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "event"
		},
		"185": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handler"
		},
		"186": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.unsubscribe"
		},
		"187": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.unsubscribe"
		},
		"188": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "event"
		},
		"189": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handler"
		},
		"190": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.publish"
		},
		"191": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "MessageBus.publish"
		},
		"192": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "event"
		},
		"193": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "args"
		},
		"194": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBPayload"
		},
		"195": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBPayload.__index"
		},
		"197": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBKey"
		},
		"198": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBUserKey"
		},
		"199": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBUserId"
		},
		"200": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBUserKeyString"
		},
		"201": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData"
		},
		"202": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.roomId"
		},
		"203": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.channelId"
		},
		"204": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.ownerKey"
		},
		"205": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.encryptionKey"
		},
		"206": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.signKey"
		},
		"207": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.motherChannel"
		},
		"208": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.storageToken"
		},
		"209": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.SERVER_SECRET"
		},
		"210": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelData.size"
		},
		"211": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings"
		},
		"212": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings.encryptionKey"
		},
		"213": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings.guestKey"
		},
		"214": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings.ownerKey"
		},
		"215": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings.signKey"
		},
		"216": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings.encryptedLockedKey"
		},
		"217": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelKeyStrings.error"
		},
		"218": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ImageMetaData"
		},
		"219": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ImageMetaData.imgObjVersion"
		},
		"220": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ImageMetaData.imageId"
		},
		"221": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ImageMetaData.imageKey"
		},
		"222": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ImageMetaData.previewId"
		},
		"223": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ImageMetaData.previewKey"
		},
		"224": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ImageMetaData.previewNonce"
		},
		"225": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ImageMetaData.previewSalt"
		},
		"226": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384"
		},
		"227": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.__constructor"
		},
		"228": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384"
		},
		"229": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"230": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "forcePrivate"
		},
		"231": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ready"
		},
		"232": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.sb384Ready"
		},
		"238": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.readyFlag"
		},
		"239": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.readyFlag"
		},
		"240": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"241": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"242": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"243": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"244": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"245": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"246": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwk"
		},
		"247": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwk"
		},
		"248": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.key"
		},
		"249": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.key"
		},
		"250": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"251": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"252": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userKeyString"
		},
		"253": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userKeyString"
		},
		"254": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"255": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"256": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage"
		},
		"257": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.__constructor"
		},
		"258": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage"
		},
		"259": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channel"
		},
		"260": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "bodyParameter"
		},
		"261": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sendToJsonWebKey"
		},
		"262": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.ready"
		},
		"263": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.contents"
		},
		"266": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.MAX_SB_BODY_SIZE"
		},
		"267": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.channel"
		},
		"268": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.encryptionKey"
		},
		"269": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.encryptionKey"
		},
		"270": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.sendToPubKey"
		},
		"271": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.sendToPubKey"
		},
		"272": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.send"
		},
		"273": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.send"
		},
		"274": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBMessage.[SB_MESSAGE_SYMBOL]"
		},
		"275": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel"
		},
		"276": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.__constructor"
		},
		"277": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel"
		},
		"278": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handle"
		},
		"279": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel"
		},
		"280": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sbServer"
		},
		"281": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "userKey"
		},
		"282": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelId"
		},
		"283": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.ready"
		},
		"284": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelReady"
		},
		"286": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.motd"
		},
		"287": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.locked"
		},
		"288": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.adminData"
		},
		"289": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.verifiedGuest"
		},
		"291": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.readyFlag"
		},
		"292": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.readyFlag"
		},
		"293": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"294": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"301": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.deCryptChannelMessage"
		},
		"302": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.deCryptChannelMessage"
		},
		"303": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m00"
		},
		"304": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m01"
		},
		"305": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLastMessageTimes"
		},
		"306": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLastMessageTimes"
		},
		"307": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getOldMessages"
		},
		"308": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getOldMessages"
		},
		"309": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "currentMessagesLength"
		},
		"310": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "paginate"
		},
		"311": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.send"
		},
		"312": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.send"
		},
		"313": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_msg"
		},
		"314": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.updateCapacity"
		},
		"315": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.updateCapacity"
		},
		"316": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "capacity"
		},
		"317": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getCapacity"
		},
		"318": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getCapacity"
		},
		"319": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageLimit"
		},
		"320": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageLimit"
		},
		"321": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMother"
		},
		"322": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMother"
		},
		"323": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getJoinRequests"
		},
		"324": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getJoinRequests"
		},
		"325": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.isLocked"
		},
		"326": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.isLocked"
		},
		"327": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.setMOTD"
		},
		"328": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.setMOTD"
		},
		"329": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "motd"
		},
		"330": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getAdminData"
		},
		"331": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getAdminData"
		},
		"332": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.downloadData"
		},
		"333": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.downloadData"
		},
		"334": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.uploadChannel"
		},
		"335": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.uploadChannel"
		},
		"336": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelData"
		},
		"337": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.authorize"
		},
		"338": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.authorize"
		},
		"339": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ownerPublicKey"
		},
		"340": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "serverSecret"
		},
		"341": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.postPubKey"
		},
		"342": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.postPubKey"
		},
		"343": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_exportable_pubKey"
		},
		"344": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"345": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.success"
		},
		"346": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.storageRequest"
		},
		"347": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.storageRequest"
		},
		"348": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "byteLength"
		},
		"349": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.lock"
		},
		"350": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.lock"
		},
		"351": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"352": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"353": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.locked"
		},
		"354": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.lockedKey"
		},
		"355": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.acceptVisitor"
		},
		"356": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.acceptVisitor"
		},
		"357": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "userId"
		},
		"358": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.ownerKeyRotation"
		},
		"359": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.ownerKeyRotation"
		},
		"360": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageToken"
		},
		"361": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageToken"
		},
		"362": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "size"
		},
		"363": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.budd"
		},
		"364": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.budd"
		},
		"365": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.budd"
		},
		"366": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"367": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"368": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.keys"
		},
		"369": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.storage"
		},
		"370": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.targetChannel"
		},
		"371": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.sbChannelKeysReady"
		},
		"383": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.encryptionKey"
		},
		"384": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.encryptionKey"
		},
		"385": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelSignKey"
		},
		"386": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelSignKey"
		},
		"387": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.owner"
		},
		"388": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.owner"
		},
		"389": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelData"
		},
		"390": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelData"
		},
		"391": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.keys"
		},
		"392": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.keys"
		},
		"393": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelId"
		},
		"394": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelId"
		},
		"395": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelServer"
		},
		"396": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelServer"
		},
		"397": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelServer"
		},
		"398": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelServer"
		},
		"399": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.sb384Ready"
		},
		"405": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"406": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"407": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"408": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"409": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"410": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"411": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwk"
		},
		"412": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwk"
		},
		"413": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.key"
		},
		"414": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.key"
		},
		"415": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"416": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"417": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userKeyString"
		},
		"418": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userKeyString"
		},
		"419": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"420": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"421": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket"
		},
		"422": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.__constructor"
		},
		"423": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket"
		},
		"424": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sbServerOrHandle"
		},
		"425": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "onMessage"
		},
		"426": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"427": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"428": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m"
		},
		"429": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket"
		},
		"430": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sbServerOrHandle"
		},
		"431": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "onMessage"
		},
		"432": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"433": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"434": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m"
		},
		"435": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"436": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelId"
		},
		"437": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.ready"
		},
		"438": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.channelSocketReady"
		},
		"473": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.status"
		},
		"474": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.status"
		},
		"475": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.onMessage"
		},
		"476": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.onMessage"
		},
		"477": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"478": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"479": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m"
		},
		"480": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.onMessage"
		},
		"481": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "f"
		},
		"482": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"483": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"484": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m"
		},
		"485": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.enableTrace"
		},
		"486": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.enableTrace"
		},
		"487": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b"
		},
		"488": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.send"
		},
		"489": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.send"
		},
		"490": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "msg"
		},
		"491": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.exportable_owner_pubKey"
		},
		"492": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ChannelSocket.exportable_owner_pubKey"
		},
		"493": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.channelReady"
		},
		"495": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.motd"
		},
		"496": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.locked"
		},
		"497": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.adminData"
		},
		"498": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.verifiedGuest"
		},
		"500": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.readyFlag"
		},
		"501": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.readyFlag"
		},
		"502": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"503": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.api"
		},
		"510": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.deCryptChannelMessage"
		},
		"511": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.deCryptChannelMessage"
		},
		"512": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m00"
		},
		"513": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m01"
		},
		"514": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLastMessageTimes"
		},
		"515": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getLastMessageTimes"
		},
		"516": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getOldMessages"
		},
		"517": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getOldMessages"
		},
		"518": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "currentMessagesLength"
		},
		"519": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "paginate"
		},
		"520": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.updateCapacity"
		},
		"521": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.updateCapacity"
		},
		"522": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "capacity"
		},
		"523": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getCapacity"
		},
		"524": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getCapacity"
		},
		"525": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageLimit"
		},
		"526": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageLimit"
		},
		"527": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMother"
		},
		"528": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getMother"
		},
		"529": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getJoinRequests"
		},
		"530": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getJoinRequests"
		},
		"531": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.isLocked"
		},
		"532": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.isLocked"
		},
		"533": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.setMOTD"
		},
		"534": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.setMOTD"
		},
		"535": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "motd"
		},
		"536": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getAdminData"
		},
		"537": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getAdminData"
		},
		"538": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.downloadData"
		},
		"539": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.downloadData"
		},
		"540": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.uploadChannel"
		},
		"541": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.uploadChannel"
		},
		"542": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelData"
		},
		"543": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.authorize"
		},
		"544": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.authorize"
		},
		"545": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ownerPublicKey"
		},
		"546": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "serverSecret"
		},
		"547": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.postPubKey"
		},
		"548": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.postPubKey"
		},
		"549": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_exportable_pubKey"
		},
		"550": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"551": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.success"
		},
		"552": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.storageRequest"
		},
		"553": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.storageRequest"
		},
		"554": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "byteLength"
		},
		"555": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.lock"
		},
		"556": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.lock"
		},
		"557": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"558": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"559": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.locked"
		},
		"560": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.lockedKey"
		},
		"561": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.acceptVisitor"
		},
		"562": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.acceptVisitor"
		},
		"563": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "userId"
		},
		"564": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.ownerKeyRotation"
		},
		"565": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.ownerKeyRotation"
		},
		"566": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageToken"
		},
		"567": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.getStorageToken"
		},
		"568": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "size"
		},
		"569": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.budd"
		},
		"570": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.budd"
		},
		"571": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Channel.budd"
		},
		"572": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"573": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"574": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.keys"
		},
		"575": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.storage"
		},
		"576": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.targetChannel"
		},
		"577": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.sbChannelKeysReady"
		},
		"589": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.encryptionKey"
		},
		"590": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.encryptionKey"
		},
		"591": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelSignKey"
		},
		"592": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelSignKey"
		},
		"593": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.owner"
		},
		"594": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.owner"
		},
		"595": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelData"
		},
		"596": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelData"
		},
		"597": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.keys"
		},
		"598": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.keys"
		},
		"599": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelId"
		},
		"600": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelId"
		},
		"601": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelServer"
		},
		"602": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelServer"
		},
		"603": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBChannelKeys.channelServer"
		},
		"604": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channelServer"
		},
		"605": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.sb384Ready"
		},
		"611": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"612": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.private"
		},
		"613": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"614": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.hash"
		},
		"615": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"616": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.ownerChannelId"
		},
		"617": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwk"
		},
		"618": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.jwk"
		},
		"619": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.key"
		},
		"620": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.key"
		},
		"621": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"622": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.exportable_pubKey"
		},
		"623": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userKeyString"
		},
		"624": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userKeyString"
		},
		"625": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"626": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB384.userId"
		},
		"627": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle"
		},
		"628": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.__constructor"
		},
		"629": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle"
		},
		"630": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "options"
		},
		"631": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.version"
		},
		"636": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.shardServer"
		},
		"637": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.iv"
		},
		"638": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.salt"
		},
		"639": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.fileName"
		},
		"640": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.dateAndTime"
		},
		"641": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.fileType"
		},
		"642": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.lastModified"
		},
		"643": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.actualSize"
		},
		"644": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.savedSize"
		},
		"645": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.id_binary"
		},
		"646": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.id_binary"
		},
		"647": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"648": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.key_binary"
		},
		"649": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.key_binary"
		},
		"650": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"651": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.id"
		},
		"652": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.id"
		},
		"653": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.id"
		},
		"654": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"655": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.key"
		},
		"656": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.key"
		},
		"657": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.key"
		},
		"658": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"659": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.id64"
		},
		"660": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.id64"
		},
		"661": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.id32"
		},
		"662": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.id32"
		},
		"663": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.key64"
		},
		"664": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.key64"
		},
		"665": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.key32"
		},
		"666": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.key32"
		},
		"667": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.verification"
		},
		"668": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.verification"
		},
		"669": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.verification"
		},
		"670": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "value"
		},
		"671": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.type"
		},
		"672": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBObjectHandle.type"
		},
		"673": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra"
		},
		"674": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.__constructor"
		},
		"675": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra"
		},
		"676": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sbServerOrChannelServer"
		},
		"677": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "setDBG"
		},
		"678": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "setDBG2"
		},
		"679": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.channelServer"
		},
		"680": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.storageServer"
		},
		"683": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.attach"
		},
		"684": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.attach"
		},
		"685": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handle"
		},
		"686": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.create"
		},
		"687": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.create"
		},
		"688": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "ownerKeys"
		},
		"689": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "budgetChannel"
		},
		"690": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.create"
		},
		"691": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sbServer"
		},
		"692": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "serverSecretOrBudgetChannel"
		},
		"693": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keys"
		},
		"694": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.connect"
		},
		"695": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.connect"
		},
		"696": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "handle"
		},
		"697": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "onMessage"
		},
		"698": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"699": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"700": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "m"
		},
		"701": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.storage"
		},
		"702": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.storage"
		},
		"703": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.crypto"
		},
		"704": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.crypto"
		},
		"705": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.version"
		},
		"706": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "Snackabra.version"
		},
		"707": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto"
		},
		"711": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.SBKeyToJWK"
		},
		"712": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.SBKeyToJWK"
		},
		"713": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"714": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.JWKToSBKey"
		},
		"715": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.JWKToSBKey"
		},
		"716": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"717": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "forcePublic"
		},
		"718": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.SBKeyToString"
		},
		"719": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.SBKeyToString"
		},
		"720": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"721": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.JWKToSBUserId"
		},
		"722": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.JWKToSBUserId"
		},
		"723": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"724": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.StringToSBKey"
		},
		"725": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.StringToSBKey"
		},
		"726": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "input"
		},
		"727": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.StringToJWK"
		},
		"728": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.StringToJWK"
		},
		"729": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "userId"
		},
		"730": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.addKnownKey"
		},
		"731": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.addKnownKey"
		},
		"732": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"733": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.lookupKeyGlobal"
		},
		"734": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.lookupKeyGlobal"
		},
		"735": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "hash"
		},
		"736": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateIdKey"
		},
		"737": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateIdKey"
		},
		"738": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buf"
		},
		"739": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type"
		},
		"740": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.id_binary"
		},
		"741": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__type.key_material"
		},
		"742": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.extractPubKey"
		},
		"743": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.extractPubKey"
		},
		"744": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "privateKey"
		},
		"752": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.sb384Hash"
		},
		"753": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.sb384Hash"
		},
		"754": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"755": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.compareHashWithKey"
		},
		"756": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.compareHashWithKey"
		},
		"757": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "hash"
		},
		"758": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"759": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.verifyChannelId"
		},
		"760": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.verifyChannelId"
		},
		"761": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "owner_key"
		},
		"762": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "channel_id"
		},
		"763": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateKeys"
		},
		"764": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.generateKeys"
		},
		"765": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.importKey"
		},
		"766": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.importKey"
		},
		"767": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "format"
		},
		"768": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"769": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "type"
		},
		"770": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractable"
		},
		"771": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keyUsages"
		},
		"772": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.exportKey"
		},
		"773": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.exportKey"
		},
		"774": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "format"
		},
		"775": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"776": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.deriveKey"
		},
		"777": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.deriveKey"
		},
		"778": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "privateKey"
		},
		"779": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "publicKey"
		},
		"780": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "type"
		},
		"781": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "extractable"
		},
		"782": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keyUsages"
		},
		"783": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.encrypt"
		},
		"784": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.encrypt"
		},
		"785": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"786": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"787": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_iv"
		},
		"788": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "returnType"
		},
		"789": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.encrypt"
		},
		"790": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "data"
		},
		"791": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key"
		},
		"792": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "_iv"
		},
		"793": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "returnType"
		},
		"794": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.wrap"
		},
		"795": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.wrap"
		},
		"796": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "k"
		},
		"797": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b"
		},
		"798": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "bodyType"
		},
		"799": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.wrap"
		},
		"800": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "k"
		},
		"801": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "b"
		},
		"802": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "bodyType"
		},
		"803": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.unwrap"
		},
		"804": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.unwrap"
		},
		"805": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "k"
		},
		"806": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "o"
		},
		"807": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "returnType"
		},
		"808": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.unwrap"
		},
		"809": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "k"
		},
		"810": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "o"
		},
		"811": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "returnType"
		},
		"812": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.sign"
		},
		"813": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.sign"
		},
		"814": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "secretKey"
		},
		"815": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "contents"
		},
		"816": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.verify"
		},
		"817": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.verify"
		},
		"818": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "verifyKey"
		},
		"819": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sign"
		},
		"820": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "contents"
		},
		"821": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.str2ab"
		},
		"822": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.str2ab"
		},
		"823": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "string"
		},
		"824": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.ab2str"
		},
		"825": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.ab2str"
		},
		"826": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"827": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.compareKeys"
		},
		"828": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.compareKeys"
		},
		"829": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key1"
		},
		"830": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "key2"
		},
		"831": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.channelKeyStringsToCryptoKeys"
		},
		"832": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SBCrypto.channelKeyStringsToCryptoKeys"
		},
		"833": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "keyStrings"
		},
		"834": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase64"
		},
		"835": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase64"
		},
		"836": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"837": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "variant"
		},
		"838": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "sbCrypto"
		},
		"839": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "version"
		},
		"840": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "SB"
		},
		"841": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object"
		},
		"842": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.Snackabra"
		},
		"843": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.SBMessage"
		},
		"844": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.Channel"
		},
		"845": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.SBCrypto"
		},
		"846": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.SB384"
		},
		"847": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.arrayBufferToBase64"
		},
		"848": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase64"
		},
		"849": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "arrayBufferToBase64"
		},
		"850": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "buffer"
		},
		"851": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "variant"
		},
		"852": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.sbCrypto"
		},
		"853": {
			"sourceFileName": "snackabra-jslib/snackabra.ts",
			"qualifiedName": "__object.version"
		}
	}
}